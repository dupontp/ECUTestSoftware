<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MicroLC_Software_API</name>
    </assembly>
    <members>
        <member name="M:bosch.de.abt.beg.microLC.API.APIExceptionHandler.HandleUnhandledExceptions(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Method which handles all unhandled Exceptions which are caused by the API.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IApplication">
            <summary>
            
            ONLY NECESSARY FOR USE WITH COM - NOT RECOMMENDED TO USE WITH .NET-API
            USE STATIC METHODS OF MICROLCMANAGER INSTEAD
            
            This is the default interface of the Application class. It is used to visible all
            Methods inside the COM interface.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IApplication.Manager">
            <summary>
            Returns The Instance of a microLCManager -> Wrapper for: MicroLCManager.GetInstance()
            </summary>
            <returns>Instance of MicroLCManager</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IApplication.InitializeManager(System.Boolean)">
            <summary>
            Com-Wrapper Function for MicroLCManager.InitializeManager(includeMockups)
            
            The MicroLCManager is a Singleton. He can only be created once per runtime. If the user wants to start with extra Configuration,
            He has to call this Methode before he calls getInstance. Attention: The MicroLC can only initialized once. Otherwise an exception is thrown.
            </summary>
            <param name="includeMockups">should demos be integreated</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IApplication.InitializeManager(System.String)">
            <summary>
            COM-Wrapper Function for MicroLCManager.InitializeManager(Path)
            
            The MicroLCManager is a Singleton. He can only be created once per runtime. If the user wants to start with extra Configuration,
            He has to call this Methode before he calls getInstance. Attention: The MicroLC can only initialized once. Otherwise an exception is thrown.
            </summary>
            <param name="Path">path to a MicroLC Software Project File</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IApplication.InitializeManager_2(System.String)">
            <summary>
            COM Wrapper Fucntion for COM-Wrapper Function for MicroLCManager.InitializeManager(Path) to solve problesms when changing order of methods in file
            
            The MicroLCManager is a Singleton. He can only be created once per runtime. If the user wants to start with extra Configuration,
            He has to call this Methode before he calls getInstance. Attention: The MicroLC can only initialized once. Otherwise an exception is thrown.
            </summary>
            <param name="Path">path to a MicroLC Software Project File</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IApplication.InitializeManager(System.Boolean,System.String)">
            <summary>
            Com-Wrapper Function for MicroLCManager.InitializeManager(includeMockups, Path)
            
            The MicroLCManager is a Singleton. He can only be created once per runtime. If the user wants to start with extra Configuration,
            He has to call this Methode before he calls getInstance. Attention: The MicroLC can only initialized once. Otherwise an exception is thrown.
            </summary>
            <param name="includeMockups">should demos be integrated</param>
            <param name="Path">path to a MicroLC Software Project File</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IApplication.InitializeManager_3(System.Boolean,System.String)">
            <summary>
            Second Com-Wrapper Function for MicroLCManager.InitializeManager(includeMockups, Path). Overlaoded methods change the index when changing their order
            
            The MicroLCManager is a Singleton. He can only be created once per runtime. If the user wants to start with extra Configuration,
            He has to call this Methode before he calls getInstance. Attention: The MicroLC can only initialized once. Otherwise an exception is thrown.
            </summary>
            <param name="includeMockups">should demos be integrated</param>
            <param name="Path">path to a MicroLC Software Project File</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IApplication.IsInitialized">
            <summary>
            Com-Wrapper Property for MicroLCManager.IsInitialized
            
            Indicates if the MicroLCManager is already initialized.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IApplication.ResetManager">
            <summary>
            Resets the API and frees all Resources.
            Should be used when the API is blocked from another program.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IApplication.ExitManager">
            <summary>
            Makes it possible to create a new instance of MicroLCManager, while discarding the old.
            Useful if a test should be made with two different .mlcp-Projects
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IApplication.SetLogLevel(bosch.de.abt.beg.microLC.API.LogLevel)">
            <summary>
            Setting the LogLevel of the Console output 
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IApplication.SetLogLevel_v2(System.Int32)">
            <summary>
            Setting the LogLevel of the Console output 
            </summary>
            <param name="level">
            0 = Off, 1 = Fatal, 2 = Error, 3 = Warn, 4 = Info, 5 = Debug, 6 = All
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IApplication.CheckExistingMicroLCManagerInstance">
            <summary>
            Wrapper for checkExistingInstance()
            Checks if there is already an instance of the API running.
            </summary>
            <returns></returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Application">
            <summary>
            
            ONLY NECESSARY FOR USE WITH COM - NOT RECOMMENDED TO USE WITH .NET-API
            USE STATIC METHODS OF MICROLCMANAGER INSTEAD
            
            This class is used as a wrapper for all static Functions in the API, 
            because the COM-Interface doesn't allow static methods
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Application.#ctor">
            <summary>
            Creates Instance of Application
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Application.Manager">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Application.InitializeManager(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Application.InitializeManager(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Application.InitializeManager_2(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Application.InitializeManager(System.Boolean,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Application.InitializeManager_3(System.Boolean,System.String)">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Application.IsInitialized">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Application.ResetManager">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Application.ExitManager">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Application.SetLogLevel(bosch.de.abt.beg.microLC.API.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Application.SetLogLevel_v2(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Application.CheckExistingMicroLCManagerInstance">
            <inheritdoc/>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IComEventAdapter">
            <summary>
            
            ONLY NECESSARY FOR USE WITH COM - NOT RECOMMENDED TO USE WITH .NET-API
            USE PUBLIC EVENTS IN THE DIFFERENT CLASSES INSTEAD
            
            This interface defines the functions the COM-client should implement, 
            that he can react on the events thown by this application 
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RelayChanged(bosch.de.abt.beg.microLC.API.Relay,System.Boolean)">
            <summary>
            This method is called when a relay has changed its value with active automation mode.
            </summary>
            <param name="sender">Relay which has changed</param>
            <param name="relayState">The new state of the relay</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ADCValueRefreshed(bosch.de.abt.beg.microLC.API.ADC,System.Double)">
            <summary>
            This method is called when an ADC has measured new values. 
            </summary>
            <param name="sender">ADC-component which has measured new values</param>
            <param name="value">the current measured value of an ADC</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.DeviceStateChanged(bosch.de.abt.beg.microLC.API.Device,bosch.de.abt.beg.microLC.API.DEVICE_STATE)">
            <summary>
            This method is called when the device state has been changed 
            </summary>
            <param name="sender">Device whose State was changed</param>
            <param name="state">The new state of the device</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.DeviceStateChanged_v2(bosch.de.abt.beg.microLC.API.Device,System.Int32)">
            <summary>
            This method is called when the device state has been changed 
            </summary>
            <param name="sender">Device whose State was changed</param>
            <param name="state">The new state of the device
            0 = READY, 1 = BUSY, 2 = DISCONNECTED, 3 = RECONNECTED, 4 = Error</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.CANMessageReceived(bosch.de.abt.beg.microLC.API.CAN.Channel,bosch.de.abt.beg.microLC.API.CAN.RxFrame)">
            <summary>
            This method is called when a CAN Message has been received
            </summary>
            <param name="sender">Channel that received a message.</param>
            <param name="frame">The CANRxFrame that was received.</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SoftwareUpdateAvailable(System.String,System.String)">
            <summary>
            This method is called when a new Softwareversion is available.
            </summary>
            <param name="actualVersion">currently installed version</param>
            <param name="newVersion">version to be installed</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.FirmwareUpdateAvailable(System.String)">
            <summary>
            This method is called when a new Firmwareversion is available.
            </summary>
            <param name="msg">Message containing all Devices that have to update their firmware</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.CANActiveChanged(bosch.de.abt.beg.microLC.API.CAN.Channel,System.Boolean)">
            <summary>
            This method is called when the ActiveState of a CanChannel was changed.
            </summary>
            <param name="sender">Channel whose state was changed.</param>
            <param name="state">Activation state</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ComplexPWMInitialStateChanged(bosch.de.abt.beg.microLC.API.PWMorSent,System.Boolean)">
            <summary>
            This method is called when a ComplexPWM changed it's state to or from initial.
            </summary>
            <param name="sender">PWM/Sent where the state was changed.</param>
            <param name="initial">true if state is initial, false if it's not initial anymore.</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ComplexPWMPolarityInverted(bosch.de.abt.beg.microLC.API.PWMorSent,System.Boolean)">
            <summary>
            This method is called when a ComplexPWM has his Polarity inverted.
            </summary>
            <param name="sender">PWM/Sent where the state was changed.</param>
            <param name="inverted">true if polarity is inverted</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ComplexPWMSubsigCountChanged(bosch.de.abt.beg.microLC.API.PWMorSent,System.UInt32)">
            <summary>
            This method is called when a ComplexPWM changed it's Subsignalcount.
            </summary>
            <param name="sender">PWM/Sent where the subsignalcount was changed</param>
            <param name="count">new Subsignalcount</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ComplexPWMSubsigCountChanged_v2(bosch.de.abt.beg.microLC.API.PWMorSent,System.Int32)">
            <summary>
            This method is called when a ComplexPWM changed it's Subsignalcount.
            </summary>
            <param name="sender">PWM/Sent where the subsignalcount was changed</param>
            <param name="count">new Subsignalcount</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ComplexPWMSubsigFreqChanged(bosch.de.abt.beg.microLC.API.PWMorSent,bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal,System.Double)">
            <summary>
            This method is called when a ComplexPWM Subsignal changes it's frequency
            </summary>
            <param name="pwm">PWM/Sent where the Subsignal is part of</param>
            <param name="sender">Subsignal where the change happened</param>
            <param name="freq">new Frequency</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ComplexPWMSubsigDutyChanged(bosch.de.abt.beg.microLC.API.PWMorSent,bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal,System.Double)">
            <summary>
            This method is called when a ComplexPWM Subsignal changes it's dutycycle
            </summary>
            <param name="pwm">PWM/Sent where the Subsignal is part of</param>
            <param name="sender">Subsignal where the change happened</param>
            <param name="duty">new Dutycycle</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ComplexPWMSubsigOrderChanged(bosch.de.abt.beg.microLC.API.PWMorSent,bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal,System.UInt32)">
            <summary>
            This method is called when a ComplexPWM Subsignal changes it's order
            </summary>
            <param name="pwm">PWM/Sent where the Subsignal is part of</param>
            <param name="sender">Subsignal where the change happened</param>
            <param name="order">new Order</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ComplexPWMSubsigOrderChanged_v2(bosch.de.abt.beg.microLC.API.PWMorSent,bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal,System.Int32)">
            <summary>
            This method is called when a ComplexPWM Subsignal changes it's order
            </summary>
            <param name="pwm">PWM/Sent where the Subsignal is part of</param>
            <param name="sender">Subsignal where the change happened</param>
            <param name="order">new Order</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ComplexPWMSubsigPulseCountChanged(bosch.de.abt.beg.microLC.API.PWMorSent,bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal,System.UInt32)">
            <summary>
            This method is called when a ComplexPWM Subsignal changes it's pulsecount
            </summary>
            <param name="pwm">PWM/Sent where the Subsignal is part of</param>
            <param name="sender">Subsignal where the change happened</param>
            <param name="pulse">new Pulsecount</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ComplexPWMSubsigPulseCountChanged_v2(bosch.de.abt.beg.microLC.API.PWMorSent,bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal,System.Int32)">
            <summary>
            This method is called when a ComplexPWM Subsignal changes it's pulsecount
            </summary>
            <param name="pwm">PWM/Sent where the Subsignal is part of</param>
            <param name="sender">Subsignal where the change happened</param>
            <param name="pulse">new Pulsecount</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ComplexPWMSubsigActiveChanged(bosch.de.abt.beg.microLC.API.PWMorSent,bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal,System.Boolean)">
            <summary>
            This method is called when a ComplexPWM Subsignal changes it's activestate
            </summary>
            <param name="pwm">PWM/Sent where the Subsignal is part of</param>
            <param name="sender">Subsignal where the change happened</param>
            <param name="active">bool that says whether the Subsignal is active or not</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SentFastChannelEnabledChanged(bosch.de.abt.beg.microLC.API.PWMorSent,System.Boolean)">
            <summary>
            This method is called when the FastChannel of a Sentmodule is enabled
            </summary>
            <param name="sender">PWM/Sent where the change happended</param>
            <param name="enabled">bool that says whether the FastChannel is enabled or disabled</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SentSensorTypeChanged(bosch.de.abt.beg.microLC.API.PWMorSent,bosch.de.abt.beg.microLC.API.SentSensorType)">
            <summary>
            This method is called when the SensorType of Sent was changed
            </summary>
            <param name="sender">PWM/Sent where the change happended</param>
            <param name="type">new SentSensorType</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SentSensorTypeChanged_v2(bosch.de.abt.beg.microLC.API.PWMorSent,System.Int32)">
            <summary>
            This method is called when the SensorType of Sent was changed
            </summary>
            <param name="sender">PWM/Sent where the change happended</param>
            <param name="type">new SentSensorType
            Throttle_Position = 0, Mass_Air_Flow_Typ_1 = 1, Mass_Air_Flow_Typ_2 = 2, Mass_Air_Flow_Typ_3 = 3, Single_Secure = 4, 
            Single_Sensors_Typ_1 = 5, Single_Sensors_Typ_2 = 6, Pressure = 7, Pressure_Secure = 8, Pedal_Position = 9
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SentIncrementChanged(bosch.de.abt.beg.microLC.API.PWMorSent,System.Int32,System.Decimal)">
            <summary>
            This method is called when the Increment on a Sentchannel was changed.
            </summary>
            <param name="sender">PWM/Sent where the change happend</param>
            <param name="channel">number of channel where the change happened</param>
            <param name="increment">new Increment</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SentIncrementChanged_v2(bosch.de.abt.beg.microLC.API.PWMorSent,System.Int32,System.Double)">
            <summary>
            This method is called when the Increment on a Sentchannel was changed.
            </summary>
            <param name="sender">PWM/Sent where the change happend</param>
            <param name="channel">number of channel where the change happened</param>
            <param name="increment">new Increment</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SentValueChanged_v2(bosch.de.abt.beg.microLC.API.PWMorSent,System.Int32,System.Int16)">
            <summary>
            This method is called when the Increment on a Sentchannel was changed.
            </summary>
            <param name="sender">PWM/Sent where the change happend</param>
            <param name="channel">number of channel where the change happened</param>
            <param name="value">new Value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SentValueChanged(bosch.de.abt.beg.microLC.API.PWMorSent,System.Int32,System.UInt16)">
            <summary>
            This method is called when the Increment on a Sentchannel was changed.
            </summary>
            <param name="sender">PWM/Sent where the change happend</param>
            <param name="channel">number of channel where the change happened</param>
            <param name="value">new Value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SentTickLengthChanged_v2(bosch.de.abt.beg.microLC.API.PWMorSent,System.Int16)">
            <summary>
            This method is called when the Ticklength of Sent was changed
            </summary>
            <param name="sender">PWM/Sent where the change happended</param>
            <param name="ticklength">new TickLength</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SentTickLengthChanged(bosch.de.abt.beg.microLC.API.PWMorSent,System.UInt16)">
            <summary>
            This method is called when the Ticklength of Sent was changed
            </summary>
            <param name="sender">PWM/Sent where the change happended</param>
            <param name="ticklength">new TickLength</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SentTicksOfMessageChanged_v2(bosch.de.abt.beg.microLC.API.PWMorSent,System.Int16)">
            <summary>
            This method is called when the Ticks of Message of Sent was changed
            </summary>
            <param name="sender">PWM/Sent where the change happended</param>
            <param name="ticks">new Ticks of Message</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SentTicksOfMessageChanged(bosch.de.abt.beg.microLC.API.PWMorSent,System.UInt16)">
            <summary>
            This method is called when the Ticks of Message of Sent was changed
            </summary>
            <param name="sender">PWM/Sent where the change happended</param>
            <param name="ticks">new Ticks of Message</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SimplePWMFreqChanged(bosch.de.abt.beg.microLC.API.PWMorSent,System.Double)">
            <summary>
            This method is called when the Frequency of SimplePWM was changed
            </summary>
            <param name="sender">PWM/Sent where the change happended</param>
            <param name="freq">new Frequency</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SimplePWMDutyCycleChanged(bosch.de.abt.beg.microLC.API.PWMorSent,System.Double)">
            <summary>
            This method is called when the Dutycycle of SimplePWM was changed
            </summary>
            <param name="sender">PWM/Sent where the change happended</param>
            <param name="duty">new Dutycycle</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.DACEnableStateChanged(bosch.de.abt.beg.microLC.API.DAC,System.Boolean)">
            <summary>
            This method is called when the EnabledState of a DAC has changed.
            </summary>
            <param name="sender">DAC where the change happened</param>
            <param name="state">new State</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.DACValueChanged(bosch.de.abt.beg.microLC.API.DAC,System.Double)">
            <summary>
            This method is called when the Value of a DAC has changed.
            </summary>
            <param name="sender">DAC where the change happened</param>
            <param name="value">new Value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.DOUTChanged(bosch.de.abt.beg.microLC.API.DOUT,bosch.de.abt.beg.microLC.API.DOUT_VALUE)">
            <summary>
            This method is called when the Value of a DOUT has changed
            </summary>
            <param name="sender">DOUT where the change has happened</param>
            <param name="value">new Value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.DOUTChanged_v2(bosch.de.abt.beg.microLC.API.DOUT,System.Int32)">
            <summary>
            This method is called when the Value of a DOUT has changed
            </summary>
            <param name="sender">DOUT where the change has happened</param>
            <param name="value">new Value
            0 = DISABLED, 1 = ENABLED, 2 = TRISTATE
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.DOUTVStateChanged(bosch.de.abt.beg.microLC.API.DOUT,System.String)">
            <summary>
            This method is called when the Value of a DOUT voltage state has changed
            </summary>
            <param name="sender">DOUT where the change has happened</param>
            <param name="value">new Value for voltage state </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.PWMorSentOutputLevelChanged(bosch.de.abt.beg.microLC.API.PWMorSent,BoschEngineering.MicroLC.Util.Domain.PWM.VoltageOutputLevel)">
            <summary>
            This method is called when the Outputlevel of a PWMorSent has changed
            </summary>
            <param name="sender">PWMorSent where the change has happened</param>
            <param name="value">new Outputlevel</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.PWMorSentModeChanged(bosch.de.abt.beg.microLC.API.PWMorSent,bosch.de.abt.beg.microLC.API.PWMorSentMode)">
            <summary>
            This method is called when the PWMorSentMode of a PWMorSent has changed
            </summary>
            <param name="sender">PWMorSent where the change has happened</param>
            <param name="value">new PWMorSentMode</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RPMBackwardsChanged(bosch.de.abt.beg.microLC.API.RPM,System.Boolean)">
            <summary>
            This method is called when RPM Backwards is changed
            </summary>
            <param name="sender">RPM where the change happened</param>
            <param name="backwards">bool that tells whether the RPM is backwards</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RPMCamAdjustmentChanged(bosch.de.abt.beg.microLC.API.RPM)">
            <summary>
            This method is called when RPM CamAdjustment is changed
            </summary>
            <param name="sender">RPM where the change happened</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RPMCamAssignmentChanged(bosch.de.abt.beg.microLC.API.RPM)">
            <summary>
            This method is called when RPM CamAssignment is changed
            </summary>
            <param name="sender">RPM where the change happened</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RPMCamAssignmentFailed(bosch.de.abt.beg.microLC.API.RPM)">
            <summary>
            This method is called when RPM CamAssignment has failed
            </summary>
            <param name="sender">RPM where the change happened</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RPMDisabledShaft(bosch.de.abt.beg.microLC.API.RPM,System.String,System.Byte)">
            <summary>
            This method is called when a Shaft is disabled
            </summary>
            <param name="sender">RPM where the shaft was disabled</param>
            <param name="kindOfShaft">kind of shaft which was disabled</param>
            <param name="shaft">number od shaft which was disabled</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RPMEngineSpeedChanged(bosch.de.abt.beg.microLC.API.RPM,System.Int32)">
            <summary>
            This method is called when the RPMEnginespeed was changed
            </summary>
            <param name="sender">RPM where the enginespeed was changed</param>
            <param name="enginespeed">new Enginespeed</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RPMSpeedLimitChanged(bosch.de.abt.beg.microLC.API.RPM)">
            <summary>
            This method is called when the RPMSpeedLimit was changed.
            </summary>
            <param name="sender">RPM where the speedlimit was changed</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RPMSensorTypeChanged(bosch.de.abt.beg.microLC.API.RPM,bosch.de.abt.beg.microLC.API.CrankshaftSensorType)">
            <summary>
            This method is called when the RPMSensortype is changed.
            </summary>
            <param name="sender">RPM where the sensortype was changed</param>
            <param name="value">new SensorType</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RPMSensorTypeChanged_v2(bosch.de.abt.beg.microLC.API.RPM,System.Int32)">
            <summary>
            This method is called when the RPMSensortype is changed.
            </summary>
            <param name="sender">RPM where the sensortype was changed</param>
            <param name="value">new SensorType
            0 = Hall, 1 = Induktic, 2 = DG23i, 4 = TL4953
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ShaftSignalDataChanged(bosch.de.abt.beg.microLC.API.Shaft)">
            <summary>
            This method is called when the ShaftSignalData was changed.
            </summary>
            <param name="sender">Shaft where the signaldata were changed</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.MappingEvent(bosch.de.abt.beg.microLC.API.MappingResult,System.String)">
            <summary>
            This method is called when the projectfile had to be mapped to the actually connected devices.
            </summary>
            <param name="result">Tells the success of the mapping</param>
            <param name="mapping">string that contains which device was mapped to which other device.</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.MappingEvent_v2(System.Int32,System.String)">
            <summary>
            This method is called when the projectfile had to be mapped to the actually connected devices.
            </summary>
            <param name="result">Tells the success of the mapping
            0 = MappingFailed, 1 = MappingPartSuccess, 2 = MappingSuccess
            </param>
            <param name="mapping">string that contains which device was mapped to which other device.</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.InitExitAPIEvent(System.Boolean)">
            <summary>
            This method is called whenever the API is initialized or exited.
            </summary>
            <param name="initialized">tells whether the API is initialized</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.PWM_INResistorStateChanged(bosch.de.abt.beg.microLC.API.PWM_IN,bosch.de.abt.beg.microLC.API.PWM_INResistorState)">
            <summary>
             This method is called, when the resistorstate of a PWM_IN has changed
            </summary>
            <param name="sender">PWM_IN where the resistorstate has changed</param>
            <param name="state">new resistorstate</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.PWM_INResistorStateChanged_v2(bosch.de.abt.beg.microLC.API.PWM_IN,System.Int32)">
            <summary>
             This method is called, when the resistorstate of a PWM_IN has changed
            </summary>
            <param name="sender">PWM_IN where the resistorstate has changed</param>
            <param name="state">new resistorstate
            0 = PULLUP, 1 = PULLDOWN, 2 = DISABLED, 3 = TIMEOUT, 4 = UNDEFINED
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.PWM_INStateChanged(bosch.de.abt.beg.microLC.API.PWM_IN,System.Boolean)">
            <summary>
            This method is called when the State of the PWM_IN has changed
            </summary>
            <param name="sender">pwm_in that changed it's state</param>
            <param name="active">bool that shows whether the pwm_in is now active or not</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.PWM_INFrequencyChanged(bosch.de.abt.beg.microLC.API.PWM_IN,System.Double)">
            <summary>
            This method is called when the Frequency that is received by a PWM_IN has changed.
            </summary>
            <param name="sender">pwm_in that has received the new frequency</param>
            <param name="freq">new frequeny</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.PWM_INDutyCycleChanged(bosch.de.abt.beg.microLC.API.PWM_IN,System.Double)">
            <summary>
            This method is called when the DutyCycle that is received by a PWM_IN has changed.
            </summary>
            <param name="sender">pwm_in that has received the new dutycycle</param>
            <param name="duty">new dutycycle</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.Msg_TypeChangedEvent(bosch.de.abt.beg.microLC.API.PWMorSent,bosch.de.abt.beg.microLC.API.MSG_TYPE)">
            <summary>
            This method is called when the Msg_Type of the SlowChannelSent has changed.
            </summary>
            <param name="sender">pwmorsent where the msg-type has changed</param>
            <param name="value">new msg-type</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.Msg_TypeChangedEvent_v2(bosch.de.abt.beg.microLC.API.PWMorSent,System.Int32)">
            <summary>
            This method is called when the Msg_Type of the SlowChannelSent has changed.
            </summary>
            <param name="sender">pwmorsent where the msg-type has changed</param>
            <param name="value">new msg-type
            1 = SHORT_8BIT, 2 = ENHANCED_12BIT, 3 = ENHANCED_16BIT, 4 = UNDEFINED
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SlowChannelIncrementChangedEvent_v2(bosch.de.abt.beg.microLC.API.PWMorSent,System.Double)">
            <summary>
            This method is called when the Increment of the SlowChannelSent has changed.
            </summary>
            <param name="sender">pwmorsent where the change happened</param>
            <param name="value">new increment</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SlowChannelIncrementChangedEvent(bosch.de.abt.beg.microLC.API.PWMorSent,System.Decimal)">
            <summary>
            This method is called when the Increment of the SlowChannelSent has changed.
            </summary>
            <param name="sender">pwmorsent where the change happened</param>
            <param name="value">new increment</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.Msg_IDChangedEvent(bosch.de.abt.beg.microLC.API.PWMorSent,System.Int16)">
            <summary>
            This method is called when the Msg_ID of the SlowChannelSent has changed.
            8bit und 16bit: 0 = Air Temp; 1=Humidity; 2 =Barometric Pressure
            12bit -> 0-255 match the respective hexadecimal ids
            </summary>
            <param name="sender">pwmorsent where the change happend</param>
            <param name="value">new msg-id</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SlowChannelValueChangedEvent(bosch.de.abt.beg.microLC.API.PWMorSent,System.Int16)">
            <summary>
            This method is called when the value of the SlowChannelSent has changed.
            </summary>
            <param name="sender">pwmorsent where the change happend</param>
            <param name="value">new value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SlowChannelValueChangedEvent(bosch.de.abt.beg.microLC.API.PWMorSent,System.UInt16)">
            <summary>
            This method is called when the value of the SlowChannelSent has changed.
            </summary>
            <param name="sender">pwmorsent where the change happend</param>
            <param name="value">new value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SlowChannelEnabledChangedEvent_v2(bosch.de.abt.beg.microLC.API.PWMorSent,System.Boolean)">
            <summary>
            This method is called when the SlowChannelSent is enabled or disabled.
            </summary>
            <param name="sender">pwmorsent where the change happend</param>
            <param name="value">enabled/disabled</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.CylinderEnabledChanged(bosch.de.abt.beg.microLC.API.CylinderPressure,System.Boolean)">
            <summary>
            This method is called when the CylinderPressureSimulation is enabled or disabled
            </summary>
            <param name="sender">cylinderpressure object that was activated/deactivated </param>
            <param name="value">enabled/disabled</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.CylinderPatternChanged(bosch.de.abt.beg.microLC.API.CylinderPressure,bosch.de.abt.beg.microLC.API.CYLINDERPRESSURE_GRAPH)">
            <summary>
            This method is called when the Pattern of the Graph for the simulation is changed.
            </summary>
            <param name="sender">cylinderpressure object where the change happened</param>
            <param name="value">new pattern</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.CylinderPatternChanged_v2(bosch.de.abt.beg.microLC.API.CylinderPressure,System.Int32)">
            <summary>
            This method is called when the Pattern of the Graph for the simulation is changed.
            </summary>
            <param name="sender">cylinderpressure object where the change happened</param>
            <param name="value">new pattern
            0 = COMBUSTION, 1 = OVERUN, 2 = COMBUSTION_FAIL, 3 = OVERRUN_FAIL, 4 = USERDEFINED
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.CylinderNumberChanged(bosch.de.abt.beg.microLC.API.CylinderPressure,System.Int32)">
            <summary>
            This method is called when the Pattern of the number of Cylinders for the simulation is changed.
            </summary>
            <param name="sender">cylinderpressure object where the change happened</param>
            <param name="value">new number of cylinders</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.CylinderAdjustmentChanged(bosch.de.abt.beg.microLC.API.Cylinder,System.Double)">
            <summary>
            This method is called when the Adjustment of a specific Cylinder has changed.
            </summary>
            <param name="sender">cylinder object where the change happened</param>
            <param name="value">adjustment</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.SignalSimulationChanged(bosch.de.abt.beg.microLC.API.CylinderPressure,System.String)">
            <summary>
            This method is called when the SignalSimulation of a specific Cylinder has changed.
            </summary>
            <param name="sender">cylinder object where the change happened</param>
            <param name="sequenceString">for each cylinder (0 to 7) value of sensorSignal (0 to 15), index: [value0, value1, ...]</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ADCGainReceived(bosch.de.abt.beg.microLC.API.ADC,System.Double)">
            <summary>
            This method is called when the gain voltage of a specific ADC has changed. 
            </summary>
            <param name="sender">adc object where the change happened</param>
            <param name="value">gain voltage</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ThrottleSimValueReceived(bosch.de.abt.beg.microLC.API.ThrottleValve,System.Double)">
            <summary>
            This method is called when a value (angle of the throttle valve) has been received from hardware.
            </summary>
            <param name="sender">throttle sim object where the change happened</param>
            <param name="value">current angle of simulated throttle valve</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ThrottleSimSamplingStopped(bosch.de.abt.beg.microLC.API.ThrottleValve)">
            <summary>
            This method is called when the throttle valve sampling stopped because the throttle simulation has stopped.
            </summary>
            <param name="sender">throttle sim object where the change happened</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ThrottleSimStateChanged(bosch.de.abt.beg.microLC.API.ThrottleValve,System.Boolean)">
            <summary>
            This method is called when the simulation state of the throttle valve changed.
            </summary>
            <param name="sender">throttle sim object where the change happened</param>
            <param name="value">new simulation state</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ThrottleValveSamplingChanged(bosch.de.abt.beg.microLC.API.ThrottleValve,System.Boolean)">
            <summary>
            This method is called when the sampling state of the throttle valve changed.
            </summary>
            <param name="sender">throttle sim object where the change happened</param>
            <param name="value">new sampling state</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ThrottleValveTypeChanged(bosch.de.abt.beg.microLC.API.ThrottleValve,System.Int32)">
            <summary>
            This method is called when the throttle valve type changed.
            </summary>
            <param name="sender">throttle sim object where the change happened</param>
            <param name="value">new throttle valve type (0 = custom, 1 = DVE5, 2 = Siemens DK)</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ThrottleValveTypeChangedToCustom(bosch.de.abt.beg.microLC.API.ThrottleValve)">
            <summary>
            This method is called when the throttle valve type changed to custom.
            </summary>
            <param name="sender">throttle sim object where the change happened</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.EnabledChanged(bosch.de.abt.beg.microLC.API.PWMorSent,System.Boolean)">
            <summary>
            This method is called when the pwm or sent state is changed.
            </summary>
            <param name="sender">throttle sim object where the change happened</param>
            <param name="value">New state of PWM or SENT</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.InjectionCaptureEnabledChanged(bosch.de.abt.beg.microLC.API.InjectionCapture,System.Boolean)">
            <summary>
            This method is called when the injection capture state changed.
            </summary>
            <param name="sender">Injection capture object where the state changed</param>
            <param name="injectCapState">New state of the injection capture</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.InjectionCaptureValueChangedEvent(bosch.de.abt.beg.microLC.API.InjectionCapture,System.UInt32)">
            <summary>
            This method is called when the injection capture value changed
            </summary>
            <param name="sender">Injection capture object where the state changed</param>
            <param name="value">New value of the injection capture</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.InjectionCaptureValueChangedEvent_v2(bosch.de.abt.beg.microLC.API.InjectionCapture,System.Int32)">
            <summary>
            This method is called when the injection capture value changed
            </summary>
            <param name="sender">Injection capture object where the state changed</param>
            <param name="value">New value of the injection capture</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ResolverStateChanged(bosch.de.abt.beg.microLC.API.Resolver,BoschEngineering.MicroLC.Device.Contract.Domain.Resolver.State)">
            <summary>
            This method is called when the resolver enabled state changed
            </summary>
            <param name="sender"></param>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.ResolverStateChanged_v2(bosch.de.abt.beg.microLC.API.Resolver,System.Int32)">
            <summary>
            This method is called when the resolver enabled state changed
            </summary>
            <param name="sender"></param>
            <param name="value">0 = DISABLED, 1 = ENABLED</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RCardEnableStateChanged(bosch.de.abt.beg.microLC.API.RCard,System.Boolean)">
            <summary>
            This method is called when the RCard enable state changed.
            </summary>
            <param name="sender"></param>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RCardValueChanged(bosch.de.abt.beg.microLC.API.RCard,System.Decimal)">
            <summary>
            This method is called when the RCard value change
            </summary>
            <param name="sender"></param>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComEventAdapter.RCardValueChanged_v2(bosch.de.abt.beg.microLC.API.RCard,System.Double)">
            <summary>
            This method is called when the RCard value change
            </summary>
            <param name="sender"></param>
            <param name="value"></param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ICamshaft">
            <summary>
            Default interface for Camshaft, specifies functions visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICamshaft.Adjustment">
            <summary>
            Property to adjust the Camshaft in relation to the crankshaft in °
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICamshaft.Name">
            <summary>
            Returns the Name of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICamshaft.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICamshaft.Enabled">
            <summary>
            Enables the Camshaft.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICamshaft.Voltage">
            <summary>
            Property to adjust the voltage of the camshaft.
            0 = 5V; 1 = 12V
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICamshaft.SetVoltage(System.Int32,System.Double)">
            <summary>
            Property to set the voltage and voltage mode (symmetrical, asymmetrical) of the camshaft .
            </summary>
            <param value ="mode">Voltage mode: 0 for assymetrical mode, 1 for symmetrical mode</param>
            µLC Test System >= 3.2B: Example: SetVoltage(1, 8.4)
            <param value ="value">Camshaft voltage</param>
            Example for µLC Test System 3.0, 3.1, 3.2A Sample: SetVoltage(0, 5) or SetVoltage(1, 12)
            Example for µLC Test System >= 3.2B: SetVoltage(0, 5) or SetVoltage(1, 8.4)
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICamshaft.GetVoltageValue">
            <summary>
            Return the voltage
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICamshaft.GetVoltageMode">
            <summary>
            Return the voltage mode
            </summary>        
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Camshaft">
            <summary>
            Camshaft Signal it inherits Shaft and adds the Property Adjustment
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Camshaft.CamshaftValueHandler`1">
            <summary>
            This Handler can be applied to the Camshaft and is called whenever a value of the Camshaft has changed. 
            </summary>
            <typeparam name="T">the Type of the value</typeparam>
            <param name="sender">a reference to the Camshaft where the value is changed</param>
            <param name="value">the new value</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Camshaft.CamshaftAssignmentHandler">
            <summary>
            This Handler is called whenever the Assignment of the Camshaft is changed
            </summary>
            <param name="sender">the Camshaft where the Assignment is changed</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Camshaft.AdjustmentChanged">
            <summary>
            Event is raised when the Adjustment of this Camshaft is changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Camshaft.AssignmentChanged">
            <summary>
            Event is raised when the Assignment of this Camshaft is changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Camshaft.AssignmentFailed">
            <summary>
            Event is raised when the request to change the Camshaft Assignment fails
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Camshaft.AssignmentReset">
            <summary>
            Event is raised when the Assignment of this Camshaft is set to itself
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Camshaft.Adjustment">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Camshaft.Name">
            <summary>
            Returns the Name of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Camshaft.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Camshaft.Enabled">
            <summary>
            Enable or Deactivate the Shaft signal of the MicroLC
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Camshaft.Voltage">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Camshaft.SetVoltage(System.Int32,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Camshaft.GetVoltageValue">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Camshaft.GetVoltageMode">
            <inheritdoc /> 
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Camshaft.GetCamshaftVoltage(System.Int32)">
            <summary>
            Return the voltage based on the mode
            mode = 0 returns 5V, mode = 1 returns 12V, else return 5 V
            </summary>  
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Camshaft.ValidateCamshaftMode(System.Int32)">
            <summary>
            Checks if passed integer value corresponds to any of the mode        
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.FilterType">
            <summary>
            The possible Filter Types for Data, or Remote Frames
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CANFD.FilterType.ACCEPTANCE_FILTER">
            <summary>
            Acceptance filter
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CANFD.FilterType.BLOCKING_FILTER">
            <summary>
            Blocking filter
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.ICANFDChannel">
            <summary>
            Default interface of Channel class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICANFDChannel.Name">
            <summary>
            The Property Name represents the Label of the Hardware Channel and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICANFDChannel.HardwareId">
            <summary>
            returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICANFDChannel.Active">
            <summary>
            The Property Active shows if the Channel is Enabled. If it is not enabled no MessageReceived Event is thrown.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.ICANFDChannel.GenerateTxFrame">
            <summary>
            Creates a CANTxFrame with the next index.
            </summary>
            <returns>The generated TxFrame</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.ICANFDChannel.GenerateRxFrame">
            <summary>
            Creates a CANRxFrame with the next index.
            </summary>
            <returns>The generated RxFrame</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICANFDChannel.GenerateFrames">
            <summary>
            Property for Generating new Frames, the given value sets the count of Frames to be created.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.ICANFDChannel.GetTxFrameAt(System.Int32)">
            <summary>
            Method to get TxFrames via COM
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICANFDChannel.TxFrameCount">
            <summary>
            Property to get the count of existing CANTxFrames in this CANFDChannel
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel">
            <summary>
            This class represents a CANFDChannel. 
            With the functions and Propertys in this class the user is able to send Messages over the CAN.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.MessageReceivedHandler">
            <summary>
            A delegate of this type can be added to the Channel and will be called, when a new Message is received
            </summary>
            <param name="value"> Received Frame </param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.MessageReceivedHandlerTx">
            <summary>
            A delegate of this type can be added to the Channel and will be called, when a new Message is received
            </summary>
            <param name="value"> Received Frame </param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.ActiveChangedHandler">
            <summary>
            A delegate of this type can be added to the Channel and will be called, when the activeState of the channel has changed.
            </summary>
            <param name="active">shows whether the Channel is active or not</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.MessageReceived">
            <summary>
            This event is fired, when the Channel has received a new message
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.MessageReceivedTx">
            <summary>
            This event is fired, when the Channel has received a new message
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.ActiveChanged">
            <summary>
            This event is fired, when the ActiveState of the Channel has changed
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.Active">
            <summary>
            Indicates whether the Channel is active or not (whether it is receiving/sending Messages or not)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.ResistorState">
            <summary>
            Indicates whether the Channels resistor is active or not
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.ShowConfiguredTxFrames">
            <summary>
            Method to get all already existent CANTxFrames 
            e.g. if a Project-File was read in
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.ShowConfiguredRxFrames">
            <summary>
            Method to get all already existent CANRxFrames 
            e.g. if a Project-File was read in
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.GetTxFrameWithIndex(System.Int32)">
            <summary>
            Function to get TxFrame in Collection. Is used to snychronize data between api list and logic collection
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.GetRxFrameWithIndex(System.Int32)">
            <summary>
            Function to get RxFrame in Collection. Is used to snychronize data between api list and logic collection
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.FramesTx">
            <summary>
            Access to the TxFrames via the generic interface
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.FramesRx">
            <summary>
            Access to the RxFrames via the generic interface
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.GenerateTxFrame">
            <summary>
            Creates a CANTxFrame with the next index.
            </summary>
            <returns>The generated TxFrame</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.GenerateRxFrame">
            <summary>
            Creates a CANRxFrame with the next index.
            </summary>
            <returns>The generated TxFrame</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.ChangeFrame(bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame)">
            <summary>
            Sets the changed values of a CANTxFrame.
            </summary>
            <param name="Frame">the changed TxFrame</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.RemoveFrame(bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame)">
            <summary>
            Deletes a CANTxFrame from the Channel.
            </summary>
            <param name="Frame">The TxFrame to delete</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.SetupMessage(System.Int32)">
            <summary>
            Sets up a TxFrame 
            </summary>
            <param name="frameIndex">index of the Frame to Transmit</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.TransmitMessageExactlyOnce(System.Int32)">
            <summary>
            Transmit a CAN TxFrame onces
            </summary>
            <param name="frameIndex">index of the Frame to Transmit</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.StopTransmitMessageFrequently(System.Int32)">
            <summary>
            Stops transmitting a TxFrame Frequently
            </summary>
            <param name="frameIndex">Index of the Frame that should not be transmitted anymore</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.GenerateFrames">
            <summary>
            Property for Generating new Frames, the given value sets the count of Frames to be created.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.DeleteFrame">
            <summary>
            Property to remove a TxFrame from the channel.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.ApplyChangesToFrame">
            <summary>
            Property to apply the changes that are made to a TxFrame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.Name">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.HardwareId">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.GetTxFrameAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.GetRxFrameAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.TxFrameCount">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.SetBaudrate(System.Int32,System.Int32)">
            <summary>
            Set the baudrate to desired value
            </summary>
            <param name="baudRate">Arbitration rate in kBaud</param>
            <param name="dataRate">Data rate in kBaud</param>
            <returns>True if success</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.ResetFilters">
            <summary>
            Resets filters of CAN-FD Channel 
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.SetFilter(System.UInt32,System.UInt32,bosch.de.abt.beg.microLC.API.CANFD.FilterType,bosch.de.abt.beg.microLC.API.CANFD.IDFormat,System.Int32)">
            <summary>
            Sets a filter to a CAN-FD Channel
            </summary>
            <param name="FirstID"></param>
            <param name="SecondID"></param>
            <param name="Filtertype"></param>
            <param name="IDType"></param>
            <param name="Index"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDChannel.RemoveFilter(System.UInt32,System.UInt32,bosch.de.abt.beg.microLC.API.CANFD.FilterType,bosch.de.abt.beg.microLC.API.CANFD.IDFormat,System.Int32)">
            <summary>
            Sets a filter to a CAN-FD Channel
            </summary>
            <param name="FirstID"></param>
            <param name="SecondID"></param>
            <param name="Filtertype"></param>
            <param name="IDType"></param>
            <param name="Index"></param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.IDFormat">
            <summary>
            The possible Identifier Types for Data, or Remote Frames
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CANFD.IDFormat.STANDARD_ID">
            <summary>
            Standard Identifier.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CANFD.IDFormat.EXTENDED_ID">
            <summary>
            Extended Identifier
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.Index">
            <summary>
            Time at which the Frame was received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.Time">
            <summary>
            Time at which the Frame was received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.TypeAsString">
            <summary>
            The Type of the received Frame as String
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.Identifier">
            <summary>
            The Identifier of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.IdFormat">
            <summary>
            The IdFormat of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.DataLength">
            <summary>
            The Datalength of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.Data">
            <summary>
            Payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.BitRateSwitching">
            <summary>
            Bitrateswitching of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.FDFrame">
            <summary>
            FDFrame of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.ErrorStateIndicator">
            <summary>
            ESI Bit of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.RemoteTransmissionRequest">
            <summary>
            RTR Bit of the received Frame
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.ICanFDFrame.GetDataAtPosition(System.Int32)">
            <summary>
            Function to get byte of payload at specified position
            </summary>
            <param name="position"></param> postition in payload where data should be read
            <returns></returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame">
            <summary>
            Base class for Tx and Rx Frames
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.dlcValues">
            <summary>
            Array to format dlc to payload length
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.Index">
            <summary>
            Index the Frame has under all the Frames of a channel.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.Identifier">
            <summary>
            The Identifier of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.Time">
            <summary>
            Time at which the Frame was received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.TypeAsString">
            <summary>
            The Type of the received Frame as String
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.Data">
            <summary>
            Payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.BitRateSwitching">
            <summary>
            The MyBitRateSwitching of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.FDFrame">
            <summary>
            The MyFDFrame of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.ErrorStateIndicator">
            <summary>
            The MyErrorStateIndicator of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.RemoteTransmissionRequest">
            <summary>
            The MyRemoteTransmissionRequest of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.IdFormat">
            <summary>
            The IdFormat of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.DataLength">
            <summary>
            The Datalength of the payload of the received Frame
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDFrame.GetDataAtPosition(System.Int32)">
            <summary>
            The method can be called if only one byte of the frame's payload shall be get
            </summary>
            <param name="position"></param> location of payload byte
            <returns></returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.ICANFDRxFrame">
            <summary>
            Default interface of RxFrame class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICANFDRxFrame.TimeDiffToPredecessor">
            <summary>
            The Time difference to the last event that was raised
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.CanFDRxFrame">
            <summary>
            Represents a CANRxFrame that was received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDRxFrame.TimeDiffToPredecessor">
            <summary>
            The Time difference to the last event that was raised
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.ICANFDTxFrame">
            <summary>
            Default interface of TxFrame class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICANFDTxFrame.Cycletime">
            <summary>
            The Cycle Time of this Message in Miliseconds.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICANFDTxFrame.Enabled">
            <summary>
            bool which indicates if this Frame is currently send frequently
            through setting it true or false, the TransmitMessageFrequently Method of Channel is called
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICANFDTxFrame.Delete">
            <summary>
            bool which indicates if this Frame should be Deleted
            default is false, if it is set to true the frame will be deleted
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICANFDTxFrame.Change">
            <summary>
            bool which indicates if the made Changes should be applied to the Frame
            default is false, if it is set to true the changes will be applied once
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.ICANFDTxFrame.ApplyChangesImmediately">
            <summary>
            If this Property is set to true, there is no need to call Change after a change,
            because all changes are applied to the frame in the moment they are made.
            If this Property is set to false, you have to call Change to make a change operative on the µLC
            
            This Property is standard set to true and has to be changed if needed otherwise
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.ICANFDTxFrame.SetDataAtPosition(System.Int32,System.Byte)">
            <summary>
            The method can be called if only one byte of the frame's payload shall be set
            </summary>
            <param name="position"></param> position of payload byte
            <param name="value"></param> value to set payload byte
            <returns></returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame">
            <summary>
            This class represents a Message of CAN which is sent. 
            With the functions and Propertys in this class the user is able to set the bytes and the Identifier of the Message. 
            Also they're able to send a Message frequently.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.Identifier">
            <summary>
            The Identifier of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.BitRateSwitching">
            <summary>
            The MyBitRateSwitching of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.FDFrame">
            <summary>
            The MyFDFrame of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.ErrorStateIndicator">
            <summary>
            The MyErrorStateIndicator of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.RemoteTransmissionRequest">
            <summary>
            The MyRemoteTransmissionRequest of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.Cycletime">
            <summary>
            The Cycle Time of this Message in Miliseconds.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.IdFormat">
            <summary>
            The Format of this Frames identifier (Standard or Extended)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.DataLength">
            <summary>
            Gives the Payloadlength. Has to be set before the actual Payload is set.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.Data">
            <summary>
            Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.Enabled">
            <summary>
            bool which indicates if this Frame is currently send frequently
            through setting it true or false, the TransmitMessageFrequently Method of Channel is called
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.ApplyChangesImmediately">
            <summary>
            If this Property is set to true, there is no need to call Change after a change,
            because all changes are applied to the frame in the moment they are made.
            If this Property is set to false, you have to call Change to make a change operative on the µLC
            
            This Property is standard set to true and has to be changed if needed otherwise
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.Change">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.Delete">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CANFD.CanFDTxFrame.SetDataAtPosition(System.Int32,System.Byte)">
            <summary>
            The method can be called if only one byte of the frame's payload shall be set
            </summary>
            <param name="position"></param> location of payload byte
            <param name="value"></param> value to set payload byte
            <returns></returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CurrentLoopSensorType">
            <summary>
            CurrentLoopSensor types
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CurrentLoopSensorType.TS">
            <summary>
            CurrentLoopSensorType TS
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CurrentLoopSensorType.PWM_s">
            <summary>
            CurrentLoopSensorType PWM_s
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CurrentLoopSensorType.PWM_i">
            <summary>
            CurrentLoopSensorType PWM_i
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CurrentLoopSensorType.AK">
            <summary>
            CurrentLoopSensorType AK
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CurrentLoopSensorType.TLE4953">
            <summary>
            CurrentLoopSensorType TLE4953
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ICurrentLoop">
            <summary>
            Default interface of CurrentLoop class, specifies which methods are visible for COM.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoop.Enabled">
            <summary>
            The property Enabled represents the state of the CurrentLoop and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoop.ActiveSensorTypeIndex">
            <summary>
            The property ActiveSensorTypeIndex can get and set the active sensor.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoop.ActiveSensorType">
            <summary>
            The property ActiveSensorType can get and set the active sensor.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICurrentLoop.CurrentLevel(System.Int32)">
            <summary>
            Get the CurrentLevel of the index.
            </summary>
            <param name="index">minimum is 0, maximum is 3</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICurrentLoop.CurrentLevel(System.Int32,System.Int32)">
            <summary>
            Set the CurrentLevel of the index.
            </summary>
            <param name="index">minimum is 0, maximum is 3</param>
            <param name="value">minimum is 0, maximum is 40</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICurrentLoop.CurrentLevel_2(System.Int32,System.Int32)">
            <summary>
            FOR COM! Use CurrentLevel(int index, int value) otherwise
            Set the CurrentLevel of the index.
            </summary>
            <param name="index">minimum is 0, maximum is 3</param>
            <param name="value">minimum is 0, maximum is 40</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoop.getCurrentLoopSensorPWMS">
            <summary>
            Get the CurentLoopSensor PWM_s.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoop.getCurrentLoopSensorPWMI">
            <summary>
            Get the CurentLoopSensor PWM_i.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoop.getCurrentLoopSensorAK">
            <summary>
            Get the CurentLoopSensor AK.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoop.getCurrentLoopSensorTS">
            <summary>
            Get the CurentLoopSensor TS.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoop.getCurrentLoopSensorTLE4953">
            <summary>
            Get the CurentLoopSensor TLE4953.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoop.HardwareId">
            <summary>
            Returns the HardwareID of this component.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoop.Name">
            <summary>
            The property Name represents the label of the hardware Currentloop and can be changed.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CurrentLoop">
            <summary>
            This class represents a CurrentLoop
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoop.Name">
            <summary>
            The property Name represents the label of the hardware Currentloop and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoop.HardwareId">
            <summary>
            Returns the HardwareID of this component.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoop.Enabled">
            <summary>
            The property Enabled represents the state of the CurrentLoop and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoop.ActiveSensorTypeIndex">
            <summary>
            The property ActiveSensorType can get and set the active Sensor.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoop.ActiveSensorType">
            <summary>
            The property ActiveSensorType can get and set the active Sensor.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CurrentLoop.CurrentLevel(System.Int32)">
            <summary>
            Get the CurrentLevel of the index.
            </summary>
            <param name="index">minimum is 0, maximum is 3</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CurrentLoop.CurrentLevel(System.Int32,System.Int32)">
            <summary>
            Set the CurrentLevel of the Index.
            </summary>
            <param name="index">minimum is 0, maximum is 3</param>
            <param name="value">minimum is 0, maximum is 40</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CurrentLoop.CurrentLevel_2(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoop.getCurrentLoopSensorPWMS">
            <summary>
            Get the CurentLoopSensor PWM_s.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoop.getCurrentLoopSensorPWMI">
            <summary>
            Get the CurentLoopSensor PWM_i.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoop.getCurrentLoopSensorAK">
            <summary>
            Get the CurentLoopSensor AK.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoop.getCurrentLoopSensorTS">
            <summary>
            Get the CurentLoopSensor TS.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoop.getCurrentLoopSensorTLE4953">
            <summary>
            Get the CurentLoopSensor TLE4953.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK">
            <summary>
            Default interface for the CurrentLoopSensor AK component, specifies which methods are visible for COM.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.RotationSpeed">
            <summary>
            The property RotationSpeed can set and get the rotation speed. 
            Default maximum is 2500
            Default minimum is -2500
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.RotationSpeedMin">
            <summary>
            Property to get the current minimum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.RotationSpeedMax">
            <summary>
            Property to get the current maximum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.TeethNumber">
            <summary>
            The property TeethNumber can set and get the number of teeth.
            Affects the rotaion speed boundaries
            Maximum is 60
            Minimum is 20
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.TeethNumberMin">
            <summary>
            Property to get the current minimum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.TeethNumberMax">
            <summary>
            Property to get the current maximum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.SignalLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.IdleLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.SpeedPulseLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.StandstillPeriod">
            <summary>
            Maximum is 500000
            Minimum is 100000
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.StandstillPeriodMin">
            <summary>
            The property can get the minimum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.StandstillPeriodMax">
            <summary>
            The property can get the maximum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.TPDuration">
            <summary>
            Maximum is 100
            Minimum is 25
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.TPDurationMin">
            <summary>
            The property can get the minimum TP duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.TPDurationMax">
            <summary>
            The property can get the maximum TP duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.BitLR">
            <summary>
            The property enables or disables the BitLR.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.BitLM0">
            <summary>
            The property enables or disables the BitLM0.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.BitLM1">
            <summary>
            The property enables or disables the BitLM1.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.BitLM2">
            <summary>
            The property enables or disables the BitLM2.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorAK.BitParity">
            <summary>
            The property can switch between even and odd parity.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK">
            <summary>
            This class represents a CurrentLoopSensor AK. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.RotationSpeed">
            <summary>
            The property RotationSpeed can set and get the rotation speed. 
            Default maximum is 2500
            Default minimum is -2500
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.RotationSpeedMin">
            <summary>
            Property to get the current minimum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.RotationSpeedMax">
            <summary>
            Property to get the current maximum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.TeethNumber">
            <summary>
            The property TeethNumber can set and get the number of teeth.
            Affects the rotaion speed boundaries
            Maximum is 60
            Minimum is 20
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.TeethNumberMin">
            <summary>
            Property to get the current minimum teeth number
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.TeethNumberMax">
            <summary>
            Property to get the current maximum teeth number
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.SignalLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.IdleLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.SpeedPulseLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.StandstillPeriod">
            <summary>
            Maximum is 500000
            Minimum is 100000
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.StandstillPeriodMin">
            <summary>
            The property can get the minimum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.StandstillPeriodMax">
            <summary>
            The property can get the maximum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.TPDuration">
            <summary>
            Maximum is 100
            Minimum is 25
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.TPDurationMin">
            <summary>
            The property can get the minimum TP duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.TPDurationMax">
            <summary>
            The property can get the maximum TP duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.BitLR">
            <summary>
            The property enables or disables the BitLR.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.BitLM0">
            <summary>
            The property enables or disables the BitLM0.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.BitLM1">
            <summary>
            The property enables or disables the BitLM1.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.BitLM2">
            <summary>
            The property enables or disables the BitLM2.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorAK.BitParity">
            <summary>
            The property can switch between even and odd parity.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI">
            <summary>
            Default Interface for the CurrentLoopSensor PWM_i component, specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.RotationSpeed">
            <summary>
            The property RotationSpeed can set and get the rotation speed. 
            Default maximum is 2500
            Default minimum is -2500
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.RotationSpeedMin">
            <summary>
            Property to get the current minimum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.RotationSpeedMax">
            <summary>
            Property to get the current maximum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.TeethNumber">
            <summary>
            The property TeethNumber can set and get the number of teeth.
            Affects the rotaion speed boundaries
            Maximum is 60
            Minimum is 20
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.TeethNumberMin">
            <summary>
            Property to get the current minimum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.TeethNumberMax">
            <summary>
            Property to get the current maximum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.SignalLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.IdleLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationPrebit">
            <summary>
            Default is 45  
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationLR">
            <summary>
            Maximum is 55
            Minimum is 35
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_L">
            <summary>
            Maximum is 100
            Minimum is 80
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_R">
            <summary>
            Maximum is 190
            Minimum is 170
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_L_EL">
            <summary>
            Maximum is 370
            Minimum is 350
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_R_EL">
            <summary>
            Maximum is 730
            Minimum is 710
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationStandstill">
            <summary>
            Maximum is 1450
            Minimum is 1430
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.PeriodStandstill">
            <summary>
            Maximum is 750.000
            Minimum is 720.000
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.ShowLR">
            <summary>
            Enable or Disable LR
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.ShowEL">
            <summary>
            Enable or Disable EL
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.PeriodStandstillMin">
            <summary>
            The property can get the minimum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.PeriodStandstillMax">
            <summary>
            The property can get the maximum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationStandstillMin">
            <summary>
            The property can get the minimum standstill duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationStandstillMax">
            <summary>
            The property can get the maximum standstill duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_R_ELMin">
            <summary>
            The property can get the minimum DR_R_EL duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_R_ELMax">
            <summary>
            The property can get the maximum DR_R_EL duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_L_ELMin">
            <summary>
            The property can get the minimum DR_EL duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_L_ELMax">
            <summary>
            The property can get the maximum DR_L_EL duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_RMin">
            <summary>
            The property can get the minimum DR_R duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_RMax">
            <summary>
            The property can get the maximum DR_R duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_LMin">
            <summary>
            The property can get the minimum DR_L duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationDR_LMax">
            <summary>
            The property can get the maximum DR_L duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationLRMin">
            <summary>
            The property can get the minimum LR duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMI.DurationLRMax">
            <summary>
            The property can get the maximum LR duration.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI">
            <summary>
            This class represents a CurrentLoopSensor PWM_i. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.RotationSpeed">
            <summary>
            The property RotationSpeed can set and get the rotation speed. 
            Default maximum is 2500
            Default minimum is -2500
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.RotationSpeedMin">
            <summary>
            Property to get the current minimum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.RotationSpeedMax">
            <summary>
            Property to get the current maximum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.TeethNumber">
            <summary>
            The property TeethNumber can set and get the number of teeth.
            Affects the rotaion speed boundaries
            Maximum is 60
            Minimum is 20
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.TeethNumberMin">
            <summary>
            Property to get the current minimum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.TeethNumberMax">
            <summary>
            Property to get the current maximum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.SignalLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.IdleLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationPrebit">
            <summary>
            Default is 45  
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationLR">
            <summary>
            Maximum is 55
            Minimum is 35
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationLRMin">
            <summary>
            The property can get the minimum LR duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationLRMax">
            <summary>
            The property can get the maximum LR duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_L">
            <summary>
            Maximum is 100
            Minimum is 80
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_LMin">
            <summary>
            The property can get the minimum DR_L duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_LMax">
            <summary>
            The property can get the maximum DR_L duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_R">
            <summary>
            Maximum is 190
            Minimum is 170
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_RMin">
            <summary>
            The property can get the minimum DR_R duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_RMax">
            <summary>
            The property can get the maximum DR_R duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_L_EL">
            <summary>
            Maximum is 370
            Minimum is 350
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_L_ELMin">
            <summary>
            The property can get the minimum DR_EL duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_L_ELMax">
            <summary>
            The property can get the maximum DR_L_EL duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_R_EL">
            <summary>
            Maximum is 730
            Minimum is 710
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_R_ELMin">
            <summary>
            The property can get the minimum DR_R_EL duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationDR_R_ELMax">
            <summary>
            The property can get the maximum DR_R_EL duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationStandstill">
            <summary>
            Maximum is 1450
            Minimum is 1430
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationStandstillMin">
            <summary>
            The property can get the minimum standstill duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.DurationStandstillMax">
            <summary>
            The property can get the maximum standstill duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.PeriodStandstill">
            <summary>
            Maximum is 750.000
            Minimum is 720.000
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.PeriodStandstillMin">
            <summary>
            The property can get the minimum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.PeriodStandstillMax">
            <summary>
            The property can get the maximum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.ShowLR">
            <summary>
            Enable or Disable LR.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMI.ShowEL">
            <summary>
            Enable or Disable EL.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMS">
            <summary>
            Default interface for the CurrentLoopSensor PWM_s component, specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMS.RotationSpeed">
            <summary>
            The property RotationSpeed can set and get the rotation speed. 
            Maximum is 5000
            Minimum is -5000
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMS.RotationSpeedMin">
            <summary>
            Property to get the current minimum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMS.RotationSpeedMax">
            <summary>
            Property to get the current maximum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMS.TeethNumber">
            <summary>
            The property TeethNumber can set and get the number of teeth.
            Maximum is 60
            Minimum is 20
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMS.TeethNumberMin">
            <summary>
            Property to get the current minimum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMS.TeethNumberMax">
            <summary>
            Property to get the current maximum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMS.SignalLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorPWMS.IdleLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMS">
            <summary>
            This class represents a CurrentLoopSensorPWMS. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMS.RotationSpeed">
            <summary>
            The property RotationSpeed can set and get the rotation speed. 
            Maximum is 5000
            Minimum is -5000
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMS.RotationSpeedMin">
            <summary>
            Property to get the current minimum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMS.RotationSpeedMax">
            <summary>
            Property to get the current maximum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMS.TeethNumber">
            <summary>
            The property TeethNumber can set and get the number of teeth.
            Maximum is 60
            Minimum is 20
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMS.TeethNumberMin">
            <summary>
            Property to get the current minimum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMS.TeethNumberMax">
            <summary>
            Property to get the current maximum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMS.SignalLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorPWMS.IdleLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953">
            <summary>
            Default Interface for the CurrentLoopSensor TLE4953 component, specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.RotationSpeed">
            <summary>
            The property RotationSpeed can set and get the rotation speed. 
            Default maximum is 5000
            Default minimum is -5000
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.RotationSpeedMin">
            <summary>
            Property to get the current minimum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.RotationSpeedMax">
            <summary>
            Property to get the current maximum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.TeethNumber">
            <summary>
            The property TeethNumber can set and get the number of teeth.
            Affects the rotaion speed boundaries
            Maximum is 60
            Minimum is 2
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.TeethNumberMin">
            <summary>
            Property to get the current minimum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.TeethNumberMax">
            <summary>
            Property to get the current maximum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.SignalLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.IdleLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.PeriodRotationLeft">
            <summary>
            The property can set and get PeriodRotationLeft value.
            Maximum is 255
            Minimum is 1
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.PeriodRotationRight">
            <summary>
            The property can set and get PeriodRotationRight value.
            Maximum is 255
            Minimum is 1
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.SpeedSignal">
            <summary>
            The property can set and get SpeedSignal value.
            Maximum is 255
            Minimum is 1
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.TPreLow">
            <summary>
            The property can set and get TPreLow value.
            Maximum is 255
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.InvertSignal">
            <summary>
            The property can invert the current level values.
            Maximum is 255
            Minimum is 0 
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTLE4953.SendSpeedPulse">
            <summary>
             Triggers the start pulse(speed pulse) of the sensor
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.RotationSpeed">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.RotationSpeedMin">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.RotationSpeedMax">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.TeethNumber">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.TeethNumberMin">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.TeethNumberMax">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.SignalLevelIndex">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.IdleLevelIndex">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.PeriodRotationLeft">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.PeriodRotationRight">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.SpeedSignal">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.TPreLow">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.InvertSignal">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTLE4953.SendSpeedPulse">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS">
            <summary>
            Default interface for the CurrentLoopSensor TS component, specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.RotationSpeed">
            <summary>
            The property RotationSpeed can set and get the rotation speed. 
            Default maximum is 12000
            Default minimum is -3000
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.RotationSpeedMin">
            <summary>
            Property to get the current minimum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.RotationSpeedMax">
            <summary>
            Property to get the current maximum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.TeethNumber">
            <summary>
            The property TeethNumber can set and get the number of teeth.
            Affects the rotaion speed boundaries.
            Maximum is 60
            Minimum is 20
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.SignalLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.IdleLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.PrebitDuration">
            <summary>
            Maximum is 45
            Minimum is 35
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.PrebitDurationMin">
            <summary>
            Property to get the current minimum prebit duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.PrebitDurationMax">
            <summary>
            Property to get the current maximum prebit duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.SignalDurationForward">
            <summary>
            Maximum is 55
            Minimum is 35
             </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.SignalDurationForwardMin">
            <summary>
            Property to get the current minimum signal duration forward.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.SignalDurationForwardMax">
            <summary>
            Property to get the current maximum signal duration forward.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.SignalDurationBackward">
            <summary>
            Maximum is 100
            Minimum is 80
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.SignalDurationBackwardMin">
            <summary>
            Property to get the current minimum signal duration backward.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.SignalDurationBackwardMax">
            <summary>
            Property to get the current maximum signal duration backward.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.StandstillDuration">
            <summary>
            Maximum is 1540
            Minimum is 1340
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.StandstillDurationMin">
            <summary>
            Property to get the current minimum standstill duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.StandstillDurationMax">
            <summary>
            Property to get the current maximum standstill duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.StandstillPeriod">
            <summary>
            Maximum is 1000000
            Minimum is 100000
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.StandstillPeriodMin">
            <summary>
            Property to get the current minimum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.StandstillPeriodMax">
            <summary>
            Property to get the current maximum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.GapSize">
            <summary>
            Maximum is 10
            Minimum is 0
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.GapSizeMin">
            <summary>
            Property to get the current minimum gapsize.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.GapSizeMax">
            <summary>
            Property to get the current maximum gapsize.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.EnableStandstill">
            <summary>
            The property can enable and disable the stillstand.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.EnablePrebit">
            <summary>
            The property can enable and disable the prebit.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.TeethNumberMin">
            <summary>
            Property to get the current minimum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICurrentLoopSensorTS.TeethNumberMax">
            <summary>
            Property to get the current maximum teeth number.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS">
            <summary>
            This class represents a CurrentLoopSensor TS. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.RotationSpeed">
            <summary>
             The Property RotationSpeed can set and get the rotation speed. 
             Maximum is 12000
             Minimum is -3000
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.RotationSpeedMin">
            <summary>
            Property to get the current minimum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.RotationSpeedMax">
            <summary>
            Property to get the current maximum rotation speed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.TeethNumber">
            <summary>
            The property TeethNumber can set and get the number of teeth.
            Affects the rotaion speed boundaries.
            Maximum is 60
            Minimum is 20
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.TeethNumberMin">
            <summary>
            Property to get the current minimum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.TeethNumberMax">
            <summary>
            Property to get the current maximum teeth number.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.SignalLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.IdleLevelIndex">
            <summary>
            Reference one of the four CurrentLoop.CurrentLevel.
            Maximum is 3
            Minimum is 0 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.PrebitDuration">
            <summary>
            Maximum is 45
            Minimum is 35
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.PrebitDurationMin">
            <summary>
            Property to get the current minimum prebit duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.PrebitDurationMax">
            <summary>
            Property to get the current maximum prebit duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.SignalDurationForward">
            <summary>
            Maximum is 55
            Minimum is 35
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.SignalDurationForwardMin">
            <summary>
            Property to get the current minimum signal duration forward.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.SignalDurationForwardMax">
            <summary>
            Property to get the current maximum signal duration forward.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.SignalDurationBackward">
            <summary>
            Maximum is 100
            Minimum is 80
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.SignalDurationBackwardMin">
            <summary>
            Property to get the current minimum signal duration backward.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.SignalDurationBackwardMax">
            <summary>
            Property to get the current maximum signal duration backward.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.StandstillDuration">
            <summary>
            Maximum is 1540
            Minimum is 1340
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.StandstillDurationMin">
            <summary>
            Property to get the current minimum standstill duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.StandstillDurationMax">
            <summary>
            Property to get the current maximum standstill duration.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.StandstillPeriod">
            <summary>
            Maximum is 1000000
            Minimum is 100000
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.StandstillPeriodMin">
            <summary>
            Property to get the current minimum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.StandstillPeriodMax">
            <summary>
            Property to get the current maximum standstill period.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.GapSize">
            <summary>
            Maximum is 10
            Minimum is 0
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.GapSizeMin">
            <summary>
            Property to get the current minimum gapsize.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.GapSizeMax">
            <summary>
            Property to get the current maximum gapsize.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.EnableStandstill">
            <summary>
            The property can enable and disable the stillstand.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CurrentLoopSensorTS.EnablePrebit">
            <summary>
            The property can enable and disable the prebit.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DataLoaderComponent_IF.ToolChainPath">
            <summary>
            Sets or gets the current location of the Atmel Toolchain
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DataLoaderComponent_IF.CompileCode(System.String,System.String,System.String@)">
            <summary>
            Function compiles cpp file which the user has provided
            </summary>
            <param name="CFilePath">Path of the given cpp file</param>
            <param name="FileName">Name of the given cpp file</param>
            <param name="errorCode">errorCode of Compiler</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DataLoader.ToolChainPath">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DataLoader.CompileCode(System.String,System.String,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IFlexIO">
            <summary>
            Default interface of FlexIO class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IFlexIO.MapComponent(System.Int32,System.Int32)">
            <summary>
            Maps the available microLC Component to FlexIO pin, 
            If the pin has already a microLC component, it gets replaced
            </summary>
            <param name="pin"> FlexIO pin to which passed microLC component should be mapped</param>
            <param name="mode"> Represents the microLC component type, select the index from ComponentMode</param>
            <return> channel index of the uLC component mapped to the pin, this index
            shall be used to get API object of the uLC component and perform further operations 
            returns '-1' if the component is not mapped to any pin</return>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IFlexIO.RemoveComponent(System.Int32)">
            <summary>
            Removes already assigned uLC component from the pin
            </summary>
            <param name="pin"> FlexIO pin from which already assigned uLC component should be removed</param>        
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IFlexIO.GetMappedComponentType(System.Int32)">
            <summary>
            Returns the MicroLC component type mapped to the pin
             returns null if the component is not mapped to any pin
            </summary>
            <param name="pin"> FlexIO pin whose mapped component type is needed</param> 
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IFlexIO.GetMappedComponentChannelIndex(System.Int32)">
            <summary>
            Returns the MicroLC component channel index mapped to the pin
             returns '-1' if the component is not mapped to any pin
            </summary>
            <param name="pin"> FlexIO pin whose MicroLC component channel index is needed</param> 
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ComponentMode">
            <summary>    
            Enum holds MicroLC component type supported by FlexIO
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.FlexIO">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.FlexIO.MapComponent(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.FlexIO.RemoveComponent(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.FlexIO.GetMappedComponentType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.FlexIO.GetMappedComponentChannelIndex(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IManipChannel">
            <summary>
            Default interface of Manipulation class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipChannel.IsChannelActive">
            <summary>
            Indicator, whether channel is activated or not.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipChannel.PWMLevel">
            <summary>
            Represents PWM Output Level.<br />
            1 = 5V<br />
            2 = 12V
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipChannel.ChannelID">
            <summary>
            The ID of the channel.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipChannel.Sensor">
            <summary>
            The current sensor of the channel. This is only used if the channel is type SENT. <br />
            H1_Dual_12bit = 0<br />
            H2_Single_12bit = 1<br />
            H3_12bit_HighSpeed = 12<br />
            H4_Secure_12bit = 2<br />
            H5_12bit_Zero = 4<br />
            H6_14bit_10bit = 5<br />
            H7_16bit_8bit = 6
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipChannel.Input">
            <summary>
            Represents the configured input of the signal.<br />
            PWM AND SENT:<br />
            PWM_IN_1 = 0, PWM_IN_2 = 1<br /><br />
            Analog:<br />
            ADC0 = 0, ADC1 = 1 ...  ADC5 = 5<br />
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipChannel.Output">
            <summary>
            Represents the configured output of the signal.<br />
            PWM AND SENT:<br />
            PWM_SENT_1 = 0, PWM_SENT_2 = 1, PWM_SENT_3 = 2, PWM_SENT_4 = 3<br /><br />
            
            Analog: <br />
            DAC0 = 0, DAC1 = 1 ...  DAC11 = 11.<br />
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipChannel.Type">
            <summary>
            Represents the type of the channel.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipChannel.DataItems">
            <summary>
            List of all manipulation items of a channel.<br />
            SENT:<br />
            Item on Pos 0 = Manipulation value 1<br />
            Item on Pos 1 = Manipulation value 2,<br /><br />
            PWM:<br />
            Item on Pos 0 = Manipulation frequency<br />
            Item on Pos 1 = duty cycle<br /><br />
            Analog:<br />
            Item on Pos 0 = Manipulation amplitude
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ManipChannelType">
            <summary>
            Specified Type of the Channel.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ManipChannel">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipChannel.IsChannelActive">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipChannel.PWMLevel">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipChannel.ChannelID">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipChannel.Sensor">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipChannel.Input">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipChannel.Output">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipChannel.Type">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipChannel.DataItems">
            <inheritdoc/>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IManipDataItem">
            <summary>
            Default interface of Manipulation class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipDataItem.Position">
            <summary>
            Position of the manipulation.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipDataItem.ParentType">
            <summary>
            Type of the channel for which this data item belongs to.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipDataItem.ValueManipulationActive">
            <summary>
            Represents the current state of the manipulation.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipDataItem.Factor">
            <summary>
            Configured factor of the manipulation.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipDataItem.Offset">
            <summary>
            Configured offset of the manipulation.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ManipulationDataItem">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipulationDataItem.Position">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipulationDataItem.ParentType">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipulationDataItem.ValueManipulationActive">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipulationDataItem.Factor">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ManipulationDataItem.Offset">
            <inheritdoc/>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IManipulation">
            <summary>
            Default interface of Manipulation class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipulation.ManipSENTChannels">
            <summary>
            List of all manipulation channels of type SENT.  <br />
            ManipSENTChannels[0] = Channel with input SENT_IN1 <br />
            ManipSENTChannels[1] = Channel with input SENT_IN2 <br />
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipulation.ManipPWMChannels">
            <summary>
            List of all manipulation channels of type PWM. <br />
            ManipPWMChannels[0] = Channel with input PWM_IN1 <br />
            ManipPWMChannels[1] = Channel with input PWM_IN2 <br />
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IManipulation.ManipAnalogChannels">
            <summary>
            List of all manipulation channels of type Analog. <br />
            ManipAnalogChannels[0] = Channel with input ADC0 <br />
            ManipAnalogChannels[1] = Channel with input ADC1 <br />
            ... <br />
            ManipAnalogChannels[5] = Channel with input ADC5 <br />
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Manipulation">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Manipulation.ManipSENTChannels">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Manipulation.ManipPWMChannels">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Manipulation.ManipAnalogChannels">
            <inheritdoc/>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IRCard_IF">
            <summary>
            
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRCard_IF.OutputValue">
            <summary>
            The Property value represents the output value of the RCard.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRCard_IF.Value">
            <summary>
            The Property value represents the output value of the RCard.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRCard_IF.Enabled">
            <summary>
            The Property Enabled represents the status of the RCard
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRCard_IF.Name">
            <summary>
            The Property Name represents the Label of the Hardware DAC and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRCard_IF.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.RCard">
            <summary>
            This class represents a RCard. With the functions and Propertys in this class the user is able to use the RCard Hardware.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.RCard.RCardChanged`1">
            <summary>
            This Handler can be applied to the RCard and is called whenever a value of the RCard has changed. 
            </summary>
            <typeparam name="T">Type of the changed Value</typeparam>
            <param name="sender">source of the event</param>
            <param name="value">changed value</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.RCard.EnableStateChanged">
            <summary>
            Event is raised when the RCard is enabled or disabled
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.RCard.RCardOutputValueChanged">
            <summary>
            Event is raised when the value of the RCard has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.RCard.RCardValueChanged">
            <summary>
            Event is raised when the value of the RCard has changed.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RCard.EnableHandler(System.Boolean)">
            <summary>
            Function to throw the API event, if the RCard enable state change.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RCard.ValueChanged(System.Tuple{System.Decimal,System.Decimal})">
            <summary>
            Function to throw the API event, if the RCard value change.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RCard.OutputValue">
            <summary>
            The Property value represents the output value of the RCard.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RCard.Value">
            <summary>
            The Property value represents the output value of the RCard.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RCard.MinValue">
            <summary>
            Minimum possible physical Value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RCard.MaxValue">
            <summary>
            Maximum possible physical Value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RCard.Enabled">
            <summary>
            The Property Enabled represents the status of the RCard
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RCard.Name">
            <summary>
            The Property Name represents the Label of the Hardware DAC and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RCard.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IInjectionCapture">
            <summary>
            Default Interface of the injection capture component, specifies all methods which are visible over COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IInjectionCapture.Name">
            <summary>
            Returns the Name of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IInjectionCapture.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IInjectionCapture.InjectionTime">
            <summary>
            Returns the Value of this component, the injection Time in µs
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IInjectionCapture.Value">
            <summary>
             Returns the Value of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IInjectionCapture.Enabled">
            <summary>
             Returns the enabled state of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IInjectionCapture.LowPulseModeActive">
            <summary>
            Returns the current pulse mode status
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IInjectionCapture.AutoSamplingEnabled">
            <summary>
            Returns the state of the auto-sampling mode
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IInjectionCapture.CurrentMode">
            <summary>
            Retunrs the current auto-sampling mode. 0 = Deactivated, 1 = Low Pulse Mode, 2 = High Pulse Mode
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.InjectionCapture">
            <summary>
            This class represents a Injection Capture. With the functions and Propertys in this class the user is able to calibrate the Hardware Injection Capture.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.InjectionCapture.InjectionCaptureChangedEvent`1">
            <summary>
            A delegate of this type can be added to the InjectionCaptureChanged Event and will be called, 
            when the InjectionCapture state changes.
            </summary>
            <param name="sender"></param>
            <param name="injectionCaptureState"></param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.InjectionCapture.EnabledChanged">
            <summary>
            Event which is fired when the state of the InjectionCapture is changed to enabled/disabled
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.InjectionCapture.InjectionTimeChanged">
            <summary>
            Event which is fired when the value of the InjectionCapture changes
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.InjectionCapture.AutoSamplingEnabledChanged">
            <summary>
            Event which is fired when the value of AutoSamplingEnabled changes
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.InjectionCapture.AutoSendModeChanged">
            <summary>
            Event which is fired when the value of AutoSendMode changes. 0 = Deactivated, 1 = Low pulse mode. 2 = High pulse mode.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.InjectionCapture.LowPulseModeActiveChanged">
            <summary>
            Event which is fired when the value of LowPulseModeActive changes
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.InjectionCapture.ValueChanged">
            <summary>
            Event which is fired when the value of the InjectionCapture changes
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.InjectionCapture.EnableHandler(System.Boolean)">
            <summary>
            InjectionCapture EnableHandler
            <param name="enabled"></param>
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.InjectionCapture.ValueChangedHandler(System.UInt32)">
            <summary>
            InjectionCapture ValueChangedHandler
            <param name="value"></param>
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.InjectionCapture.AutoSamplingEnabledChangeHandler(System.Boolean)">
            <summary>
            InjectionCapture AutoSamplingEnabledChangeHandler
            <param name="value"></param>
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.InjectionCapture.LowPulseModeActiveChangeHandler(System.Boolean)">
            <summary>
            InjectionCapture LowPulseModeActiveChangeHandler
            <param name="value"></param>
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.InjectionCapture.AutoSendModeChangeHandler(BoschEngineering.MicroLC.Logic.Domain.InjectionCapture.Component.AutoSendMode)">
            <summary>
            InjectionCapture AutoSentModeChangeHandler
            <param name="value"></param>
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.InjectionCapture.Name">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.InjectionCapture.HardwareId">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.InjectionCapture.InjectionTime">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.InjectionCapture.Value">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.InjectionCapture.Enabled">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.InjectionCapture.LowPulseModeActive">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.InjectionCapture.AutoSamplingEnabled">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.InjectionCapture.CurrentMode">
            <inheritdoc/>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ICylinder">
            <summary>
            Default Interface of Cylinder class, specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICylinder.Phaseshift">
            <summary>
            Set/Get the Phaseshift of the current Cylinder.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICylinder.GetSignalPatternArrayLength">
            <summary>
            Get the ArrayLength of the Signalsimulation of the current Cylinder.
            </summary>
            <returns> Length of byte-Array</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICylinder.GetSignalPatternAt(System.Int32)">
            <summary>
            Get a pattern in the simulation-sequence at index indexSequence
            </summary>
            <param name="indexSequence">index of the specific pattern in the sequence</param>
            <returns>value of the pattern at position index</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICylinder.SignalSimulationPatternValue(System.Int32,System.Byte)">
            <summary>
            Set a pattern in the simulation-sequence at index indexSequence
            </summary>
            <param name="indexSequence">index of the specific pattern in the sequence</param>
            <param name="value">new value of the pattern at position indexSequence in the sequence</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICylinder.Index">
            <summary>
            Get the Index of the Cylinder
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICylinder.AssignCylinder(System.Int32)">
            <summary>
            Assigns this Cylinder to the cylinder with the given index.
            </summary>
            <param name="targetCylinder">The selected Cylinder, which this one will be asssigned to</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICylinder.GetAssignedCylinder">
            <summary>
            Returns the Index of the cylinder which this one is assigned to
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Cylinder">
            <summary>
            This class represents the discrete Cylinder
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Cylinder.CylinderAdjustmentChanged">
            <summary>
            Handler for when the Phaseshift is changed
            </summary>
            <param name="sender">Cylinder where the Phaseshift was changed</param>
            <param name="adjustment">new phaseshift</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Cylinder.CylinderAdjustmentChangedEvent">
            <summary>
            Raised when the Adjustment of a specific Cylinder changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Cylinder.Phaseshift">
            <summary>
            Set/Get the Phaseshift of the current Cylinder.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Cylinder.AssignCylinder(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Cylinder.GetAssignedCylinder">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Cylinder.GetSignalPatternArrayLength">
            <summary>
            Get the length of the SignalSimulation-array of the current Cylinder.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Cylinder.GetSignalPatternAt(System.Int32)">
            <summary>
            Get a pattern in the SignalSimulation-array of the current Cylinder.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Cylinder.SignalSimulationPatternValue(System.Int32,System.Byte)">
            <summary>
            Set a pattern in the SignalSimulation-array of the current Cylinder.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Cylinder.Index">
            <summary>
            Get the Index of the Cylinder
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CYLINDERPRESSURE_GRAPH">
            <summary>
            Pattern for the Graph
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CYLINDERPRESSURE_GRAPH.COMBUSTION">
            <summary>
            Pattern for the Graph -> Combustion
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CYLINDERPRESSURE_GRAPH.OVERRUN">
            <summary>
            Pattern for the Graph -> Overrun
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CYLINDERPRESSURE_GRAPH.COMBUSTION_FAIL">
            <summary>
            Pattern for the Graph -> Combustion with failure
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CYLINDERPRESSURE_GRAPH.OVERRUN_FAIL">
            <summary>
            Pattern for the Graph -> Overrun with failure
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CYLINDERPRESSURE_GRAPH.USERDEFINED">
            <summary>
            Pattern for the Graph -> Userdefined
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ICylinderPressure">
            <summary>
            Default Interface of CylinderPressure class, specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICylinderPressure.Name">
            <summary>
            The Property Name represents the Label of the CylinderPressure.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICylinderPressure.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICylinderPressure.CylinderCount">
            <summary>
            Property that sets/gets how many Cylinders there are in the Simulation
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICylinderPressure.GraphPattern">
            <summary>
            Sets/Gets the Pattern for the CylinderPressure Graph
            0 = COMBUSTION, 1 = OVERRUN, 2 = COMBUSTION_FAIL, 3 = OVERRUN_FAIL, 4 = USERDEFINED 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICylinderPressure.Graph">
            <summary>
            Sets/Gets the Pattern for the CylinderPressure Graph
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICylinderPressure.Enabled">
            <summary>
            Starts/Stops the Simulation
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ICylinderPressure.Cylinders">
            <summary>
            Represents the discrete Cylinders. Is needed to set the Phaseshift of the discrete Cylinder.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICylinderPressure.GetCylinderAt(System.Int32)">
            <summary>
            Access to the discrete Cylinder for the COM-IF
            </summary>
            <param name="index">index of the cylinder (starts with 0)</param>
            <returns>Cylinder-Object which contains the Phaseshift Property of the Cylinder</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICylinderPressure.PatternSignalGraphValues(System.Int32,System.Double[])">
            <summary>
            Sets the signal pattern values for a specified index
            </summary>
            <param index="0-5">The signal to which the values get assigned</param>
            <param values="{0,1,2,2,1,...}">Array with the length of 720 values which will describe te graph of the selected signal</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ICylinderPressure.GetPatternSignalGraphValues(System.Int32)">
            <summary>
            Gets the signal pattern values for a specified index
            </summary>
            <param index="0-5">The signal from which the pattern is read</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:bosch.de.abt.beg.microLC.API.ICylinderPressure.ImportPatternFromFile(System.String,System.Int32)" -->
        <member name="T:bosch.de.abt.beg.microLC.API.CylinderPressure">
            <summary>
             This class represents the CylinderPressureSimulation of the hardware.
            With the functions and Propertys in this class the user is able to calibrate a Hardware CylinderPressureSimulation.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CylinderPressure.CylinderChanged`1">
            <summary>
            Handler for changes in the CylinderPressureSimulation
            </summary>
            <typeparam name="T">type of the value that was changed</typeparam>
            <param name="sender">the Cylinder Component where the change was made</param>
            <param name="value">new value</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CylinderPressure.SignalSimulationChanged">
            <summary>
            Handler for a SignalSimulation change
            </summary>
            <param name="sender">Cylinder Component the SignalSimulation was changed</param>
            <param name="sequence">dictionary with new pattern for SignalSimulation</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CylinderPressure.SetSequenceNotAllowed">
            <summary>
            Handler for the information that a wrong value was set
            </summary>
            <param name="sender">Cylinder Component the SignalSimulation was changed</param>
            <param name="wrongValue">the wrong value that was set</param>
            <param name="cylIndex"></param>
            <param name="sequIndex"></param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.CylinderPressure.CylinderNumberChangedEvent">
            <summary>
            Raised when the Number of Cylinders for the Simulation is changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.CylinderPressure.CylinderGraphPatternChangedEvent">
            <summary>
            Raised when the Pattern for the Simulationgraph has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.CylinderPressure.CylinderGraphChangedEvent">
            <summary>
            Raised when the Pattern for the Simulationgraph has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.CylinderPressure.EnabledChangedEvent">
            <summary>
            Raised when the simulation gets enabled/disabled
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.CylinderPressure.SignalSimulationChangedEvent">
            <summary>
            Raised when the SignalSimulation of a specific Cylinder changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.CylinderPressure.SetSequenceNotAllowedEvent">
            <summary>
            Raised when a signal-value is set, that is not allowed.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CylinderPressure.PatternSignalGraphValues(System.Int32,System.Double[])">
            <summary>
            Set the values of a Cylinder Signal
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CylinderPressure.GetPatternSignalGraphValues(System.Int32)">
            <summary>
            Get the values of a Cylinder Signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CylinderPressure.CylinderCount">
            <summary>
            Property that sets/gets how many Cylinders there are in the Simulation
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CylinderPressure.GraphPattern">
            <summary>
            Sets/Gets the Pattern for the CylinderPressure Graph
            0 = Pattern 0 (Default: COMBUSTION), 1 = Pattern 1 (Default: OVERRUN), 2 = Pattern 2 (Default: COMBUSTION_FAIL), 
            3 = Pattern 3 (Default: OVERRUN_FAIL), 4 = User defined pattern one, 5 = User defined pattern two  
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CylinderPressure.Graph">
            <summary>
            Sets/Gets the Pattern for the CylinderPressure Graph
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CylinderPressure.Enabled">
            <summary>
            Starts/Stops the Simulation
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CylinderPressure.Cylinders">
            <summary>
            Represents the discrete Cylinders. Is needed to set the Phaseshift of the discrete Cylinder.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CylinderPressure.GetCylinderAt(System.Int32)">
            <summary>
            Access to the discrete Cylinder for the COM-IF
            </summary>
            <param name="index">index of the cylinder (starts with 0)</param>
            <returns>Cylinder-Object which contains the Phaseshift Property of the Cylinder</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CylinderPressure.SetPhaseshift">
            <summary>
            Send the current Phaseshifts to the logic. Should be called everytime after changing a Phaseshift.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CylinderPressure.Name">
            <summary>
            The Property Name represents the Label of the CylinderPressure.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CylinderPressure.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CylinderPressure.ImportPatternFromFile(System.String,System.Int32)">
            <summary>
            load custom values from csv-formatted <param name="filePath"/> to <param name="selectedPatternIndex"/>
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle">
            <summary>
            Dutycycle of a complex PWM Subsignal
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.GetTranslator">
            <summary>
            Returns the currently assigned Translator
            </summary>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.Value">
            <summary>
            Value of the Dutycycle of the complex PWM Subsignal or the correspondending physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.ElectricalValue">
            <summary>
            The coresspondending electrical value. Is equal with the Value, when no function is assigned. In %
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.Unit">
            <summary>
            Unit of the mapped physical value. 
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.AssignTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            Assigns a matching translator function to the Subsignal DutyCycle
            </summary>
            <param name="translatorFunction">translator function, which should be assigned</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.UnassignTranslatorFunction">
            <summary>
            Unassigns a Translatorfunction. Does nothing, when no function is assigned.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.GetTranslatorFunction">
            <summary>
            Returns the assigned translator function. Returns null if no Translatorfunction is assigned.
            </summary>
            <returns>assigned translator function</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.ErrormodeActive">
            <summary>
            When the Errormode is active the User is able to set Values less and greater than the minimum and maximum value.
            The electrical Value will set to a coresspondending value defined in the translator function or the minimum or maximum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.MinValue">
            <summary>
            Minimum possible Value of the Frequency or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.MaxValue">
            <summary>
            Maximum possible Value of the Frequency or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.TranslatorId">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.Name">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMDutyCycle.HardwareId">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency">
            <summary>
            Frequency of a complex PWM Subsignal
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.GetTranslator">
            <summary>
            Returns the currently assigned Translator
            </summary>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.Value">
            <summary>
            Value of the Frequency of the complex PWM Subsignal or the correspondending physical value.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.ElectricalValue">
            <summary>
            The coresspondending electrical value. Is equal with the Value, when no function is assigned. In Hz 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.Unit">
            <summary>
            Unit of the physical value
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.AssignTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            Assigns a matching translator function to the PWM Frequency
            </summary>
            <param name="translatorFunction">translator function, which should be assigned</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.UnassignTranslatorFunction">
            <summary>
            Unassigns a Translatorfunction. Does nothing, when no function is assigned.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.GetTranslatorFunction">
            <summary>
            Returns the assigned translator function. Returns null if no Translatorfunction is assigned.
            </summary>
            <returns>assigned translator function</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.ErrormodeActive">
            <summary>
            When the Errormode is active the User is able to set Values less and greater than the minimum and maximum value.
            The electrical Value will set to a coresspondending value defined in the translator function or the minimum or maximum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.MinValue">
            <summary>
            Minimum possible Value of the Frequency or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.MaxValue">
            <summary>
            Maximum possible Value of the Frequency or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.TranslatorId">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.Name">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMFrequency.HardwareId">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal">
            <summary>
            Default interface of ComplexPWMSubsignal class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.Continuous">
            <summary>
            Property to enable continuous operation of this subpulse.
            This means, that its pulsecount is infinite.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.SignalPulseCount">
            <summary>
            Property to get and set the pulsecount of the signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.PulseCount">
            <summary>
            Property to get and set the pulsecount of the signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.TriggerRequired">
            <summary>
            Property to get and set if a Trigger is Required
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.Trigger">
            <summary>
            Property to Enable Trigger or get if the Trigger is Enabled already.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.Active">
            <summary>
            Get or Set the active State of the subsignal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.Name">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.HardwareId">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.Frequency">
            <summary>
            Frequency of a complex PWM Subsignal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.Dutycycle">
            <summary>
            Dutycycle of a complex PWM Subsignal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.IncreaseOrder">
            <summary>
            Increase the Order of the Subsignal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.DecreaseOrder">
            <summary>
            Decrease the Order of the subsignal.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.SubsignalOrder">
            <summary>
            Property to read the Order of the subsignal.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWMSubsignal.Order">
            <summary>
            Property to read the Order of the subsignal.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal">
            <summary>
            Represents a subsignal of the complex pwm.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.FrequencyChanged">
            <summary>
            Event is raised when the Frequency of the Subsignal has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.DutycycleChanged">
            <summary>
            Event is raised when the Dutycycle of the Subsignal has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.SubsignalOrderChanged">
            <summary>
            Event is raised when the order of the Subsignal has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.OrderChanged">
            <summary>
            Event is raised when the order of the Subsignal has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.SubsignalPulseCountChanged">
            <summary>
            Event is raised when the PulseCount of the Subsignal has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.PulseCountChanged">
            <summary>
            Event is raised when the PulseCount of the Subsignal has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.ActiveChanged">
            <summary>
            Event is raised when the ActiveState of the Subsignal has changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.Continuous">
            <summary>
            Property to enable continuous operation of this subpulse.
            This means, that its pulsecount is infinite.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.SignalPulseCount">
            <summary>
            Property to get and set the pulsecount of the signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.PulseCount">
            <summary>
            Property to get and set the pulsecount of the signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.TriggerRequired">
            <summary>
            Property to get and set if a Trigger is Required
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.Trigger">
            <summary>
            Property to Enable Trigger or get if the Trigger is Enabled already.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.Active">
            <summary>
            Get or Set the active State of the subsignal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.Name">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.HardwareId">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.Frequency">
            <summary>
            Frequency of a complex PWM Subsignal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.Dutycycle">
            <summary>
            Dutycycle of a complex PWM Subsignal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.IncreaseOrder">
            <summary>
            Increase the Order of the Subsignal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.DecreaseOrder">
            <summary>
            Decrease the Order of the subsignal.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.SubsignalOrder">
            <summary>
            Property to read the Order of the subsignal.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWMSubsignal.Order">
            <summary>
            Property to read the Order of the subsignal.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle">
            <summary>
            DutyCycle of a simple PWM_IN Signal
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.ValuesRefreshHandler">
            <summary>
            A delegate of this type can be added to the PWM_IN and will be called, when a new Measurement is done.
            </summary>
            <param name="sender"> adc which is measured</param>
            <param name="value"> measured value of the adc</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.ValuesRefreshed">
            <summary>
            This event is fired, when the PWM_IN has received a new measured value
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.ElectricalValuesRefreshed">
            <summary>
            This event is fired, when the PWM_IN has received a new measured value
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.DutyCycleChanged">
            <summary>
            This event is fired, when a new dutycycle has been received.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.GetTranslator">
            <summary>
            Returns the currently assigned Translator
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.FromEvent(bosch.de.abt.beg.microLC.API.PWM_INDutyCycle)">
            <summary>
            Creates an Task, which allows to wait for the end of a Event.
            </summary>
            <param name="obj">instance of PWM_IN</param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.FromElectricEvent(bosch.de.abt.beg.microLC.API.PWM_INDutyCycle)">
            <summary>
            Creates an Task, which allows to wait for the end of a Event.
            </summary>
            <param name="obj">instance of ADC</param>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.Value">
            <summary>
            Value of the DutyCycle of the simple PWM_IN Signal or the correspondending physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.ElectricalValue">
            <summary>
            The coresspondending electrical value. Is equal with the Value, when no function is assigned. In Hz 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.Unit">
            <summary>
            Unit of the physical value
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.AssignTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            Assigns a matching translator function to the PWM_IN DutyCycle
            </summary>
            <param name="translatorFunction">translator function, which should be assigned</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.UnassignTranslatorFunction">
            <summary>
            Unassigns a Translatorfunction. Does nothing, when no function is assigned.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.GetTranslatorFunction">
            <summary>
            Returns the assigned translator function. Returns null if no Translatorfunction is assigned.
            </summary>
            <returns>assigned translator function</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.ErrormodeActive">
            <summary>
            When the Errormode is active the User is able to set Values less and greater than the minimum and maximum value.
            The electrical Value will set to a coresspondending value defined in the translator function or the minimum or maximum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.MinValue">
            <summary>
            Minimum possible Value of the DutyCycle or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.MaxValue">
            <summary>
            Maximum possible Value of the DutyCycle or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.TranslatorId">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.Name">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INDutyCycle.HardwareId">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.PWM_INFrequency">
            <summary>
            Frequency of a simple PWM Signal
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.PWM_INFrequency.ValuesRefreshHandler">
            <summary>
            A delegate of this type can be added to the PWM_IN and will be called, when a new Measurement is done.
            </summary>
            <param name="sender"> adc which is measured</param>
            <param name="value"> measured value of the adc</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWM_INFrequency.ValuesRefreshed">
            <summary>
            This event is fired, when the PWM_IN has received a new measured value
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWM_INFrequency.FrequencyChanged">
            <summary>
            This event is fired when a new Frequency was received.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWM_INFrequency.ElectricalValuesRefreshed">
            <summary>
            This event is fired, when the PWM_IN has received a new measured value
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INFrequency.FromEvent(bosch.de.abt.beg.microLC.API.PWM_INFrequency)">
            <summary>
            Creates an Task, which allows to wait for the end of a Event.
            </summary>
            <param name="obj">instance of PWM_IN</param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INFrequency.FromElectricEvent(bosch.de.abt.beg.microLC.API.PWM_INFrequency)">
            <summary>
            Creates an Task, which allows to wait for the end of a Event.
            </summary>
            <param name="obj">instance of ADC</param>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INFrequency.Value">
            <summary>
            Value of the Frequency of the simple PWM Signal or the correspondending physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INFrequency.ElectricalValue">
            <summary>
            The coresspondending electrical value. Is equal with the Value, when no function is assigned. In Hz 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INFrequency.Unit">
            <summary>
            Unit of the physical value
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INFrequency.GetTranslator">
            <summary>
            Returns the currently assigned Translator
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INFrequency.AssignTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            Assigns a matching translator function to the PWM Frequency
            </summary>
            <param name="translatorFunction">translator function, which should be assigned</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INFrequency.UnassignTranslatorFunction">
            <summary>
            Unassigns a Translatorfunction. Does nothing, when no function is assigned.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.PWM_INFrequency.GetTranslatorFunction">
            <summary>
            Returns the assigned translator function. Returns null if no Translatorfunction is assigned.
            </summary>
            <returns>assigned translator function</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INFrequency.ErrormodeActive">
            <summary>
            When the Errormode is active the User is able to set Values less and greater than the minimum and maximum value.
            The electrical Value will set to a coresspondending value defined in the translator function or the minimum or maximum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INFrequency.MinValue">
            <summary>
            Minimum possible Value of the Frequency or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INFrequency.MaxValue">
            <summary>
            Maximum possible Value of the Frequency or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INFrequency.TranslatorId">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INFrequency.Name">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_INFrequency.HardwareId">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.MSG_TYPE">
            <summary>
            Msg-Types of the SlowChannelSent
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.MSG_TYPE.SHORT_8BIT">
            <summary>
            8bit
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.MSG_TYPE.ENHANCED_12BIT">
            <summary>
            12bit
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.MSG_TYPE.ENHANCED_16BIT">
            <summary>
            16bit
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.MSG_TYPE.UNDEFINED">
            <summary>
            No msg-type defined
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.SentSensorType">
            <summary>
            Sensor-Types of the FastChannelSent
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.H1_Dual_12bit">
            <summary>
            Sensortype H1 Two 12-bit fast channel. Former 'Throttle Position'
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.Mass_Air_Flow_Typ_1">
            <summary>
            Sensortype Mass Air Flow Type 1
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.H7_16bit_8bit">
            <summary>
            Sensortype H.7 Two fast channels with 16 bit and 8 bit. Former 'Mass Air Flow Type 2'
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.H6_14bit_10bit">
            <summary>
            Sensortype H.6 Two fast channels with 14 bit and 10 bit. Former 'Mass Air Flow Type 3'
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.H4_Secure_12bit">
            <summary>
            Sensortype H.4 Secure sensor with 12 bit sensor and secure information on channel 2. Former 'Single Secure'
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.Single_Sensors_Typ_1">
            <summary>
            Sensortype Single Sensor Type 1
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.Single_Sensors_Typ_2">
            <summary>
            Sensortype Single Sensor Type 2
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.Pressure">
            <summary>
            Sensortype Pressure
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.Pressure_Secure">
            <summary>
            Sensortype Pressure Secure
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.Pedal_Position">
            <summary>
            Sensortype Pedal Position
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.H2_Single_12bit">
            <summary>
            Sensortype H.2 One 12 bit fast channel
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.H3_12bit_HighSpeed">
            <summary>
            Sensortype H.3 High-speed 12 bit fast channel
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.H5_12bit_Zero">
            <summary>
            Sensortype H.5 Single Sensor with 12 bit fast channel 1 and zero value on fast channel 2
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentSensorType.Individual">
            <summary>
            Sensortype Individual. Bit sizes for both channels can be set individually.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentMultiplexSensorTypes.Single_12Bit">
            <summary>
            Sensortype for usage of one single 12 bit fast channel
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentMultiplexSensorTypes.Single_16Bit">
            <summary>
            Sensortype for usage of one single 16 bit fast channel
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentMultiplexSensorTypes.Two_Signals">
            <summary>
            Sensortype for usage of two fast channel signals with variable bit sizes
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.SentMultiplexSensorTypes.Individual">
            <summary>
            Sensortype for usage of variable sensor counts and variable sensor bit sizes
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ISent">
            <summary>
            Default interface of Sent class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.SensorType">
            <summary>
            Property to get or set the SensorType of the FastChannelSent
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.FastChannelSentSensorType">
            <summary>
            Property to get or set the SensorType of the FastChannelSent
            Mass_Air_Flow_Typ_1 = 1, H7_16bit_8bit = 2, H6_14bit_10bit = 3, H4_Secure_12bit = 4, Single_Sensors_Typ_1 = 5, Single_Sensors_Typ_2 = 6,
            Pressure = 7, Pressure_Secure = 8, Pedal_Position = 9, H2_Single_12bit = 10, H3_12bit_HighSpeed = 11, H5_12bit_Zero = 12, Individual = 13
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISent.FastChannelConfigureChannelSizes(System.Int32,System.Int32)">
            <summary>
            Set the Channel sizes in bits for the fast channel. IMPORTANT: only possible for sensor type 'Indivual' = 13
            </summary>
            <param name="bitsChannel1">Max signal size in bits for channel 1</param>
            <param name="bitsChannel2">Max signal size in bits for channel 2</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.FastChannelEnabled">
            <summary>
            Enables FastChannelSent
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.TickLength">
            <summary>
            Sets/Gets the TickLength of Sent (3-90 Microseconds)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.CouplingFactor_v2">
            <summary>
            Sets the Factor that changes the Value of the CouplingChannel if SentSensorTyp Pedal_Position is selected.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.CouplingFactor">
            <summary>
            Sets the Factor that changes the Value of the CouplingChannel if SentSensorTyp Pedal_Position is selected.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.MaxTicks">
            <summary>
            Sets/Gets the Maximal Ticks of one Message (162-282)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.Channel1_Value">
            <summary>
            Sets/Gets the Value of Channel1
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.Channel2_Value">
            <summary>
            Sets/Gets the Value of Channel2
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.Initialization">
            <summary>
            Sets the FastChannelSent to Initialization
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.SlowChannelEnabled">
            <summary>
            Enabled the SlowChannel
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.Message_Type">
            Sets/Gets the Msg_Type of the SlowChannelSent
            0 = SHORT_8BIT, 1 = ENHANCED_12BIT, 2 = ENHANCED_16BIT, 3 = UNDEFINED
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.Msg_Type">
            <summary>
            Sets/Gets the Msg_Type of the SlowChannelSent
            </summary>    
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.SlowChannelValue">
            <summary>
            Sets/Gets the Value of the SlowChannelSent
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.UseImportedSubset">
            <summary>
            Sets/Gets whether the imported subset should be used
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.Msg_ID">
            <summary>
            Sets/Gets the Msg_ID of the SlowChannelSent
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.ImportSubsetFrom">
            <summary>
            Import a .txt-File that contains a Subset to import for the slow channel sent.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISent.ExportSubsetTo(System.String)">
            <summary>
            Export a .txt-File that contains a Subset to import for the slow channel sent.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.Multiplexing">
            <summary>
            Get/Set Enable state of Mutliplexing
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISent.PauseSignal">
            <summary>
            Get/Set the state of the pause signal
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISent.SetMultiplexSensorType(System.Int32,System.Int32)">
            <summary>
            Set the sensor type for the given frame within the multiplexed frames
            </summary>
            <param name="index">Index of the given frame (FC)</param>
            <param name="SensorType">Index of Sensortype. Single_12Bit = 0, Single_16Bit = 1, Two_Signals = 2, Individual = 3</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:bosch.de.abt.beg.microLC.API.ISent.GetMultiplexSensorType(System.Int32)" -->
        <member name="M:bosch.de.abt.beg.microLC.API.ISent.SetMultiplexSensorValues(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the values for both channels on one frame withinthe multiplexed frames
            </summary>
            <param name="index">Index of the selected frame (FC)</param>
            <param name="valueChannel1">Value for channel 1</param>
            <param name="valueChannel2">Value for channel 2</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISent.SetMultiplexDCC(System.Int32,System.Boolean)">
            <summary>
            Activate/Deactivate dcc for given frame within the multiplexed frames
            </summary>
            <param name="index">Index of the given frame (FC)</param>
            <param name="dcc">true = activate, false = deactivate dcc</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISent.MultiplexConfigureChannelSizes(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the Channel sizes in bits for the selected frame. IMPORTANT: only possible for sensor type 'Indivual' = 3
            </summary>
            <param name="index">Index of the given frame (FC)</param>
            <param name="bitsChannel1">Max signal size in bits for channel 1</param>
            <param name="bitsChannel2">Max signal size in bits for channel 2</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Sent">
            <summary>
            Class Sent implements the Sent-Funktionality in the API.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Sent.SentChanged`1">
            <summary>
            This delagate can be applied to the Sent and is called when a Sentvalue has changed.
            </summary>
            <typeparam name="T">Type of the value that has changed</typeparam>
            <param name="sender">source of the event</param>
            <param name="value">changed value</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.FastChannelEnabledChanged">
            <summary>
            Event is raised when the FastChannel is Enabled or Disabled
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.FastChannelSentSensorTypeChanged">
            <summary>
            Event is raised when the Sensortype is changed
            Throttle_Position = 0, Mass_Air_Flow_Typ_1 = 1, Mass_Air_Flow_Typ_2 = 2, Mass_Air_Flow_Typ_3 = 3, Single_Secure = 4, 
            Single_Sensors_Typ_1 = 5, Single_Sensors_Typ_2 = 6, Pressure = 7, Pressure_Secure = 8, Pedal_Position = 9
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.SensorTypeChanged">
            <summary>
            Event is raised when the Sensortype is changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.Channel1IncrementChanged_v2">
            <summary>
            Event is raised when the Increment of Channel 1 has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.Channel1IncrementChanged">
            <summary>
            Event is raised when the Increment of Channel 1 has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.Channel2IncrementChanged_v2">
            <summary>
            Event is raised when the Increment of Channel 2 has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.Channel2IncrementChanged">
            <summary>
            Event is raised when the Increment of Channel 2 has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.Channel1SentValueChanged_v2">
            <summary>
            Event is raised when the Value of Channel 1 has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.Channel1SentValueChanged">
            <summary>
            Event is raised when the Value of Channel 1 has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.Channel2SentValueChanged_v2">
            <summary>
            Event is raised when the Value of Channel 2 has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.Channel2SentValueChanged">
            <summary>
            Event is raised when the Value of Channel 2 has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.TickLengthChanged_v2">
            <summary>
            Event is raised when the Ticklength has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.TickLengthChanged">
            <summary>
            Event is raised when the Ticklength has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.TicksOfMessageChanged_v2">
            <summary>
            Event is raised when the Ticks of the message have changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.TicksOfMessageChanged">
            <summary>
            Event is raised when the Ticks of the message have changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.Message_TypeChanged">
            <summary>
            Event is raised when the Msg_Type for SlowChannelSent was changed.
            0 = SHORT_8BIT, 1 = ENHANCED_12BIT, 2 = ENHANCED_16BIT, 3 = UNDEFINED
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.Msg_TypeChanged">
            <summary>
            Event is raised when the Msg_Type for SlowChannelSent was changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.SlowChannelIncrementChanged2">
            <summary>
            Event is raised when the Increment of SlowChannelSent has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.SlowChannelIncrementChanged">
            <summary>
            Event is raised when the Increment of SlowChannelSent has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.Msg_IDChanged">
            <summary>
            Event is raised when the Msg_ID of the SlowChannelSent has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.SlowChannelValueChanged_v2">
            <summary>
            Event is raised when the Value of the SlowChannelSent has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.SlowChannelValueChanged">
            <summary>
            Event is raised when the Value of the SlowChannelSent has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Sent.SlowChannelEnabledChanged">
            <summary>
            Event is raised when the SlowChannelSent was enabled/disabled.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.CouplingFactor_v2">
            <summary>
            Sets the Factor that changes the Value of the CouplingChannel if SentSensorTyp Pedal_Position is selected.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.CouplingFactor">
            <summary>
            Sets the Factor that changes the Value of the CouplingChannel if SentSensorTyp Pedal_Position is selected.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.SensorType">
            <summary>
            Property to get or set the SensorType of the FastChannelSent
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.FastChannelSentSensorType">
            <summary>
            Property to get or set the SensorType of the FastChannelSent
            Throttle_Position = 0, Mass_Air_Flow_Typ_1 = 1, Mass_Air_Flow_Typ_2 = 2, Mass_Air_Flow_Typ_3 = 3, Single_Secure = 4, 
            Single_Sensors_Typ_1 = 5, Single_Sensors_Typ_2 = 6, Pressure = 7, Pressure_Secure = 8, Pedal_Position = 9
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.FastChannelEnabled">
            <summary>
            Enables FastChannelSent
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.SlowChannelEnabled">
            <summary>
            Enabled SlowChannelSent 
            define Msg_Type before, else it stays disabled
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.TickLength">
            <summary>
            Sets/Gets the TickLength of Sent (3-90 Microseconds)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.MaxTicks">
            <summary>
            Gets the Maximal Ticks of one Message (162-282)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Channel1_Value">
            <summary>
            Sets/Gets the Value of Channel1 of non multiplex frame
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.getChannel1ValueInMultiplex(System.Int32)">
            <summary>
            Get Value for signal 1 for the given frame within all multiplexed frames
            </summary>
            <param name="frameIndex">Frame within all multiplexed fast channel frames</param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.setChannel1ValueInMultiplex(System.Int32,System.Int32)">
            <summary>
            Set Value for signal 1 for the given frame within all multiplexed frames
            </summary>
            <param name="frameIndex">Frame within all multiplexed fast channel frames</param>
            <param name="value">Value for signal 1 which will be set</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Channel2_Value">
            <summary>
            Sets/Gets the Value of Channel2 of the non multiplex frame
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.getChannel2ValueInMultiplex(System.Int32)">
            <summary>
            Get Value for signal 2 for the given frame within all multiplexed frames
            </summary>
            <param name="frameIndex">Frame within all multiplexed fast channel frames</param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.setChannel2ValueInMultiplex(System.Int32,System.Int32)">
            <summary>
            Set Value for signal 2 for the given frame within all multiplexed frames
            </summary>
            <param name="frameIndex">Frame within all multiplexed fast channel frames</param>
            <param name="value">Value for signal 2 which will be set</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.SetMultiplexSensorValues(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the values for both channels on one frame withinthe multiplexed frames
            </summary>
            <param name="index">Index of the selected frame (FC)</param>
            <param name="valueChannel1">Value for channel 1</param>
            <param name="valueChannel2">Value for channel 2</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Initialization">
            <summary>
            Sets the FastChannelSent to Initialization
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Message_Type">
            <summary>
            The Message Type of the SlowChannelSent
            0 = SHORT_8BIT, 1 = ENHANCED_12BIT, 2 = ENHANCED_16BIT, 3 = UNDEFINED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Msg_Type">
            <summary>
            The Message Type of the SlowChannelSent
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.SlowChannelValue">
            <summary>
            The value of the SlowChannelSent
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.getSlowChannelValueInSubset(System.Int32)">
            <summary>
            Get slow channel value for specific signal within subset
            </summary>
            <param name="index">Index of slow channel message within subset</param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.setSlowChannelvalueInSubset(System.Int32,System.Int32)">
            <summary>
            Set slow channel value for specific signal within subset
            </summary>
            <param name="index">Index of slow channel message within subset</param>
            <param name="value">value which will be set for given subset signal</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.ImportSubsetFrom">
            <summary>
            Import a subset from console line inputs. Every input-line represents one entry in the slow channel subset. 
            Input must be in the following syntax: index,  message-id, value
            All inputs must be numeric values, seperated by a comma. Index must be unique for every line.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.ImportSubsetFromFile(System.String)">
            <summary>
            Method to import subset from .txt file.
            File must be in the following syntax: index,  message-id, value
            All entries must be numeric values, seperated by a comma. Index must be unique for every line.
            </summary>
            <param name="path">Absolute path to the subset .txt file</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.UseImportedSubset">
            <summary>
            Use the imported Subset for SlowChannelSent
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.getMessageIdInSubset(System.Int32)">
            <summary>
            Get Message ID from specific slow channel message within the subset
            </summary>
            <param name="index">Index of slow channel message within subset</param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.setMessageIdInSubset(System.Int32,System.Int32)">
            <summary>
            Set Message ID for specific slwo channel message within subset
            </summary>
            <param name="Index">Index of slow channel message within subset</param>
            <param name="ID">ID value</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Msg_ID">
            <summary>
            Message ID for 8 bit short (decimal): AirTemperature_LSB = 0, AirTemperature_MSB = 1, Humidity_LSB = 2, Humidity_MSB = 3, BarometricPressure_LSB = 4, BarometricPressure_MSB = 5, Error_Code = 15
            Message ID for 12bit in decimal (0-255)
            Message ID for 16bit: Air Temperature = 0; Humidity = 2; Barometric Pressure = 4
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Multiplexing">
            <summary>
            Get or Set the multiplexing state of the sent component. For enabling set to true, for disabling set to false
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.PauseSignal">
            <summary>
            Get or Set the state of the pause signal. For enabling set to true, for disabling set to false.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.FastChannelErrorSimulation">
            <summary>
            Get or Set the state of the ErrorSimulation. For enabling set to true, for disabling set to false.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.SlowChannelErrorSimulation">
            <summary>
            Get or Set the state of the ErrorSimulation. For enabling set to true, for disabling set to false.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Nibble">
            <summary>
            Get or Set the state of the ErrorSimulation. For enabling set to true, for disabling set to false.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.SensorChannel">
            <summary>
             Get or Set the state of the SensorChannel. The value must be 1 or 2.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.ErrorDutyCycle">
            <summary>
            Get or Set the state of the ErrorDutyCycle. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.ErrorLength">
            <summary>
            Get or Set the state of the ErrorLength. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Offset">
            <summary>
            Get or Set the state of the Offset. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Drift">
            <summary>
            Get or Set the state of the Drift. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.StartValue">
            <summary>
            Get or Set the state of the StartValue. F
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.EndValue">
            <summary>
            Get or Set the state of the EndValue.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Increment">
            <summary>
            Get or Set the state of the Increment.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Sent.Value">
            <summary>
            Get or Set the state of the Value. 
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.SetMultiplexSensorType(System.Int32,System.Int32)">
            <summary>
            Set the sensor type for the given frame within the multiplexed frames
            </summary>
            <param name="index">Index of the given frame (FC)</param>
            <param name="SensorType">Index of Sensortype. Single_12Bit = 0, Single_16Bit = 1, Individual = 2</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:bosch.de.abt.beg.microLC.API.Sent.GetMultiplexSensorType(System.Int32)" -->
        <member name="M:bosch.de.abt.beg.microLC.API.Sent.FastChannelConfigureChannelSizes(System.Int32,System.Int32)">
            <summary>
            Set the Channel sizes in bits for the fast channel. IMPORTANT: only possible for sensor type 'Indivual' = 13
            </summary>
            <param name="bitsChannel1">Max signal size in bits for channel 1</param>
            <param name="bitsChannel2">Max signal size in bits for channel 2</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.PWM_INResistorState">
            <summary>
            This are the different states the Resistor of the PWM_IN can have.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.PWM_INResistorState.PULLUP">
            <summary>
            Resistorstate Pullup
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.PWM_INResistorState.PULLDOWN">
            <summary>
            Resistorstate Pulldown
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.PWM_INResistorState.DISABLED">
            <summary>
            Resistorstate Disabled
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.PWM_INResistorState.TIMEOUT">
            <summary>
            Resistorstate Timeout
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.PWM_INResistorState.UNDEFINED">
            <summary>
            Resistorstate Undefined
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IPWM_IN">
            <summary>
            Standard interface for the COM functionality of the PWM_IN class
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWM_IN.Name">
            <summary>
            Name of the PWM_IN Component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWM_IN.HardwareId">
            <summary>
            HardwareId of the PWM_IN Component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWM_IN.Frequency">
            <summary>
            The frequency of the received PWM Signal.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWM_IN.DutyCycle">
            <summary>
            The dutycycle of the received PWM Signal.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWM_IN.ResistorState">
            <summary>
            The ResistorState of the PWM_IN.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWM_IN.ResistorState_v2">
            <summary>
            The ResistorState of the PWM_IN.
            0 = PULLUP, 1 = PULLDOWN, 2  = TIMEOUT, 4 DISABLED, 3 = UNDEFINED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWM_IN.Enabled">
            <summary>
            Activates or deactivates the PWM_IN.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.PWM_IN">
            <summary>
            This class represents the PWM_IN with the events and Properties of this class the user is able to observe the values of the PWM_IN 
            or to adjust the ResistorState of the PWM_IN.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.PWM_IN.PWM_INEventHandler`1">
            <summary>
            Handler for the Events that happen in PWM_IN
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sender">source of the event</param>
            <param name="value"></param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWM_IN.ResistorStateChanged">
            <summary>
            This event is raised when the Resistorstate of the PWM_IN has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWM_IN.ResistorStateChanged_v2">
            <summary>
            This event is raised when the Resistorstate of the PWM_IN has changed.
            0 = PULLUP, 1 = PULLDOWN, 2  = TIMEOUT, 4 DISABLED, 3 = UNDEFINED
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWM_IN.StateChanged">
            <summary>
            This event is raised when the state of the PWM_IN is changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_IN.Name">
            <summary>
            Name of the PWM_IN Component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_IN.HardwareId">
            <summary>
            HardwareId of the PWM_IN Component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_IN.Frequency">
            <summary>
            The frequency of the received PWM Signal.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_IN.DutyCycle">
            <summary>
            The dutycycle of the received PWM Signal.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_IN.ResistorState">
            <summary>
            The ResistorState of the PWM_IN.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_IN.ResistorState_v2">
            <summary>
            The ResistorState of the PWM_IN.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWM_IN.Enabled">
            <summary>
            Activates or deactivates the PWM_IN
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ExcitationState">
            <summary>
            Possible Excitation state values
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.ExcitationState.INTERNAL">
            <summary>
            Internal Excitation Signal
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.ExcitationState.EXTERNAL">
            <summary>
            External Excitation Signal
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Direction">
            <summary>
            Possible directions of the Resolver Signal
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.Direction.CLOCKWISE">
            <summary>
            Clockwise Rotation
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.Direction.COUNTERCLOCKWISE">
            <summary>
            Counterclockwise Rotation
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Output">
            <summary>
            Possible signals shown at the output
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.Output.ENVELOPE">
            <summary>
            Envelope of Resolver signal
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.Output.RESOLVER">
            <summary>
            Resolver signal
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.Output.INCREMENTAL_ENCODER">
            <summary>
            Incremental Encoder
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IResolver">
            <summary>
            Default Interface of Resolver class, specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.Name">
            <summary>
            The Property Name represents the Label of the Resolver and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.Enabled">
            <summary>
            Property for the Enabled state of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.Excitation">
            <summary>
            Property for the Excitation of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.ExcitationSignalState">
            <summary>
            Property for the Excitation of this component
            0 = INTERNAL, 1 = EXTERNAL
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.Direction">
            <summary>
            Property for the Rotation direction of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.RotationDirection">
            <summary>
            Property for the Rotation direction of this component
            0 = CLOCKWISE, 1 = COUNTERCLOCKWISE
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.Output">
            <summary>
            Property for the Output signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.Output_v2">
            <summary>
            Property for the Output signal
            0 = ENVELOPE, 1 = RESOLVER, 2 = INCREMENTAL_ENCODER
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.ExcitationFrequency">
            <summary>
            Property for the exciation frequency
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.ResolverRPM">
            <summary>
            Property for the Resolver RPM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.ResolverNumberOfPolePairs">
            <summary>
            Property for the number of pole pairs of the resolver
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.AmplitudeSine">
            <summary>
            Property for the amplitude of the sine signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.AmplitudeCosine">
            <summary>
            Property for the amplitude of the cosine signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.OffsetSine">
            <summary>
            Property for the offset of the sine signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.OffsetCosine">
            <summary>
            Property for the offset of the cosine signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.PhaseshiftSine">
            <summary>
            Property for the phaseshift of the sine signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.PhaseshiftCosine">
            <summary>
            Property for the phaseshift of the cosine signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.AmplitudeU">
            <summary>
            Property for the amplitude of U
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.AmplitudeV">
            <summary>
            Property for the amplitude of V
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.AmplitudeW">
            <summary>
            Property for the amplitude of W
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.OffsetU">
            <summary>
            Property for the Offset of U
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.OffsetV">
            <summary>
            Property for the Offset of V
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.OffsetW">
            <summary>
            Property for the Offset of W
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.PhaseshiftU">
            <summary>
            Property for the Phaseshift of U
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.PhaseshiftV">
            <summary>
            Property for the Phaseshift of V
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.PhaseshiftW">
            <summary>
            Property for the Phaseshift of W
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.OffsetInkrSine">
            <summary>
            Property for the incremental sine offset
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.OffsetInkrCosine">
            <summary>
            Property for the incremental cosine offset
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.OffsetRef">
            <summary>
            Property for the reference offset
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.AmplitudeInkrSine">
            <summary>
            Property for the incremental sine amplitude
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.AmplitudeInkrCosine">
            <summary>
            Property for the incremental cosine amplitude
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.AmplitudeRef">
            <summary>
            Property for the reference amplitude
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.PhaseshiftInkrSine">
            <summary>
            Property for the incremental sine phaseshift
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.PhaseshiftInkrCosine">
            <summary>
            Property for the incremental cosine phaseshift
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.PhaseshiftRef">
            <summary>
            Property for the reference phaseshift
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.IncrementalEncoderResolution">
            <summary>
            Property for the resolution of incremental encoder
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IResolver.IncrementalResolution">
            <summary>
            Property for the resolution of incremental encoder
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Resolver">
            <summary>
            This class represents a Resolver.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Resolver.ResolverStateChangedEvent`1">
            <summary>
            A delegate of this type can be added to the ResolverStateChanged Event and will be called, 
            if the Resolver state changes.
            </summary>
            <typeparam name="T">Enum of different states</typeparam>
            <param name="sender">Sender of the Event</param>
            <param name="resolverState">State after Event</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Resolver.ResolverValueChangedEvent">
            <summary>
            A delegate of this type can be added the ResolverValueChanged Event and will be called,
            if the Resolver value changes
            </summary>
            <param name="sender">Sender of the Event</param>
            <param name="value">Value after Event</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.EnabledChanged">
            <summary>
            Event which is fired when the state of the Resolver is changed to enabled/disabled
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.EnabledStateChanged">
            <summary>
            Event which is fired when the state of the Resolver is changed to enabled/disabled
            0 = Disabled, 1 = Enabled
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.ExcitationChanged">
            <summary>
            Event which is fired when the Excitation of the Resolver is changed to extern/intern
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.ExcitationStateChanged">
            <summary>
            Event which is fired when the Excitation of the Resolver is changed to extern/intern
            0 = Internal, 1 = External
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.DirectionChanged">
            <summary>
            Event which is fired when the direction of the Resolver is changed to clockwise/counterclockwise
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.RotationDirectionChanged">
            <summary>
            Event which is fired when the direction of the Resolver is changed to clockwise/counterclockwise
            0 = Clockwise, 1 = Counterclockwise
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.OutputChanged">
            <summary>
            Event which is fired when the output signal type of the Resolver was changed to envelope/resolver/incremental_encoder
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.OutputChanged_v2">
            <summary>
            Event which is fired when the output signal type of the Resolver was changed. 0 = envelope, 1 = resolver, 2 = IncrementalEncoder
            0 = Envelope, 1 = Resolver, 2 = Incremental_encoder
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.ExcitationFrequencyChanged">
            <summary>
            Event which is fired when the value of the excitation frequency has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.ResolverRPMChanged">
            <summary>
            Event which is fired when the value of the resolver RPM has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.ResolverNumberOfPolePairsChanged">
            <summary>
            Event which is fired when the value of the number of pole pairs of the resolver has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeSineChanged">
            <summary>
            Event which is fired when the value of the sine amplitude has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeCosineChanged">
            <summary>
            Event which is fired when the value of the cosine amplitude has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.OffsetSineChanged">
            <summary>
            Event which is fired when the value of the sine offset has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.OffsetCosineChanged">
            <summary>
            Event which is fired when the value of the cosine offset has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftSineChanged">
            <summary>
            Event which is fired when the value of the sine phaseshift has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftCosineChanged">
            <summary>
            Event which is fired when the value of the cosine phaseshift has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeUChanged">
            <summary>
            Event which is fired when the value of the U amplitude has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeVChanged">
            <summary>
            Event which is fired when the value of the V amplitude has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeWChanged">
            <summary>
            Event which is fired when the value of the W amplitude has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.OffsetUChanged">
            <summary>
            Event which is fired when the value of the U offset has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.OffsetVChanged">
            <summary>
            Event which is fired when the value of the V offset has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.OffsetWChanged">
            <summary>
            Event which is fired when the value of the W offset has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftUChanged">
            <summary>
            Event which is fired when the value of the U phaseshift has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftVChanged">
            <summary>
            Event which is fired when the value of the V phaseshift has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftWChanged">
            <summary>
            Event which is fired when the value of the W phaseshift has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftInkrSineChanged">
            <summary>
            Event which is fired when the value of the incremental sine phaseshift has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftInkrCosineChanged">
            <summary>
            Event which is fired when the value of the incremental cosine phaseshift has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftRefChanged">
            <summary>
            Event which is fired when the value of the reference phaseshift has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.OffsetInkrSineChanged">
            <summary>
            Event which is fired when the value of the incremental sine offset has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.OffsetInkrCosineChanged">
            <summary>
            Event which is fired when the value of the incremental cosine offset has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.OffsetRefChanged">
            <summary>
            Event which is fired when the value of the reference offset has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeInkrSineChanged">
            <summary>
            Event which is fired when the value of the incremental sine amplitude has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeInkrCosineChanged">
            <summary>
            Event which is fired when the value of the incremental cosine amplitude has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeRefChanged">
            <summary>
            Event which is fired when the value of the reference amplitude has changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Resolver.IncrementalResolutionChanged">
            <summary>
            Event which is fired when the value of the incremental resolution has changed
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.EnableHandler(BoschEngineering.MicroLC.Logic.Domain.EMobility.Component.EMobilityComponent.ResolverState)">
            <summary>
            Resolver EnableHandler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.ExcitationHandler(BoschEngineering.MicroLC.Logic.Domain.EMobility.Component.EMobilityComponent.ExcitationSignal)">
            <summary>
            Resolver ExcitationHandler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.RotationHandler(BoschEngineering.MicroLC.Logic.Domain.EMobility.Component.EMobilityComponent.Direction)">
            <summary>
            Resolver RotationHandler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.ExcitationFrequencyHandler(System.Single)">
            <summary>
            Resolver ExcitationFrequency Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.ResolverRPMHandler(System.Single)">
            <summary>
            Resolver ResoverRPM Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.ResolverNumberOfPolePairsHandler(System.Int32)">
            <summary>
            Resolver ResolverNumberOfPolePairs Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeSineHandler(System.Single)">
            <summary>
            Resolver AmplitudeSine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeCosineHandler(System.Single)">
            <summary>
            Resolver AmplitudeCosine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.OffsetSineHandler(System.Single)">
            <summary>
            Resolver OffsetSine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.OffsetCosineHandler(System.Single)">
            <summary>
            Resolver OffsetCosine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftSineHandler(System.Single)">
            <summary>
            Resolver PhaseshiftSine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftCosineHandler(System.Single)">
            <summary>
            Resolver PhaseshiftCosine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeUHandler(System.Single)">
            <summary>
            Resolver AmplitudeU Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeVHandler(System.Single)">
            <summary>
            Resolver AmplitudeV Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeWHandler(System.Single)">
            <summary>
            Resolver AmplitudeW Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.OffsetUHandler(System.Single)">
            <summary>
            Resolver OffsetU Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.OffsetVHandler(System.Single)">
            <summary>
            Resolver OffsetV Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.OffsetWHandler(System.Single)">
            <summary>
            Resolver OffsetW Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftUHandler(System.Single)">
            <summary>
            Resolver PhaseshiftU Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftVHandler(System.Single)">
            <summary>
            Resolver PhaseshiftV Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftWHandler(System.Single)">
            <summary>
            Resolver PhaseshiftU Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftInkrSineHandler(System.Single)">
            <summary>
            Resolver PhaseshiftInkrSine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftInkrCosineHandler(System.Single)">
            <summary>
            Resolver PhaseshiftInkrCosine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftRefHandler(System.Single)">
            <summary>
            Resolver PhaseshiftRef Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeInkrSineHandler(System.Single)">
            <summary>
            Resolver AmplitudeInkrSine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeInkrCosineHandler(System.Single)">
            <summary>
            Resolver AmplitudeInkrCosine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeRefHandler(System.Single)">
            <summary>
            Resolver AmplitudeRef Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.OffsetInkrSineHandler(System.Single)">
            <summary>
            Resolver OffsetInkrSine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.OffsetInkrCosineHandler(System.Single)">
            <summary>
            Resolver OffsetInkrCosine Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.OffsetRefHandler(System.Single)">
            <summary>
            Resolver OffsetRef Handler
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.OutputChangedHandler(BoschEngineering.MicroLC.Logic.Domain.EMobility.Component.EMobilityComponent.Output)">
            <summary>
            Output changed Handler
            </summary>
            <param name="output">new output</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.IncrementalResolutionChangedHandler(System.UInt16)">
            <summary>
            Incremental resolution changed handler
            </summary>
            <param name="resolution"></param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.Name">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.HardwareId">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Resolver.Unlisten">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.Enabled">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.ExcitationSignalState">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.Excitation">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.Direction">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.RotationDirection">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.ExcitationFrequency">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.ResolverRPM">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.ResolverNumberOfPolePairs">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeSine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeCosine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.OffsetSine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.OffsetCosine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftSine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftCosine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeU">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeV">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeW">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.OffsetU">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.OffsetV">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.OffsetW">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftU">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftV">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftW">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.OffsetInkrSine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.OffsetInkrCosine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.OffsetRef">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeInkrSine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeInkrCosine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.AmplitudeRef">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftInkrSine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftInkrCosine">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.PhaseshiftRef">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.Output">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.Output_v2">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.IncrementalEncoderResolution">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Resolver.IncrementalResolution">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IThrottleParameter">
            <summary>
            Default Interface of ThrottleParameter class, specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IThrottleParameter.Name">
            <summary>
            Gets the name of the ThrottleSim parameter
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IThrottleParameter.Value">
            <summary>
            Sets/Gets the value of the ThrottleSim parameter
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ThrottleParameter">
            <summary>
            This class represents the ThrottleValveSimulation of the hardware.
            With the functions and Properties in this class the user is able to calibrate a Hardware ThrottleValveSimulation
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleParameter.Value">
            <summary>
            Sets/Gets the value of the ThrottleSim parameter "name"
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleParameter.Name">
            <summary>
            Gets the name of the ThrottleSim parameter
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IThrottleValve">
            <summary>
            Default Interface of ThrottleValve class, specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IThrottleValve.ThrottleSimState">
            <summary>
            Simulation state of the ThrottleValve
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IThrottleValve.ThrottleValveSampling">
            <summary>
            Sampling state of the ThrottleValve
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IThrottleValve.ThrottleValveType">
            <summary>
            ThrottleValve type: 0 = custom, 1 = DVE5, 2 = Siemens DK
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IThrottleValve.ParameterListCOM">
            <summary>
            Property that returns a list of the ThrottleSim parameters
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IThrottleValve.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IThrottleValve.Name">
            <summary>
            Returns the name of this component
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IThrottleValve.GetIndexOfParam(System.String)">
            <summary>
            Returns the index of the parameter with the given name
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IThrottleValve.GetParamAt(System.Int32)">
            <summary>
             returns the parameter with the given index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IThrottleValve.GetAngleArrayLength">
            <summary>
             returns the length of the AngleArray
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IThrottleValve.GetAngleAt(System.Int32)">
            <summary>
             returns the angle with the given index
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IThrottleValve.CurrentAngle">
            <summary>
            Returns the current Angle of the throttle valve
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IThrottleValve.AngleArray">
            <summary>
            Property that returns an array with the simulated angles
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ThrottleValve">
            <summary>
            This class represents the ThrottleValveSimulation of the hardware.
            With the functions and properties in this class the user is able to calibrate a Hardware ThrottleValveSimulation
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleSimNoParam">
            <summary>
            Handler for changes in the ThrottleValveSimulation without parameter
            </summary>
            <param name="sender">the ThrottleSim component where the change was made</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleSimWithParam`1">
            <summary>
            Handler for changes in the ThrottleValveSimulation with parameter
            </summary>
            <typeparam name="T">type of the value that has changed</typeparam>
            <param name="sender">the ThrottleSim component where the change was made</param>
            <param name="value">new value</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleSimWithTwoParams`2">
            <summary>
            Handler for changes in the ThrottleValveSimulation with two parameters
            </summary>
            <typeparam name="T1">type of the value that has changed</typeparam>
            <typeparam name="T2">type of the value that has changed</typeparam>
            <param name="sender">the ThrottleSim component where the change was made</param>
            <param name="value1">new value</param>
            <param name="value2">new value</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleSimWithThreeParams`3">
            <summary>
            Handler for changes in the ThrottleValveSimulation with three parameters
            </summary>
            <typeparam name="T1">type of the value that has changed</typeparam>
            <typeparam name="T2">type of the value that has changed</typeparam>
            <typeparam name="T3">type of the value that has changed</typeparam>
            <param name="sender">the ThrottleSim component where the change was made</param>
            <param name="value1">new value</param>
            <param name="value2">new value</param>
            <param name="value3">new value</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleSimValueReceivedEvent">
            <summary>
            Raised when a new throttle valve angle is received from device. While sampling, only the last simulated angle can be received 
            but when the sampling has been stopped the other values of the last ten seconds can be loaded by getting the "AngleArray".
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleValveSamplingStoppedEvent">
            <summary>
            Raised when ThrottleSim sampling is stopped because simulation was stopped.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleValveSimulationStateChangedEvent">
            <summary>
            Raised when ThrottleValve simulation state has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleValveSamplingChangedEvent">
            <summary>
            Raised when ThrottleValve sampling state has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleValveTypeChangedEvent">
            <summary>
            Raised when ThrottleValve type has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleValveTypeChangedToCustomEvent">
            <summary>
            Raised when ThrottleValve type has changed to custom because the value of one or more ThrottleValve parameters changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ThrottleValve.ParamChangedEvent">
            <summary>
            Raised when a ThrottleValve parameter value has been changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ThrottleValve.passiveChangedEvent">
            <summary>
            Raised when a parameter of type passive was tried to change.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleSimState">
            <summary>
            Property that sets/gets the simulation state of the Throttle Valve
            raises event ThrottleSimulationChanged when setting of the state was successful
            throws exception DACinUse when CylinderPressure simulation is running (no simulation of Throttle Valve possible while CylinderPressure simulation is running)
            raises event ThrottleValveSamplingStopped when simulation has been stopped
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleValveSampling">
            <summary>
            Property that sets/gets the sampling state of the Throttle Valve
            raises event ThrottleValveSamplingChanged
            throws exception ThrottleValveSamplingCanNotStart when sampling state was set true while simulation was not running
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleValve.ThrottleValveType">
            <summary>
            Property that sets/gets the Throttle Valve type
            raises event ThrottleValveTypeChanged
            throws exception NoValidThrottleValveType when type was set to an invalid type
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleValve.ParameterList">
            <summary>
            Property that returns a list of the ThrottleSim parameters
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleValve.ParameterListCOM">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleValve.SendSettings">
            <summary>
            Property that sends the parameter values set in property "Value" to Hardware - if true (if false nothing happens)
            Property should not be deletet in case that there are actual Projects based on older implementations using this property
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ThrottleValve.GetIndexOfParam(System.String)">
            <summary>
            Method that returns the index of the parameter with the given name in der parameterMap (for .COM)
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ThrottleValve.GetParamAt(System.Int32)">
            <summary>
            Method that returns the parameter with the given index in der parameterMap (for .COM)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleValve.AngleArray">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ThrottleValve.GetAngleArrayLength">
            <summary>
            Property that returns the length of the angle array
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ThrottleValve.GetAngleAt(System.Int32)">
            <summary>
            Property that returns an angle at a specific index
            <param name="index"/>
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleValve.CurrentAngle">
            <summary>
            returns the current Angle of the throttle valve
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleValve.Name">
            NUNIT_COMPLETED
             <summary>
             Property that returns the name of the component
             </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ThrottleValve.HardwareId">
            <summary>
            Property that returns the HardwareID of the component
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ILua">
            <summary>
            
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ILua.AddScript(System.String,System.String)">
            <summary>
            Adds a luaScript under name to the scripts of the project
            </summary>
            <param name="name">name of the script</param>
            <param name="path">path of the script</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ILua.RemoveScript(System.String)">
            <summary>
            Removes a luaScript from the scripts of the project
            </summary>
            <param name="name">name of the script</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ILua.GetScripts">
            <summary>
            Gets all luaScripts contained in the project
            </summary>
            <returns>Stringarray of scripts</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ILua.StartScript(System.String)">
            <summary>
            Starts a luaScript that is saved under this script name inside the project
            </summary>
            <param name="name">name of the script</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ILua.LoadAndStartScript(System.String)">
            <summary>
            Starts the luaScript that is stored under this path
            Script doesn't get added to the scripts of the project file
            </summary>
            <param name="path">path of the script</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Lua">
            <summary>
            
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Lua.#ctor">
            <summary>
            Construtor for lua, called inside microlcmanager
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Lua.GetScripts">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Lua.AddScript(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Lua.RemoveScript(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Lua.LoadAndStartScript(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Lua.StartScript(System.String)">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.TA.I_Ident">
            <summary>
            Necessary Interface for the Tooladapter.
            It provides getters for the Interface Name, the Interface Classname, the Interfaceversion, the Hardwareversion and the Hardware SerialId.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.I_Ident.GetIFName">
            <summary>
            Get name of the interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.I_Ident.GetIFClassName">
            <summary>
            Get interface class name
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.I_Ident.GetIFVersion">
            <summary>
            Get version number of the functional interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.I_Ident.GetHWVersion">
            <summary>
            Get version number of the associated hardware
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.I_Ident.GetHWSerialNumber">
            <summary>
            Get unique serial number of the associated hardware
            </summary>
            <returns></returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF">
            <summary>
            Interface for the generic Functions of the API.
            It specifies which methods are visible for COM
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_Init(System.String)">
            <summary>
            Method which is used to initalize the software
            </summary>
            <param name="path">path to a microLC Project file - null if new Project</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_Init(System.Boolean,System.String)">
            <summary>
            Method which is used to initalize the software with Mockups
            *Mockup - Mockup-Devices are virtual Devices that can be used to test functions without the
            physical presence of a Device.
            </summary>
            <param name="path">path to a microLC Project file - null if new Project</param>
            <param name="mockups">bool to indecate whether mockups should be used or not.</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_Init_2(System.Boolean,System.String)">
            <summary>
            FOR COM! IS identical to microLC_Init(bool mockups, string path)
            Method which is used to initalize the software with Mockups
            *Mockup - Mockup-Devices are virtual Devices that can be used to test functions without the
            physical presence of a Device.
            </summary>
            <param name="path">path to a microLC Project file - null if new Project</param>
            <param name="mockups">bool to indecate whether mockups should be used or not.</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_SetValue(System.String,System.Double)">
            <summary>
            Sets a Value by its signal name
            </summary>
            <param name="signalName">name of the signal which should be set</param>
            <param name="doubleValue">value as double (for dout: 0=Disabled, 1=Enabled, 2=Tristate)</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_SetValueAsString(System.String,System.String)">
            <summary>
            Sets a Value by its signal name
            </summary>
            <param name="signalName">name of the signal which should be set</param>
            <param name="value">value as string</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_GetValue(System.String)">
            <summary>
            Returns the Value of a Signal.
            </summary>
            <param name="signalName">name of the signal which should be returned</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_GetValueAsString(System.String)">
            <summary>
            Returns the Value of a Signal as String;
            </summary>
            <param name="signalName">name of the signal which should be returned</param>
            <returns>The value of a Signal as string</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_CheckValue(System.String,System.Double)">
            <summary>
            Is used to check the Values
            </summary>
            <param name="signalName">name of the signal which should be returned</param>
            <param name="doubleValue">value as double</param>
            <returns>true= the values match, false= the values don't match</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_SetLocked(System.Boolean)">
            <summary>
            Locks or unlocks microLC_SetValue
            true    --> All values set from this point on will be buffered
            false   --> All buffered values are getting sent to the device
                        All values set from this point on will be directly sent to the device
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_Exit">
            <summary>
            Procedure which is called to exit the software
            It clears all buffers, so Locked Values will be lost forever, if not released before
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_Reset">
            <summary>
            Should be called when the API is blocked by another program and can't be closed 
            or if it's blocked even though there is no other program using it.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.microLC_SaveProject(System.String)">
            <summary>
            Saves the changes that have been made in the Project
            </summary>
            <param name="path">path to where the project is to be saved</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.GetThisDeviceIndex(System.String)">
            <summary>
            Returns the index of the given device
            </summary>
            <param name="serial">serial of the searched device</param>
            <returns>index of the device</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.RenameSignal(System.String,System.String)">
            <summary>
            Provides the ability to change a Signalname to a custom Signalname
            </summary>
            <param name="oldSignalname">the original Signalname </param>
            <param name="newName">the custom Signalname (just the name of the Signal without deviceID and Propertyname)</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.GetInitialized">
            <summary>
            Returns whether the µLC-API is initialized or not
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.SignalnameCount">
            <summary>
            Returns the Number of Signalnames. This is necessary for COM, since COM can't use the Method GetAllSignalNames().
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.GetSignalnameAt(System.Int32)">
            <summary>
            Returns a signalName at a specific location in the list. This is necessary for COM, since COM can't use the Method GetAllSignalNames().
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.GetAllSignalnamesCOM">
            <summary>
            Returns all possible signal names, which can be used in one string
            parted by carriage return
            </summary>
            <returns>String that contains all Signalnames</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.GetIFName">
            <summary>
            Get name of the interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.GetIFClassName">
            <summary>
            Get interface class name
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.GetIFVersion">
            <summary>
            Get version number of the functional interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.GetHWVersion">
            <summary>
            Get version number of the associated hardware
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_COM_IF.GetHWSerialNumber">
            <summary>
            Get unique serial number of the associated hardware
            </summary>
            <returns></returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.TA.TA_List_IF">
            <summary>
            Interface for the generic Functions of the API that cannot be used with COM.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.TA_List_IF.GetAllSignalNames">
            <summary>
            Retruns all possible signal names, which can be used
            </summary>
            <returns>List of all signal names</returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.TA.I_TA_Adapter">
            <summary>
            Interface for the generic Functions of the API.
            This Interface is a collection of all functions.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.TA.Signal">
            <summary>
            Struct represents a Signal, which can used by a external program
            it saves everything about the underlaying property and where to find it, and makes it accessible this way.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Signal.Name">
            <summary>
            Signal name - String which is used to adress the Signal
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Signal.Obj">
            <summary>
            Object, which contains the Signal Property
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Signal.Property">
            <summary>
            Property which can be changed with the signal Name
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Signal.#ctor(System.String,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Sets the struct components.
            </summary>
            <param name="Name">signal name</param>
            <param name="obj">object which contains signal</param>
            <param name="Property">prop</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.TA.Adapter">
            <summary>
            This class allows an external program to set/get specific Signals without knowing the exact infrastructur of the MicroLCSoftware
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.#ctor">
            <summary>
            Constructor of the Adapter class. It makes the handling of Events in COM possible.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.b_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all bool Values
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.i_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all integer Values
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.by_buffer">
            <summary>
            Buffer for when uLabCar_SetValues is locked - contains all byte Values
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.uint_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all uints
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.d_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all double Values
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.dout_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all DOUT_VALUEs 
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.pwmMode_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all PWMorSentModes 
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.string_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all Strings 
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.outputLevel_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all Outputlevels
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.id_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all IdFormats
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.sensor_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all CrankshaftSensorTypes
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.sentSensor_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all SentSensorTypes
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.resistor_buffer">
            <summary>
            Buffer for when microLC_SetValues is locked - contains all PWM_INResistorStates
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.msgType_buffer">
            <summary>
            Buffer for when the microLC_SetValues is locked - contains all MSG_TYPEs
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.graph_buffer">
            <summary>
            Buffer for when the microLC_SetValues is locked - contains all CYLINDERPRESSURE_GRAPHs
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.calib_buffer">
            <summary>
            Buffer for when the microLC_SetValues is locked - contains all ADC_Calibration_Modes
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.i16_buffer">
            <summary>
            Buffer for when the microLC_SetValues is locked - contains all shorts
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.index">
            <summary>
            Holds the information about what device has which index.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.PropertyCache">
            <summary>
            Cache Dict for API Values
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TA.Adapter.asString">
            <summary>
            If the GetValueAsString Method is Called Enums shall be returned as strings instead of numbers
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.GetInitialized">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_Init(System.String)">
            <summary>
            Method which is used to initalize the software
            </summary>
            <param name="path">path to a microLC Project file - null if new Project</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_Init(System.Boolean,System.String)">
            <summary>
            Method which is used to initalize the software with Mockups
            *Mockup - Mockup-Devices are virtual Devices that can be used to test functions without the
            physical presence of a Device.
            </summary>
            <param name="path">path to a microLC Project file - null if new Project</param>
            <param name="mockups">bool to indicate whether mockups should be used or not</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_Init_2(System.Boolean,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.LoadProperties">
            <summary>
            Method to fill the Propertycache with all Properties of the device.
            This has to be in an extra Method, because it has to be done everytime when Properties could have changed.
            e.g. after changing the name of a signal or receiving a CANRxFrame
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.checkLockAndSet``1(``0,bosch.de.abt.beg.microLC.API.TA.Signal,System.Collections.Generic.Dictionary{bosch.de.abt.beg.microLC.API.TA.Signal,``0})">
            <summary>
            Checks if the Lock is set and then either writes the values in their belonging buffer.
            </summary>
            <typeparam name="T">Type of the value to be set</typeparam>
            <param name="value">value to be set</param>
            <param name="sig">signal that the value to be set belongs to</param>
            <param name="dic">hashmap in which the value should be buffered if the lock is set</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_SetValue(System.String,System.Double)">
            <summary>
            Sets a Value by its signal name
            </summary>
            <param name="signalName">name of the signal which should be set</param>
            <param name="doubleValue">value as double 
            ([for dout: 0=Disabled, 1=Enabled, 2=Tristate]
            [for PWMorSentMode: 0=Off, 1=SimplePWM, 2=Complex, 3=Sent]
            [for Outputlevel: 0=Level_12V, 1=Level_5V, 2=Level_0V, 3=Level_OpenDrain, 4=Level_Z_5V, 5=Level_Z_12V, 6=Level_ShutDown, 99=Level_Unexpected]
            [for IdFormat: 0=STANDARD_ID 1=EXTENDED_ID]
            [for CrankshaftSensorType: 0=Hall, 1=Induktiv, 2=DG23i, 3=TL4953]
            [for SentSensorType: Throttle_Position = 0, Mass_Air_Flow_Typ_1 = 1, Mass_Air_Flow_Typ_2 = 2, Mass_Air_Flow_Typ_3 = 3, Single_Secure = 4, Single_Sensors_Typ_1 = 5, Single_Sensors_Typ_2 = 6, Pressure = 7, Pressure_Secure = 8
            [for PWM_INResistorState: PULLUP = 0, PULLDOWN = 1, DISABLED = 2] 
            [for MSG_TYPE: SHORT_8BIT = 0, ENHANCED_12BIT = 1, ENHANCED_16BIT = 2, UNDEFINED = 3]
            [for CYLINDERPRESSURE_GRAPH: COMBUSTION = 0, OVERRUN = 1])
            [for ADC_Calibration_Mode: OffsetCalibration = 0, GainCalibration = 1, UserpageCurrentCalibration = 2, UserpageDefaultCalibration = 3, FactoryDefaultCalibration = 4, InternCalibration = 5]</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.SetCylinderSignalPattern(bosch.de.abt.beg.microLC.API.TA.Signal,System.Byte)">
            <summary>
            Special Method to handle setting of distinct bytes for SignalPatterns in the CylinderPressure
            </summary>
            <param name="sig">Signal</param>
            <param name="byValue">Value to be set</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_SetValueAsString(System.String,System.String)">
            <summary>
            Sets a Value by its signal name
            </summary>
            <param name="signalName">name of the signal which should be set</param>
            <param name="value">value as string</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_GetValue(System.String)">
            <summary>
            Returns the Value of a Signal.
            </summary>
            <param name="signalName">name of the signal which should be returned</param>
            <returns>Value of the Signal (For Enums the same as at SetValue + PWM_INResistorState: 3 = TIMEOUT, 4 = UNDEFINED)</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_GetValueAsString(System.String)">
            <summary>
            Returns the Value of a Signal as String;
            </summary>
            <param name="signalName">name of the signal which should be returned</param>
            <returns>The value of a Signal as string</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_CheckValue(System.String,System.Double)">
            <summary>
            Is used to check the Values
            </summary>
            <param name="signalName">name of the signal which should be returned</param>
            <param name="doubleValue">value as double</param>
            <returns>true= the values match, false= the values don't match</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_SetLocked(System.Boolean)">
            <summary>
            Locks or unlocks microLC_SetValue
            true    --> All values set from this point on will be buffered
            false   --> All buffered values are getting sent to the device (changes made to CANTxFrames are applied all at once)
                        All values set from this point on will be directly sent to the device    
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.releaseAll">
            <summary>
            Reads everything from the buffers and sets all of the values; Then it clears the buffers.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.releaseThis``1(System.Collections.Generic.Dictionary{bosch.de.abt.beg.microLC.API.TA.Signal,``0})">
            <summary>
            Release All values that are saved in the given buffer.
            </summary>
            <typeparam name="T">Type of the buffered values</typeparam>
            <param name="buffer">buffer that holds the values</param>
            <returns>error message if an exception of type TargetInvocationException occures.</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_Exit">
            <summary>
            Procedure which is called to exit the software
            It clears all buffers, so Locked Values will be lost forever, if not released before
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_Reset">
            <summary>
            Should be called when the API is blocked by another program and can't be closed 
            or if it's blocked even though there is no other program using it.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.clearAllBuffers">
            <summary>
            This Method clears all buffers. This has to be used after releasing all bufferd values, to not set them more than once.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.microLC_SaveProject(System.String)">
            <summary>
            Saves the changes that have been made in the Project
            </summary>
            <param name="path">path to where the project is to be saved</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.GetAllSignalNames">
            <summary>
            Retruns all possible signal names, which can be used
            </summary>
            <returns>List of all signal names</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.GetAllSignalnamesCOM">
            <summary>
            Returns all possible signal names, which can be used in one string
            parted by carriage return
            </summary>
            <returns>String that contains all Signalnames</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.TA.Adapter.SignalnameCount">
            <summary>
            Returns the Number of Signalnames. This is necessary for COM, since COM can't use the Method GetAllSignalNames().
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.GetSignalnameAt(System.Int32)">
            <summary>
            Returns a signalName at a specific location in the list. This is necessary for COM, since COM can't use the Method GetAllSignalNames().
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.GetThisDeviceIndex(System.String)">
            <summary>
            Returns the index of the given device
            </summary>
            <param name="serial">serial of the searched device</param>
            <returns>index of the device</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.RenameSignal(System.String,System.String)">
            <summary>
            Provides the ability to change a Signalname to a custom Signalname
            </summary>
            <param name="oldSignalName">the original Signalname </param>
            <param name="newName">the custom Signalname (just the name of the Signal without deviceID and Propertyname)</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.GetIFName">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.GetIFClassName">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.GetIFVersion">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.GetHWVersion">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.Adapter.GetHWSerialNumber">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.TA.Adapter.ValueChangedHandler">
            <summary>
            Delegate for the handling of value changed events in the API
            </summary>
            <param name="sender">sender of the event</param>
            <param name="message">message that describes what value was changed</param>
            <param name="value">new value</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.TA.Adapter.SomethingFailedHandler">
            <summary>
            Delegate for the handling of failed events in the API. Are called when something failed, but no Exception was called
            </summary>
            <param name="sender">where did something fail</param>
            <param name="message">message about what went wrong</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.TA.Adapter.ManagerEventHandler">
            <summary>
            Delegate for the handling of events in the MicroLCManager
            </summary>
            <param name="message">what happened</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.TA.Adapter.ValueChanged">
            <summary>
            Event is raised whenever a value of the MicroLC was changed
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.TA.Adapter.FailingEvent">
            <summary>
            Event is raised when a Action failed, but it wasn't necessary to raise an Exception
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.TA.Adapter.ManagerEvent">
            <summary>
            Event is raised when a Event occurs in the Manager.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.TA.IComGenericEventAdapter">
             <summary>
            ONLY NECESSARY FOR USE WITH COM - NOT RECOMMENDED TO USE WITH .NET-API
             USE PUBLIC EVENTS OF THE ADAPTER CLASS INSTEAD
             
             Interface for the handling of Events in COM (only for Events via the generic Interface)
             </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.IComGenericEventAdapter.ValueChanged(System.String,System.String,System.String)">
            <summary>
            This method is called when any value of the microLC has changed
            </summary>
            <param name="sender">in what component did the change occure</param>
            <param name="message">what exactly is the change that was made</param>
            <param name="value">new value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.IComGenericEventAdapter.FailingEvent(System.String,System.String)">
            <summary>
            This method is called when something went wrong but it is not necessary to throw an Exception
            </summary>
            <param name="sender">in what component did the failure occure</param>
            <param name="message">what happend</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TA.IComGenericEventAdapter.ManagerEvent(System.String)">
            <summary>
            This method is called when a Event in the MicroLCManager happend
            </summary>
            <param name="message">What happened</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ADC_Calibration_Mode">
            <summary>
            Possible values the Calibration can be set.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.ADC_Calibration_Mode.OffsetCalibration">
            <summary>
            self explaining? No
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.ADC_Calibration_Mode.GainCalibration">
            <summary>
            
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.ADC_Calibration_Mode.UserpageCurrentCalibration">
            <summary>
            
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.ADC_Calibration_Mode.UserpageDefaultCalibration">
            <summary>
            
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.ADC_Calibration_Mode.FactoryDefaultCalibration">
            <summary>
            
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.ADC_Calibration_Mode.InternCalibration">
            <summary>
            
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ADC_IF">
            <summary>
            Default interface of ADC class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.Value">
            <summary>
            When a translator function is assigned this represents the physical value of the component otherwise this is the electrical value.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.ElectricalValue">
            <summary>
            The coresspondending electrical value. Is equal with the Value, when no function is assigned.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.Unit">
            <summary>
            Unit of the mapped physical value. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.ErrormodeActive">
            <summary>
            When the Errormode is active the User is able to set Values less and greater than the minimum and maximum value.
            The electrical Value will set to a coresspondending value defined in the translator function or the minimum or maximum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.MinValue">
            <summary>
            Minimum possible physical Value - if no translator function is assigned minimum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.MaxValue">
            <summary>
            Maximum possible physical Value - if no translator function is assigned maximum electrical value
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ADC_IF.AssignTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            Assigns a matching translator function
            </summary>
            <param name="translatorFunction">translator function, which should be assigned</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ADC_IF.UnassignTranslatorFunction">
            <summary>
            Unassigns a Translatorfunction. Does nothing, when no function is assigned.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ADC_IF.GetTranslatorFunction">
            <summary>
            Returns the assigned translator function. Returns null if no Translatorfucntion is assigned.
            </summary>
            <returns>assigned translator function</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.Name">
            <summary>
            The Property Name represents the Label of the Hardware ADC and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.Active">
            <summary>
            The Property Active shows if the ADc is Enabled. If it is not enabled no ValuesRefreshed Event is thrown.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.CalibrationMode">
            <summary>
            Calibration methods handles different calibration options.
            The calibration option, can be:
            0 = Offset calibration, 
            1 = Gain calibration, 
            2 = Userpage current calibration, 
            3 = Userpage default calibration, 
            4 = Factory default calibration, 
            5 = Intern calibration (Offset and Gain)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.Calibration">
            <summary>
            Calibration methods handles different calibration options.
            The calibration option, can be:
            0 = Offset calibration, 
            1 = Gain calibration, 
            2 = Userpage current calibration, 
            3 = Userpage default calibration, 
            4 = Factory default calibration, 
            5 = Intern calibration (Offset and Gain)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC_IF.GainVoltage">
            <summary>
            The Property GainVoltage represents the gain Voltage in the Device it can be set for Calibration.
            Calibrate with 20V to 40V and set Calibration to 1 before setting the gain voltage
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ADC">
            <summary>
            This class represents a ADC. With the functions and Propertys in this class the user is able to calibrate the Hardware ADC.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ADC.ValuesRefreshHandler">
            <summary>
            A delegate of this type can be added to the ADC and will be called, when a new Measurement is done.
            </summary>
            <param name="sender"> adc which is measured</param>
            <param name="value"> measured value of the adc</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ADC.ValuesRefreshed">
            <summary>
            This event is fired, when the ADC has received a new measured value
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ADC.GainReceived">
            <summary>
            
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.Name">
            <summary>
            The Property Name represents the Label of the Hardware ADC and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.Active">
            <summary>
            The Property Active shows if the ADc is Enabled. If it is not enabled no ValuesRefreshed Event is thrown.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ADC.FromEvent(bosch.de.abt.beg.microLC.API.ADC)">
            <summary>
            Creates an Task, which allows to wait for the end of a Event.
            </summary>
            <param name="obj">instance of ADC</param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ADC.FromElectricEvent(bosch.de.abt.beg.microLC.API.ADC)">
            <summary>
            Creates an Task, which allows to wait for the end of a Event.
            </summary>
            <param name="obj">instance of ADC</param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ADC.RefreshValue(System.Int32)">
            <summary>
            Temporarily activates the ADC and waits for a fresh value.
            </summary>
            <param name="timeout">The amount of ms the function will wait for a fresh value.</param>
            <returns>True iff a fresh value was received.</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.Value">
            <summary>
            The Property Value asks the Hardware to send a new ADC value, waits for the value and Returns it. (Could Timeout)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.ElectricalValue">
            <summary>
            When a translator function is assigned this represents the physical value of the component otherwise this is the electrical value.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ADC.GetTranslator">
            <summary>
            Returns the currently assigned Translator
            </summary>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.Unit">
            <summary>
            The unit of the physical Value
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ADC.AssignTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            Assigns a matching translator function to the ADC Signal
            </summary>
            <param name="translatorFunction">translator function, which should be assigned</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ADC.UnassignTranslatorFunction">
            <summary>
            Unassigns a Translatorfunction. Does nothing, when no function is assigned.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ADC.GetTranslatorFunction">
            <summary>
            Returns the assigned translator function. Returns null if no Translatorfunction is assigned.
            </summary>
            <returns>assigned translator function</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.ErrormodeActive">
            <summary>
            When the Errormode is active the User is able to set Values less and greater than the minimum and maximum value.
            For ADC The Errormode has no effect.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.MinValue">
            <summary>
            Minimum possible physical Value - if no translator function is assigned minimum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.MaxValue">
            <summary>
            Maximum possible physical Value - if no translator function is assigned maximum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.TranslatorId">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.CalibrationMode">
            <summary>
            Calibration methods handles different calibration options.
            The calibration option, can be:
            0 = Offset calibration, 
            1 = Gain calibration, 
            2 = Userpage current calibration, 
            3 = Userpage default calibration, 
            4 = Factory default calibration, 
            5 = Intern calibration (Offset and Gain) 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.Calibration">
            <summary>
            Calibration methods handles different calibration options.
            The calibration option, can be:
            0 = Offset calibration, 
            1 = Gain calibration, 
            2 = Userpage current calibration, 
            3 = Userpage default calibration, 
            4 = Factory default calibration, 
            5 = Intern calibration (Offset and Gain) 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ADC.GainVoltage">
            <summary>
            The Property GainVoltage represents the gain Voltage in the Device it can be set for Calibration.
            Calibrate with 20V to 40V and set Calibration to 1 before setting the gain voltage
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CAN.ICANChannel">
            <summary>
            Default interface of Channel class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.Name">
            <summary>
            The Property Name represents the Label of the Hardware Channel and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.Active">
            <summary>
            The Property Active shows if the Channel is Enabled. If it is not enabled no MessageReceived Event is thrown.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.LastReceivedFrame">
            <summary>
            The Property LastReceivedFrame returns the last Frame this Channel has received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.FramesCOM">
            <summary>
            Access to the TxFrames via the generic interface
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.GenerateFrame">
            <summary>
            Creates a CANTxFrame with the next index.
            </summary>
            <returns>The generated TxFrame</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.GenerateFrames">
            <summary>
            Property for Generating new Frames, the given value sets the count of Frames to be created.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.GetTxFrameAt(System.Int32)">
            <summary>
            Method to get TxFrames via COM
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.TxFrameCount">
            <summary>
            Property to get the count of existing CANTxFrames in this CANChannel
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.SetBaudrate(System.Double,System.Boolean)">
            <summary>
            Set the baudrate to desired value
            </summary>
            <param name="baudRate">Baudrate in kBaud</param>
            <param name="use3SampleMode">true if 3-Sample mode should be used</param>
            <returns>True if success</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.SetResistor(System.Boolean)">
            <summary>
            Sets the resistor of the current CAN channel in regard of the given paramater
            </summary>
            <param name="state">True activates, false deactivates resistor of current CAN channel</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.ICANChannel.GetResistor">
            <summary>
            Returns the current resistor state of the current CAN channel
            </summary>
            <returns>True means activated, false means deactivated</returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CAN.Channel">
            <summary>
            This class represents a CANChannel. 
            With the functions and Propertys in this class the user is able to send Messages over the CAN.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CAN.Channel.MessageReceivedHandler">
            <summary>
            A delegate of this type can be added to the Channel and will be called, when a new Message is received
            </summary>
            <param name="value"> Received Frame </param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CAN.Channel.ActiveChangedHandler">
            <summary>
            A delegate of this type can be added to the Channel and will be called, when the activeState of the channel has changed.
            </summary>
            <param name="active">shows whether the Channel is active or not</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.CAN.Channel.MessageReceived">
            <summary>
            This event is fired, when the Channel has received a new message
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.CAN.Channel.ActiveChanged">
            <summary>
            This event is fired, when the ActiveState of the Channel has changed
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.Channel.Active">
            <summary>
            Indicates whether the Channel is Active or not (whether it is receiving/sending Messages or not)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.Channel.LastReceivedFrame">
            <summary>
            Returns the last Frame received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.Channel.ReceivedFrames">
            <summary>
            Returns a List of the last 20 received Frames, those can be accessed then via the generic Interface 
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.Channel.ShowConfiguredTxFrames">
            <summary>
            Method to get all already existent CANTxFrames 
            e.g. if a Project-File was read in
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.Channel.Frames">
            <summary>
            Access to the TxFrames via the generic interface
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.Channel.FramesCOM">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.Channel.GenerateFrame">
            <summary>
            Creates a CANTxFrame with the next index.
            </summary>
            <returns>The generated TxFrame</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.Channel.ChangeFrame(bosch.de.abt.beg.microLC.API.CAN.TxFrame)">
            <summary>
            Sets the changed values of a CANTxFrame.
            </summary>
            <param name="frame">the changed TxFrame</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.Channel.RemoveFrame(bosch.de.abt.beg.microLC.API.CAN.TxFrame)">
            <summary>
            Deletes a CANTxFrame from the Channel.
            </summary>
            <param name="frame">The TxFrame to delete</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.Channel.TransmitMessageFrequently(System.Int32)">
            <summary>
            Transmit a CAN TxFrame Frequently
            </summary>
            <param name="frameIndex">index of the Frame to Transmit</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.Channel.StopTransmitMessageFrequently(System.Int32)">
            <summary>
            Stops transmitting a TxFrame Frequently
            </summary>
            <param name="frameIndex">Index of the Frame that should not be transmitted anymore</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.Channel.GenerateFrames">
            <summary>
            Property for Generating new Frames, the given value sets the count of Frames to be created.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.Channel.DeleteFrame">
            <summary>
            Property to remove a TxFrame from the channel.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.Channel.ApplyChangesToFrame">
            <summary>
            Property to apply the changes that are made to a TxFrame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.Channel.Name">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.Channel.HardwareId">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.Channel.GetTxFrameAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.Channel.TxFrameCount">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.Channel.SetBaudrate(System.Double,System.Boolean)">
            <summary>
            Set the baudrate to desired value
            </summary>
            <param name="baudRate">Baudrate in kBaud</param>
            <param name="use3SampleMode">true if 3-Sample mode should be used</param>
            <returns>True if success</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.Channel.SetResistor(System.Boolean)">
            <summary>
            Sets the resistor of the current CAN channel in regard of the given paramater
            </summary>
            <param name="state">True activates, false deactivates resistor of current CAN channel</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.CAN.Channel.GetResistor">
            <summary>
            Returns the current resistor state of the current CAN channel
            </summary>
            <returns>True means activated, false means deactivated</returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CAN.IDFormat">
            <summary>
            The possible Identifier Types for Data, or Remote Frames
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CAN.IDFormat.STANDARD_ID">
            <summary>
            Standard Identifier.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CAN.IDFormat.EXTENDED_ID">
            <summary>
            Extended Identifier
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame">
            <summary>
            Default interface of TxFrame class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Index">
            <summary>
            Index the Frame has under all the Frames of a channel.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.FrameIdentifier">
            <summary>
            The Identifier of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Identifier">
            <summary>
            The Identifier of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Cycletime">
            <summary>
            The Cycle Time of this Message in Miliseconds.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.IdFormat">
            <summary>
            The Format of this Frames identifier (Standard or Extended)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.FrameIdFormat">
            <summary>
            The Format of this Frames identifier (Standard or Extended)
            0 = STANDARD_ID, 1 = EXTENDED_ID
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.DataLength">
            <summary>
            Gives the Payloadlenght. Has to be set before the actual Payload is set.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Data_1">
            <summary>
            First Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Data_2">
            <summary>
            Second Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Data_3">
            <summary>
            Third Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Data_4">
            <summary>
            Fourth Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Data_5">
            <summary>
            Fivth Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Data_6">
            <summary>
            Sixth Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Data_7">
            <summary>
            Seventh Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Data_8">
            <summary>
            Eighth Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Enabled">
            <summary>
            Bool which indicates if this Frame is currently send frequently
            through setting it true or false, the TransmitMessageFrequently Method of Channel is called
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Delete">
            <summary>
            Bool which indicates if this Frame should be Deleted
            Default is false, if it is set to true the frame will be deleted
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.Change">
            <summary>
            Bool which indicates if the made Changes should be applied to the Frame
            Default is false, if it is set to true the changes will be applied once
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.ApplyChangesImmediately">
            <summary>
            If this Property is set to true, there is no need to call Change after a change,
            because all changes are applied to the frame in the moment they are made.
            If this Property is set to false, you have to call Change to make a change operative on the µLC
            
            This Property is standard set to true and has to be changed if needed otherwise
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANTxFrame.SendThisFrameOnce">
            <summary>
            When this Property is set to true, the frame is sent exactly once.
            Else nothing happens.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CAN.TxFrame">
            <summary>
            This class represents a Message of CAN which is sent. 
            With the functions and Propertys in this class the user is able to set the bytes and the Identifier of the Message. 
            Also they're able to send a Message frequently.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Index">
            <summary>
            Index the Frame has under all the Frames of a channel.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.FrameIdentifier">
            <summary>
            The Identifier of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Identifier">
            <summary>
            The Identifier of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Cycletime">
            <summary>
            The Cycle Time of this Message in Miliseconds.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.IdFormat">
            <summary>
            The Format of this Frames identifier (Standard or Extended)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.FrameIdFormat">
            <summary>
            The Format of this Frames identifier (Standard or Extended)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.DataLength">
            <summary>
            Gives the Payloadlength. Has to be set before the actual Payload is set.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Data_1">
            <summary>
            First Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Data_2">
            <summary>
            Second Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Data_3">
            <summary>
            Third Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Data_4">
            <summary>
            Fourth Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Data_5">
            <summary>
            Fifth Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Data_6">
            <summary>
            Sixth Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Data_7">
            <summary>
            Seventh Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Data_8">
            <summary>
            Eighth Byte of the Payload of this CAN Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Enabled">
            <summary>
            Bool which indicates if this Frame is currently send frequently
            through setting it true or false, the TransmitMessageFrequently Method of Channel is called
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.ApplyChangesImmediately">
            <summary>
            If this Property is set to true, there is no need to call Change after a change,
            because all changes are applied to the frame in the moment they are made.
            If this Property is set to false, you have to call Change to make a change operative on the µLC
            
            This Property is standard set to true and has to be changed if needed otherwise
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Change">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.Delete">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.TxFrame.SendThisFrameOnce">
            <summary>
            When this Property is set to true, the frame is sent exactly once.
            Else nothing happens
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame">
            <summary>
            Default interface of RxFrame class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.ReceiveTime">
            <summary>
            Time at which the Frame was received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Time">
            <summary>
            Time at which the Frame was received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.LastOccurence">
            <summary>
            The last time this Frame was received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.TimeDiffrenceToPredecessor">
            <summary>
            The Time difference to the last event that was raised
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.TimeDiffToPredecessor">
            <summary>
            The Time difference to the last event that was raised
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.TypeAsString">
            <summary>
            The Type of the received Frame as String
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Name">
            <summary>
            The Name of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.FrameIdentifier">
            <summary>
            The Identifier of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Identifier">
            <summary>
            The Identifier of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.IdFormat">
            <summary>
            The IdFormat of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.FrameIdFormat">
            <summary>
            The IdFormat of the received Frame
            0 = STANDARD_ID, 1 = EXTENDED_ID
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.DataLength">
            <summary>
            The Datalength of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Direction">
            <summary>
            The Direction of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.AllData">
            <summary>
            Payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Data_1">
            <summary>
            First byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Data_2">
            <summary>
            Second byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Data_3">
            <summary>
            Third byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Data_4">
            <summary>
            Fourth byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Data_5">
            <summary>
            Fivth byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Data_6">
            <summary>
            Sixth byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Data_7">
            <summary>
            Seventh byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.ICANRxFrame.Data_8">
            <summary>
            Eighth byte of the payload of the received Frame
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CAN.RxFrame">
            <summary>
            Represents a CANRxFrame that was received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.ReceiveTime">
            <summary>
            Time at which the Frame was received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Time">
            <summary>
            Time at which the Frame was received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.LastOccurence">
            <summary>
            The last time this Frame was received
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.TimeDiffrenceToPredecessor">
            <summary>
            The Time difference to the last event that was raised
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.TimeDiffToPredecessor">
            <summary>
            The Time difference to the last event that was raised
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.TypeAsString">
            <summary>
            The Type of the received Frame as String
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Name">
            <summary>
            The Name of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.FrameIdentifier">
            <summary>
            The Identifier of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Identifier">
            <summary>
            The Identifier of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.IdFormat">
            <summary>
            The IdFormat of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.FrameIdFormat">
            <summary>
            The IdFormat of the received Frame
            0 = STANDARD_ID, 1 = EXTENDED_ID
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.DataLength">
            <summary>
            The Datalength of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Direction">
            <summary>
            The Direction of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.AllData">
            <summary>
            Payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Data_1">
            <summary>
            First byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Data_2">
            <summary>
            Second Byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Data_3">
            <summary>
            Third byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Data_4">
            <summary>
            Fourth byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Data_5">
            <summary>
            Fivth byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Data_6">
            <summary>
            Sixth byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Data_7">
            <summary>
            Seventh byte of the payload of the received Frame
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.CAN.RxFrame.Data_8">
            <summary>
            Eighth byte of the payload of the received Frame
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.DAC_IF">
            <summary>
            Default interface for the DAC component, specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.Value">
            <summary>
            When a translator function is assigned this represents the physical value of the component otherwise this is the electrical value.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.ElectricalValue">
            <summary>
            The coresspondending electrical value. Is equal with the Value, when no function is assigned.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.Unit">
            <summary>
            Unit of the mapped physical value. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.ErrormodeActive">
            <summary>
            When the Errormode is active the User is able to set Values less and greater than the minimum and maximum value.
            The electrical Value will set to a coresspondending value defined in the translator function or the minimum or maximum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.MinValue">
            <summary>
            Minimum possible physical Value - if no translator function is assigned minimum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.MaxValue">
            <summary>
            Maximum possible physical Value - if no translator function is assigned maximum electrical value
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DAC_IF.AssignTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            Assigns a matching translator function
            </summary>
            <param name="translatorFunction">translator function, which should be assigned</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DAC_IF.UnassignTranslatorFunction">
            <summary>
            Unassigns a Translatorfunction. Does nothing, when no function is assigned.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DAC_IF.GetTranslatorFunction">
            <summary>
            Returns the assigned translator function. Returns null if no Translatorfucntion is assigned.
            </summary>
            <returns>assigned translator function</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.Name">
            <summary>
            The Property Name represents the Label of the Hardware DAC and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.LoadLastCalibration">
            <summary>
            Resets the calibration of the current device to the last saved calibration.
            MAKE SURE NO TRANSLATORFUNCTION IS ASSIGNED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.LoadFactoryCalibration">
            <summary>
            Resets the calibration of the current device to factory defaults.
            MAKE SURE NO TRANSLATORFUNCTION IS ASSIGNED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.StoreCurrentCalibration">
             <summary>
             Saves the calibration permanently to the current device.
            MAKE SURE NO TRANSLATORFUNCTION IS ASSIGNED
             </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.GainCalibration">
            <summary>
            Set the Calbration-Gain only if an object is dac_0, dac_1, dac_2 or dac_3.
            dac_0 and dac_1 are linked also dac_2 and dac_3 are linked
            The value for the calibration.
            MAKE SURE NO TRANSLATORFUNCTION IS ASSIGNED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC_IF.OffsetCalibration">
            <summary>
            Set the Calbration-Offset only if an object is dac_0, dac_1, dac_2 or dac_3.
            dac_0 and dac_1 are linked also dac_2 and dac_3 are linked
            The value for the calibration.
            MAKE SURE NO TRANSLATORFUNCTION IS ASSIGNED
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.DAC">
            <summary>
            This class represents a DAC. With the functions and Propertys in this class the user is able to calibrate the Hardware DAC.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.DAC.DACChanged`1">
            <summary>
            This Handler can be applied to the DAC and is called whenever a value of the DAC has changed. 
            </summary>
            <typeparam name="T">Type of the changed Value</typeparam>
            <param name="sender">source of the event</param>
            <param name="value">changed value</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.DAC.EnableStateChanged">
            <summary>
            Event is raised when the DAC is enabled or disabled
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.DAC.DACValueChanged">
            <summary>
            Event is raised when the value of the DAC has changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.Name">
            <summary>
            The Property Name represents the Label of the Hardware DAC and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.Value">
            <summary>
            The Property value represents the output value of the DAC. It can be set within the borders of GetMinValue() and GetMaxValue();
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.MinValue">
            <summary>
            This Property is the minimal possible Value, which can be set to the DAC. There can be only a value smaller than the MinValue, if the Errormode is active.
            </summary>
            <returns>minimal value of the DAC</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.MaxValue">
            <summary>
            This Property is the maximal possible Value, which can be set to the DAC. Setting of this property is not possible.
            </summary>
            <returns>maximal value of the DAC</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.ElectricalValue">
            <summary>
            Returns the electrical value of the DAC component. If the Errormode is active the electrical Value 
            can be set, too. Values lower and higher the maximum possible electrical value will be automaticly 
            set to the lowest or highest possible value.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.Unit">
            <summary>
            Readonly Property
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DAC.AssignTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            This Method asigns a translator function  
            </summary>
            <param name="translatorFunction">The Translatorfunction, which should be assigned to the DAC component.</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DAC.UnassignTranslatorFunction">
            <summary>
            Removes the assigned Translatorfunction from the component.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DAC.GetTranslator">
            <summary>
            Returns the currently assigned Translator
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DAC.GetTranslatorFunction">
            <summary>
            This Methode returns the Translatormethode, which is currently active. 
            If there is no active Translatormethode, this function returns null.
            </summary>
            <returns>The active TranslatorFunction</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.ErrormodeActive">
            <summary>
            With the Attribute ErrormodeActive the user can activate or deactivate the Errormode.
            The ErrorMode allows to use Values smaller or greater then the normal range. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.OffsetCalibration">
            <summary>
            Set the Calbration-Offset only if an object is dac_0, dac_1, dac_2 or dac_3.
            dac_0 and dac_1 are linked also dac_2 and dac_3 are linked
            The value for the calibration.
            MAKE SURE NO TRANSLATORFUNCTION IS ASSIGNED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.GainCalibration">
            <summary>
            Set the Calbration-Gain only if an object is dac_0, dac_1, dac_2 or dac_3.
            dac_0 and dac_1 are linked also dac_2 and dac_3 are linked
            The value for the calibration.
            MAKE SURE NO TRANSLATORFUNCTION IS ASSIGNED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.StoreCurrentCalibration">
            <summary>
            Saves the calibration permanently to the current device.
            MAKE SURE NO TRANSLATORFUNCTION IS ASSIGNED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.LoadFactoryCalibration">
            <summary>
            Resets the calibration of the current device to factory defaults.
            MAKE SURE NO TRANSLATORFUNCTION IS ASSIGNED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.LoadLastCalibration">
            <summary>
            Resets the calibration of the current device to the last saved calibration.
            MAKE SURE NO TRANSLATORFUNCTION IS ASSIGNED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DAC.TranslatorId">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.DEVICE_STATE">
            <summary>
            Enum, which describes the possible states of the Hardware device
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.DEVICE_STATE.READY">
            <summary>
            Possible State of the Hardware - hardware is ready
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.DEVICE_STATE.BUSY">
            <summary>
            Possible State of the Hardware - hardware is in use, is busy
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.DEVICE_STATE.DISCONNECTED">
            <summary>
            Possible State of the Hardware - hardware is disconnected / connection losr
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.DEVICE_STATE.RECONNECTED">
            <summary>
            Possible State of the Hardware - hardware is reconnection / connection is again established
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.DEVICE_STATE.ERROR">
            <summary>
            Possible State of the Hardware - hardware has an unspecified error
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IDevice2">
            <summary>
            Default interface of the device (after the implementation of CAN), specifies which functions are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.CANChannelsCOM">
            <summary>
            Returns a list of all available CANChannels on this device
            </summary>
            <returns>list of all available CANChannels</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetCANChannelAt(System.Int32)">
            <summary>
            Returns a specific CANChannel of the device
            </summary>
            <param name="index">index of the specific CANChannel</param>
            <returns>CANChannel with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.CANChannelCount">
            <summary>
            Returns the numbers of available CANChannels on this device
            </summary>
            <returns>number of CANChannels</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetCANChannelByName(System.String)">
            <summary>
            Returns a specific CANChannel with the params label.
            </summary>
            <param name="name">label of a specific CANChannel</param>
            <returns>CANChannel with the specific label</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.IsExpansion">
            <summary>
            Returns true if the device is an expansionboard.
            </summary>
            <returns>bool, true when the device is an Expansionboard</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.Serial">
            <summary>
            This Property returns the serial number of the device
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.FirmwareId">
            <summary>
            This Property returns the firmware id of the device
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.Softwareversion">
            <summary>
            This Property returns the Versionnumber of the MicroLC_Software_API.dll
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.IsVirtual">
            <summary>
            Property returns true if the device is virtual
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.Type">
            <summary>
            Property returns the type of the device
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.RelaysCOM">
            <summary>
            Returns a list of all available Relais on this device
            </summary>
            <returns>list of all available Relais</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetRelayAt(System.Int32)">
            <summary>
            Returns a specific Relays of the device
            </summary>
            <param name="index">index of the specific Relay</param>
            <returns>Relay with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.RelayCount">
            <summary>
            Returns the numbers of available Relays on this device
            </summary>
            <returns>number of relays</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.RelaySound">
            <summary>
            Returns the numbers of available Relays on this device
            </summary>
            <returns>number of relays</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetRelayByName(System.String)">
            <summary>
            Returns a specific Relay with the params label.
            </summary>
            <param name="name">label of a specific relay</param>
            <returns>Relay with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.ResolversCOM">
            <summary>
            For use with COM
            Returns list of all Resolvers
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetResolverAt(System.Int32)">
            <summary>
            Returns a specific Resolver of the device
            </summary>
            <param name="index">index of the specific Resolver</param>
            <returns>Resolver with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.ResolverCount">
            <summary>
            Returns a count of Resolvers
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetResolverByName(System.String)">
            <summary>
            Returns a specific Resolver with the params label.
            </summary>
            <param name="name">label of a specific Resolver</param>
            <returns>Resolver with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.InjectionCapture">
            <summary>
            Returns the InjectionCapture on this device.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.Manipulation">
            <summary>
            Returns the Manipulation on this device.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.DOUTsCOM">
            <summary>
            Returns a list of all available digital outputs on this device
            </summary>
            <returns>list of all available digital outputs</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetDOUTAt(System.Int32)">
            <summary>
            Returns a specific digital output off the device
            </summary>
            <param name="index">index of the specific digital output</param>
            <returns>digital output with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.DOUTCount">
            <summary>
            Returns the numbers of available digital outputs on this device
            </summary>
            <returns>number of digital outputs</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetDOUTByName(System.String)">
            <summary>
            Returns a specific digital output with the params label.
            </summary>
            <param name="name">label of a specific digital output</param>
            <returns>Relay with the specific digital output</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetMultiDOUTEnabled(System.Collections.Generic.List{System.Int32})">
            <summary>
            Set multiple Douts enabled.
            </summary>
            <param name="douts">list of douts, getting enabled</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetMultiDOUTDisabled(System.Collections.Generic.List{System.Int32})">
            <summary>
            Set multiple Douts disabled.
            </summary>
            <param name="douts">list of douts, getting disabled</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetMultiDOUTTristate(System.Collections.Generic.List{System.Int32})">
            <summary>
            Set multiple Douts tristate.
            </summary>
            <param name="douts">list of douts, getting tristate</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetDOUTStatesAll(System.Int32)">
            <summary>
            Set the state of all Douts 
            </summary>
            <param name="state">State all Douts will have. 0 for disabled, 1 for enabled and 2 for tristate.</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetDOUTVoltagesAll(System.Int32)">
            <summary>
            Set the voltage of all Douts
            </summary>
            <param name="voltage">Voltage all Douts will have. 0 for 12V and 1 for UBAT.</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetDOUTVoltages(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Set multiple Douts to desired voltages.
            </summary>
            <param name="voltages">Dictionary of all douts and their voltage states. 
            First param: dout index
            Second Param: voltage state. 0 for 12V, 1 for UBAT</param>
            
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetDOUTVoltages(System.String)">
            <summary>
            Set multiple Dout voltages to desired states.
            </summary>
            <param name="jsonDict">Json string of dout index and target voltage.
            Target state must be the index of a valid Dout value: 0 = 12V, 1 = UBAT.
            Json string has form:
            string jsonDict = "{
            index1: targetState1,
            index2: targetState2
             }"
             Example:
             SetDOUTStates("{0:1,1:1,0:0}")
             or
             SetDOUTStates(jsonDict)
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetDOUTStates(System.String)">
            <summary>
            Set multiple Douts to desired states.
            </summary>
            <param name="jsonDict">Json string of dout index and target state.
            Target state must be the index of a valid Dout value: 0 = DISABLED, 1 = ENABLED, 2 = TRISTATE.
            Json string has form:
            string jsonDict = "{
            index1: targetState1,
            index2: targetState2
             }"
             Example:
             SetDOUTStates("{0:2,1:1,0:0}")
             or
             SetDOUTStates(jsonDict)
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetMultiDOUTState(System.Collections.Generic.Dictionary{System.Int32,bosch.de.abt.beg.microLC.API.DOUT_VALUE})">
            <summary>
            Set multiple Douts to custom states.
            </summary>
            <param name="douts">dictionary of dout index and target state</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.PWMorSentsCOM">
            <summary>
            Returns a list of all available pwm/sent outputs on this device
            </summary>
            <returns>list of all available pwm/sent outputs</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetDOUTStates(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Sets the states of multiple Douts
            </summary>
            <param name="states">Dictionary with the states of all douts.
            First Param: dout index
            Second Param: state of the dout. 0 for OFF, 1 for ON and 2 for TRISTATE</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetPWMorSentAt(System.Int32)">
            <summary>
            Returns a pwm/sent output of the device
            </summary>
            <param name="index">index of the specific pwm/sent output</param>
            <returns>pwm/sent output with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.PWMorSentCount">
            <summary>
            Returns the numbers of available pwm/sent outputs on this device
            </summary>
            <returns>number of pwm/sent outputs</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetPWMorSentByName(System.String)">
            <summary>
            Returns a specific pwm/sent outputs with the params label.
            </summary>
            <param name="name">label of a specific pwm/sent output</param>
            <returns>Relay with the specific digital output</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.DACsCOM">
            <summary>
            Returns a list of all available digital analog converter on this device
            </summary>
            <returns>list of all available digital analog converter</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetDACAt(System.Int32)">
            <summary>
            Returns a specific digital analog converter off the device
            </summary>
            <param name="index">index of the specific digital analog converter</param>
            <returns>digital analog converter with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.DACCount">
            <summary>
            Returns the numbers of available digital analog converters on this device
            </summary>
            <returns>number of digital analog converters</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetDACByName(System.String)">
            <summary>
            Returns a specific digital analog converter with the params label.
            </summary>
            <param name="name">label of a specific digital analog converter</param>
            <returns>digital analog converter with the specific label</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetDacMultiChannelValue(System.String)">
            <summary>
            Set the value of multiple DAC channels.
            </summary>
            <param name="jsonDict">Json string of dac index and target value. Target value can be a decimal number.
            Example:
            string jsonDict = "{
            dacindex1 : targetValue1,
            dacindex2 : targetValue2
            }"
             Example: SetDacMultiChannelValue("{0:2.5,1:120.23,0:0}")
             or
             SetDacMultiChannelValue(jsonDict)
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetDacMultiChannelValue(System.Collections.Generic.Dictionary{System.Int32,System.Double})">
            <summary>
            Set the Value of multiple DAC-Channels
            </summary>
            <param name="dict">Dictionary of dac index and target value"</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.RCardsCOM">
            <summary>
            Returns a list of all available RCards on this device
            </summary>
            <returns>list of all available RCards</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.getRCardAt(System.Int32)">
            <summary>
            Returns a specific RCard Channel of the device
            </summary>
            <param name="index">index of the specific RCard Channel</param>
            <returns>RCard Channel with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.RCardCount">
            <summary>
            Returns the numbers of available RCard Channels on this device
            </summary>
            <returns>number of RCards</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetRCardByName(System.String)">
            <summary>
            Returns a specific RCard Channel with the params label.
            </summary>
            <param name="name">label of a specific RCard Channel</param>
            <returns>RCard with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.ADCsCOM">
            <summary>
            Returns a list of all available analog digital converter on this device
            </summary>
            <returns>list of all available analog digital converter</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetADCAt(System.Int32)">
            <summary>
            Returns a specific analog digital converter of the device
            </summary>
            <param name="index">index of the specific analog digital converter</param>
            <returns>analog digital converter with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.ADCCount">
            <summary>
            Returns the RPM Module of the MicroLC
            </summary>
            <returns>RPM Module</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetADCByName(System.String)">
            <summary>
            Returns a specific analog digital converter with the params label.
            </summary>
            <param name="name">label of a specific analog digital converter</param>
            <returns>analog digital converter with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.RPM">
            <summary>
            Returns the RPM Module of the MicroLC
            </summary>
            <returns>RPM Module</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.ThrottleValve">
            <summary>
            Returns the ThrottleValve on this device.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.DACLockfactor">
            <summary>
            This Property stands for the Lockfactor which is used to lock the DAC02 with the DAC01 signal.
            To enable the Lock the Property DACEnabled must be set.
            Only values between 0 and 1 are possible.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.DACLockEnabled">
            <summary>
            This Property locks the DAC02 Signal to the the DAC01 signal. The factor can can be set by the property DACLockfactor
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.ADCMeasurementEnabled">
            <summary>
            With setting this Property the ADc Measurements (true) starts/ stops.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.ADCSamplingRate">
            <summary>
            ADC Sampling Rate
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.SystemUtils">
            <summary>
            retuns the Systemutil Module of the Device
            </summary>
            <returns>SystemUtils</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.PWM_INsCOM">
            <summary>
            Returns a List with all PWM_Ins on this device.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetPWM_INAt(System.Int32)">
            <summary>
            Returns the PWM_IN at the specific index
            </summary>
            <param name="index">index of the pwm_in</param>
            <returns>pwm_in with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.PWM_INCount">
            <summary>
            Returns the count of available pwm_ins
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetPWM_INByName(System.String)">
            <summary>
            Returns the PWM_IN with the specific name.
            </summary>
            <param name="name">Name of the PWM_IN</param>
            <returns>PWM_IN with the name.</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.PWM_INSamplingRate">
            <summary>
            PWM_IN Sampling Rate
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.CylinderPressure">
            <summary>
            Returns the CylinderPressure on this device.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.CurrentLoops">
            <summary>
            Return a list of available currentloops.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.CurrentLoopsCOM">
            <summary>
            For use with COM
            Return a list of available currentloops.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetCurrentLoop(System.Int32)">
            <summary>
            Return a currentLoop object with the specific index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice2.CurrentLoopCount">
            <summary>
            Get the number of all available currentloops.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.GetCurrentLoopByName(System.String)">
            <summary>
            Return currentLoop object with a specific name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetCurrentLoopRotationSpeedMulti(System.Int32,System.String)">
            <summary>
            Set rotation speed for given sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="jsonDict">json String of sensor index and target value
            Takes the form of:
            string jsonDict = "{
            sensor index1 : value1,
            sensor index2 : value2
            }"
             Example: SetCurrentLoopRotationSpeedMulti(3, "{0:2,1:1,0:3}")
             or
             CurrentLoopSetRotationSpeedMulti(3, jsonDict)
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetCurrentLoopRotationSpeedMulti(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Set rotation speed for given sensors
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="dict">Dictionary of sensor index and target value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.CurrentLoopSetRotationSpeedMulti(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Set rotation speed for given sensors
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="dict">Dictionary of sensor index and target value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.CurrentLoopSetRotationSpeedMulti(bosch.de.abt.beg.microLC.API.CurrentLoopSensorType,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Set rotation speed for given sensors
            </summary>
            <param name="sensorType">TS, PWMS, PWMI, AK</param>
            <param name="dict">Dictionary of sensor index and target value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetCurrentLoopActivateSensorsCOM(System.Int32,System.Int32[])">
            <summary>
            Set sensor type and activate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting activated. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetCurrentLoopActivateSensors(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set sensor type and activate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting activated. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.CurrentLoopActivateSensors(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set sensor type and activate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting activated. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetCurrentLoopDeactivateSensorsCOM(System.Int32,System.Int32[])">
            <summary>
            Set sensor type and deactivate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting stopped. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetCurrentLoopDeactivateSensors(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set sensor type and deacitvate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting stopped. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.CurrentLoopDeactivateSensors(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set sensor type and deacitvate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting stopped. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetCurrentLoopTS_EnableStandstillMulti(System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Enables or disables standstill functionality for all TS sensors.
            </summary>
            <param name="sensors">List of sensors getting enabled or disabled. E.g. {0, 1, 3}</param>
            <param name="enableFlag">Flag to enable or disable standstill functionality</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SetCurrentLoopTS_EnableStandstillMultiCOM(System.Int32[],System.Boolean)">
            <summary>
            Enables or disables standstill functionality for all TS sensors.
            </summary>
            <param name="sensors">List of sensors getting enabled or disabled. E.g. {0, 1, 3}</param>
            <param name="enableFlag">Flag to enable or disable standstill functionality</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.CurrentLoopTS_EnableStandstillMulti(System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Enables or disables standstill functionality for all TS sensors.
            </summary>
            <param name="sensors">List of sensors getting enabled or disabled. E.g. {0, 1, 3}</param>
            <param name="enableFlag">Flag to enable or disable standstill functionality</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.CurrentLoopStartMulti(bosch.de.abt.beg.microLC.API.CurrentLoopSensorType,System.Collections.Generic.List{System.Int32})">
            <summary>
            Start simulation of multiple sensors
            </summary>
            <param name="sensorType">TS, PWMS, PWMI, AK</param>
            <param name="sensors">List of sensors getting enabled. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.CurrentLoopEnableMulti(System.Collections.Generic.List{System.Int32})">
            <summary>
            Enable simulation of multiple sensors
             /// </summary>
            <param name="sensors">List of sensors getting enabled. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.FirmwareChangesUpdate">
            <summary>
            Updates the firmware of the device with the selected Serial Number
            If no update is available, for example because the software is not up to date, the user is notified using the FirmwareUpdateNotAvailable Event
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.FirmwareChangesUpdateFromFile(System.String,System.String)">
            <summary>
            Updates the firmware of the device with the selected Serial Number using the hexfile at the specified path. 
            Be careful with this method. Using a bad hexfile can make the device non operational.
            </summary>
            <param name="hexfilePath">Path of the hexfile used for flashing, as string</param>
            <param name="password">Password needed for flashing from File</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.FirmwareChangesErase(System.String)">
            <summary>
            Removes the firmware of the device with the selected Serial Number, bringing it into Bootloader modous
            </summary>
            <param name="password">Password needed for erasing of firmware</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.SendCustomCommand(System.String,System.Byte,System.Byte,System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="modul"></param>
            <param name="command"></param>
            <param name="data"></param>
            <param name="answerExpected"></param>
            <param name="password"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice2.InitializeCustomCommandListener(System.String,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <param name="modul"></param>
            <param name="command"></param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IDevice">
            <summary>
            Default interface of the device, specifies which functions are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.Serial">
            <summary>
            This Property returns the serial number of the device
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.FirmwareId">
            <summary>
            This Property returns the firmware id of the device
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.Softwareversion">
            <summary>
            This Property returns the Versionnumber of the MicroLC_Software_API.dll
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.Type">
            <summary>
            Property returns the type of the device
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.GetRelayAt(System.Int32)">
            <summary>
            Returns a specific Relays of the device
            </summary>
            <param name="index">index of the specific Relay</param>
            <returns>Relay with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.RelayCount">
            <summary>
            Returns the numbers of available Relays on this device
            </summary>
            <returns>number of relays</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.RelaySound">
            <summary>
            Returns the numbers of available Relays on this device
            </summary>
            <returns>number of relays</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.GetRelayByName(System.String)">
            <summary>
            Returns a specific Relay with the params label.
            </summary>
            <param name="name">label of a specific relay</param>
            <returns>Relay with the specific label</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.GetDOUTAt(System.Int32)">
            <summary>
            Returns a specific digital output off the device
            </summary>
            <param name="index">index of the specific digital output</param>
            <returns>digital output with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.DOUTCount">
            <summary>
            Returns the numbers of available digital outputs on this device
            </summary>
            <returns>number of digital outputs</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.GetDOUTByName(System.String)">
            <summary>
            Returns a specific digital output with the params label.
            </summary>
            <param name="name">label of a specific digital output</param>
            <returns>Relay with the specific digital output</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.GetPWMorSentAt(System.Int32)">
            <summary>
            Returns a pwm/sent output of the device
            </summary>
            <param name="index">index of the specific pwm/sent output</param>
            <returns>pwm/sent output with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.PWMorSentCount">
            <summary>
            Returns the numbers of available pwm/sent outputs on this device
            </summary>
            <returns>number of pwm/sent outputs</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.GetPWMorSentByName(System.String)">
            <summary>
            Returns a specific pwm/sent outputs with the params label.
            </summary>
            <param name="name">label of a specific pwm/sent output</param>
            <returns>Relay with the specific digital output</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.GetDACAt(System.Int32)">
            <summary>
            Returns a specific digital analog converter off the device
            </summary>
            <param name="index">index of the specific digital analog converter</param>
            <returns>digital analog converter with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.DACCount">
            <summary>
            Returns the numbers of available digital analog converters on this device
            </summary>
            <returns>number of relays</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.GetDACByName(System.String)">
            <summary>
            Returns a specific digital analog converter with the params label.
            </summary>
            <param name="name">label of a specific digital analog converter</param>
            <returns>digital analog converter with the specific label</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.SetDacMultiChannelValue(System.String)">
            <summary>
            Set the value of multiple DAC channels.
            </summary>
            <param name="jsonDict">Json string of dac index and target value. Target value can be a decimal number.
            Example:
            string jsonDict = "{
            dacindex1 : targetValue1,
            dacindex2 : targetValue2
            }"
             Example: SetDacMultiChannelValue("{0:2.5,1:120.23,0:0}")
             or
             SetDacMultiChannelValue(jsonDict)
            </param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.SetDacMultiChannelValue(System.Collections.Generic.Dictionary{System.Int32,System.Double})">
            <summary>
            Set the Value of multiple DAC-Channels
            </summary>
            <param name="dict">Dictionary of dac index and target value"</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.DACLockfactor">
            <summary>
            This Property stands for the Lockfactor which is used to lock the DAC02 with the DAC01 signal.
            To enable the Lock the Property DACEnabled must be set.
            Only values between 0 and 1 are possible.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.DACLockEnabled">
            <summary>
            This Property locks the DAC02 Signal to the the DAC01 signal. The factor can can be set by the property DACLockfactor
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.GetADCAt(System.Int32)">
            <summary>
            Returns a specific analog digital converter of the device
            </summary>
            <param name="index">index of the specific analog digital converter</param>
            <returns>analog digital converter with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.ADCCount">
            <summary>
            Returns the RPM Module of the MicroLC
            </summary>
            <returns>RPM Module</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDevice.GetADCByName(System.String)">
            <summary>
            Returns a specific analog digital converter with the params label.
            </summary>
            <param name="name">label of a specific analog digital converter</param>
            <returns>analog digital converter with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.ADCMeasurementEnabled">
            <summary>
            With setting this Property the ADc Measurements (true) starts/ stops.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.ADCSamplingRate">
            <summary>
            ADC Sampling Rate
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.RPM">
            <summary>
            Returns the RPM Module of the MicroLC
            </summary>
            <returns>RPM Module</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDevice.CylinderPressure">
            <summary>
            Returns the CylinderPressure Component of the Device
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Device">
            <summary>
            This class represents a physical device. With the functions and properties in this
            class the user is able to calibrate the physical device. With the get-functions of
            this class the user is able to access the different components of the physical device.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Device.DeviceStateChangedHandler">
            <summary>
            A delegate of this type can be added to the Device and will be called, when the hardware state of the device changes.
            </summary>
            <param name="sender">Device, which changed state</param>
            <param name="state">new state of Device</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.Serial">
            <summary>
            This Property returns the serial number of the device
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.FirmwareId">
            <summary>
            This Property returns the firmware id of the device
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.Softwareversion">
            <summary>
            This Property returns the Versionnumber of the MicroLC_Software_API.dll
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.AddDeviceStateChangedEventHandler(bosch.de.abt.beg.microLC.API.Device.DeviceStateChangedHandler)">
            <summary>
            Add a Handler, which reacts on a Hardware state change.
            </summary>
            <param name="handler">Delegate which is called, when hardware state changes</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.RemDeviceStateChangedEventHandler(bosch.de.abt.beg.microLC.API.Device.DeviceStateChangedHandler)">
            <summary>
            Removes a Handler, which reacts on a Hardware state change.
            </summary>
            <param name="handler">Delegate which is called, when hardware state changes</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.IsVirtual">
            <summary>
            Property returns true if the device is virtual
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.IsExpansion">
            <summary>
            Returns true if the device is an expansionboard.
            </summary>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.Type">
            <summary>
            Property returns the type of the device
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.Resolvers">
            <summary>
            Returns a list of all available Resolvers on this device
            </summary>
            <returns>list of all available Resolvers</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.ResolversCOM">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetResolverAt(System.Int32)">
            <summary>
            Returns a specific Resolver of the device
            </summary>
            <param name="index">index of the specific Resolver</param>
            <returns>Resolver with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.ResolverCount">
            <summary>
            Returns a count of Resolvers
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetResolverByName(System.String)">
            <summary>
            Returns a specific Resolver with the params label.
            </summary>
            <param name="name">label of a specific Resolver</param>
            <returns>Resolver with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.InjectionCapture">
            <summary>
            Provides injection capture object
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.Manipulation">
            <summary>
            Provides manipulation object
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.Relays">
            <summary>
            Returns a list of all available Relais on this device
            </summary>
            <returns>list of all available Relais</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.RelaysCOM">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetRelayAt(System.Int32)">
            <summary>
            Returns a specific Relays off the device
            </summary>
            <param name="index">index of the specific Relay</param>
            <returns>Relay with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.RelayCount">
            <summary>
            Returns the numbers of available Relays on this device
            </summary>
            <returns>number of relays</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetRelayByName(System.String)">
            <summary>
            Returns a specific Relay with the params label.
            </summary>
            <param name="name">label of a specific relay</param>
            <returns>Relay with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.RelaySound">
            <summary>
            Activates or deactivates the sound of the Relays if the Relay is a 3.1 or higher
            </summary>
            <param name="value">value if sound is active or not</param>
            <returns>Relay with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.CurrentLimitationEnabled">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.DOUTs">
            <summary>
            Returns a list of all available digital outputs on this device
            </summary>
            <returns>list of all available digital outputs</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.DOUTsCOM">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetDOUTAt(System.Int32)">
            <summary>
            Returns a specific digital output off the device
            </summary>
            <param name="index">index of the specific digital output</param>
            <returns>digital output with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.DOUTCount">
            <summary>
            Returns the numbers of available digital outputs on this device
            </summary>
            <returns>number of digital outputs</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetDOUTByName(System.String)">
            <summary>
            Returns a specific digital output with the params label.
            </summary>
            <param name="name">label of a specific digital output</param>
            <returns>Relay with the specific digital output</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetDOUTStatesAll(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetDOUTVoltagesAll(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetMultiDOUTEnabled(System.Collections.Generic.List{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetMultiDOUTDisabled(System.Collections.Generic.List{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetMultiDOUTTristate(System.Collections.Generic.List{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetDOUTStates(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetMultiDOUTState(System.Collections.Generic.Dictionary{System.Int32,bosch.de.abt.beg.microLC.API.DOUT_VALUE})">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetDOUTStates(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetDOUTVoltages(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetDOUTVoltages(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.PWMorSents">
            <summary>
            Returns a list of all available pwm/sent outputs on this device
            </summary>
            <returns>list of all available pwm/sent outputs</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.PWMorSentsCOM">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetPWMorSentAt(System.Int32)">
            <summary>
            Returns a pwm/sent output off the device
            </summary>
            <param name="index">index of the specific pwm/sent output</param>
            <returns>pwm/sent output with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.PWMorSentCount">
            <summary>
            Returns the numbers of available pwm/sent outputs on this device
            </summary>
            <returns>number of pwm/sent outputs</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetPWMorSentByName(System.String)">
            <summary>
            Returns a specific pwm/sent oiutputs with the params label.
            </summary>
            <param name="name">label of a specific pwm/sent output</param>
            <returns>Relay with the specific digital output</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.CurrentLoops">
            <summary>
            Return a list of available currentloops.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.CurrentLoopsCOM">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetCurrentLoopRotationSpeedMulti(System.Int32,System.String)">
            <inheritdoc />      
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetCurrentLoopRotationSpeedMulti(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Set rotation speed for given sensors
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="dict">Dictionary of sensor index and target value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.CurrentLoopSetRotationSpeedMulti(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Set rotation speed for given sensors
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="dict">Dictionary of sensor index and target value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.CurrentLoopSetRotationSpeedMulti(bosch.de.abt.beg.microLC.API.CurrentLoopSensorType,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Set rotation speed for given sensors
            </summary>
            <param name="sensorType">TS, PWMS, PWMI, AK</param>
            <param name="dict">Dictionary of sensor index and target value</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetCurrentLoopActivateSensors(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set sensor type and activate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting activated. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetCurrentLoopActivateSensorsCOM(System.Int32,System.Int32[])">
            <summary>
            Set sensor type and activate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting activated. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.CurrentLoopActivateSensors(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set sensor type and activate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting activated. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetCurrentLoopDeactivateSensors(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set sensor type and deactivate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting stopped. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetCurrentLoopDeactivateSensorsCOM(System.Int32,System.Int32[])">
            <summary>
            Set sensor type and deactivate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting stopped. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.CurrentLoopDeactivateSensors(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set sensor type and deactivate simulation of multiple sensors.
            </summary>
            <param name="sensorType">TS = 0, PWMS = 1, PWMI = 2, AK = 3</param>
            <param name="sensors">List of sensors getting stopped. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetCurrentLoopTS_EnableStandstillMulti(System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Enables or disables standstill functionality for all TS sensors.
            </summary>
            <param name="sensors">List of sensors getting enabled or disabled. E.g. {0, 1, 3}</param>
            <param name="enableFlag">Flag to enable or disable standstill functionality</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetCurrentLoopTS_EnableStandstillMultiCOM(System.Int32[],System.Boolean)">
            <summary>
            Enables or disables standstill functionality for all TS sensors.
            </summary>
            <param name="sensors">List of sensors getting enabled or disabled. E.g. {0, 1, 3}</param>
            <param name="enableFlag">Flag to enable or disable standstill functionality</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.CurrentLoopTS_EnableStandstillMulti(System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Enables or disables standstill functionality for all TS sensors.
            </summary>
            <param name="sensors">List of sensors getting enabled or disabled. E.g. {0, 1, 3}</param>
            <param name="enableFlag">Flag to enable or disable standstill functionality</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.CurrentLoopStartMulti(bosch.de.abt.beg.microLC.API.CurrentLoopSensorType,System.Collections.Generic.List{System.Int32})">
            <summary>
            Start simulation of multiple sensors
            </summary>
            <param name="sensorType">TS, PWMS, PWMI, AK</param>
            <param name="sensors">List of sensors getting enabled. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.CurrentLoopEnableMulti(System.Collections.Generic.List{System.Int32})">
            <summary>
            Enable simulation of multiple sensors
             /// </summary>
            <param name="sensors">List of sensors getting enabled. E.g. {0, 1, 3}</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetCurrentLoop(System.Int32)">
            <summary>
            Return a currentLoop object with the specific index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.CurrentLoopCount">
            <summary>
            Get the number of all available currentloops.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetCurrentLoopByName(System.String)">
            <summary>
            Return currentLoop object with a specific name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.DACs">
            <summary>
            Returns a list of all available digital analog converter on this device
            </summary>
            <returns>list of all available digital analog converter</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.DACsCOM">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetDACAt(System.Int32)">
            <summary>
            Returns a specific digital analog converter off the device
            </summary>
            <param name="index">index of the specific digital analog converter</param>
            <returns>digital analog converter with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.DACCount">
            <summary>
            Returns the numbers of available digital analog converters on this device
            </summary>
            <returns>number of digital analog converters</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetDACByName(System.String)">
            <summary>
            Returns a specific digital analog converter with the params label.
            </summary>
            <param name="name">label of a specific digital analog converter</param>
            <returns>digital analog converter with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.DACLockfactor">
            <summary>
            This Property stands for the Lockfactor which is used to lock the DAC0 with the DAC1 signal.
            To enable the Lock the Property DACEnabled must be set.
            Only values between 0 and 1 are possible.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.DACLockEnabled">
            <summary>
            This Property locks the DAC1 Signal to the the DAC0 signal. The factor can can be set by the property DACLockfactor
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetDacMultiChannelValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SetDacMultiChannelValue(System.Collections.Generic.Dictionary{System.Int32,System.Double})">
            <summary>
            Set the Value of multiple DAC channels
            </summary>
            <param name="dict">Dictionary of dac index and target value</param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.RCards">
            <summary>
            Returns a list of all available RCards on this device
            </summary>
            <returns>list of all available RCards</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.RCardsCOM">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.getRCardAt(System.Int32)">
            <summary>
            Returns a specific RCard off the device
            </summary>
            <param name="index">index of the specific RCard</param>
            <returns>RCard with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.RCardCount">
            <summary>
            Returns the numbers of available RCards on this device
            </summary>
            <returns>number of RCards</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetRCardByName(System.String)">
            <summary>
            Returns a specific RCard with the params label.
            </summary>
            <param name="name">label of a specific RCard</param>
            <returns>RCard with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.ADCs">
            <summary>
            Returns a list of all available analog digital converter on this device
            </summary>
            <returns>list of all available analog digital converter</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.ADCsCOM">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetADCAt(System.Int32)">
            <summary>
            Returns a specific analog digital converter of the device
            </summary>
            <param name="index">index of the specific analog digital converter</param>
            <returns>analog digital converter with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.RPM">
            <summary>
            Returns the RPM Module of the MicroLC
            </summary>
            <returns>RPM Module</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.ADCCount">
            <summary>
            Returns the numbers of available analog digital converter on this device
            </summary>
            <returns>number of available analog digital converter</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetADCByName(System.String)">
            <summary>
            Returns a specific analog digital converter with the params label.
            </summary>
            <param name="name">label of a specific analog digital converter</param>
            <returns>analog digital converter with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.ADCMeasurementEnabled">
            <summary>
            With setting this Property the ADC Measurements (true) starts/ stops.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.ADCSamplingRate">
            <summary>
            Sets or Gets the SamplingRate for the ADC Value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.SystemUtils">
            <summary>
            Retuns the Systemutil Module of the Device
            </summary>
            <returns>SystemUtils</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.CANChannels">
            <summary>
            Returns a list of all available CANChannels on this device
            </summary>
            <returns>list of all available CANChannels</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.CANChannelsCOM">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetCANChannelAt(System.Int32)">
            <summary>
            Returns a specific CANChannel of the device
            </summary>
            <param name="index">index of the specific CANChannel</param>
            <returns>CANChannel with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.CANChannelCount">
            <summary>
            Returns the numbers of available CANChannels on this device
            </summary>
            <returns>number of CANChannels</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetCANChannelByName(System.String)">
            <summary>
            Returns a specific CANChannel with the params label.
            </summary>
            <param name="name">label of a specific CANChannel</param>
            <returns>CANChannel with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.CANFDChannels">
            <summary>
            Returns a list of all available CAN-FD Channels on this device
            </summary>
            <returns>list of all available CAN-FD Channels</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.CANFDChannelsCOM">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetCANFDChannelAt(System.Int32)">
            <summary>
            Returns a specific CAN-FD Channel of the device
            </summary>
            <param name="index">index of the specific CANChannel</param>
            <returns>CAN-FD Channel with the specific index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.CANFDChannelCount">
            <summary>
            Returns the numbers of available CAN-FD Channels on this device
            </summary>
            <returns>number of CAN-FD Channels</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetCANFDChannelByName(System.String)">
            <summary>
            Returns a specific CANChannel with the params label.
            </summary>
            <param name="name">label of a specific CANChannel</param>
            <returns>CAN-FD Channel with the specific label</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.PWM_INs">
            <summary>
            Returns a List with all PWM_Ins on this device.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.PWM_INsCOM">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetPWM_INAt(System.Int32)">
            <summary>
            Returns a PWM_IN at the specific index.
            </summary>
            <param name="index">index of the PWM_IN</param>
            <returns>PWM_IN with index</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.PWM_INCount">
            <summary>
            Returns the count of PWM_INs on this device.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.GetPWM_INByName(System.String)">
            <summary>
            Returns the PWM_IN with the specific name.
            </summary>
            <param name="name">Name of the PWM_IN</param>
            <returns>PWM_IN with the name.</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.PWM_INSamplingRate">
            <summary>
            PWM_IN Sampling Rate
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.CylinderPressure">
            <summary>
            Returns the CylinderPressure on this device.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.ThrottleValve">
            <summary>
            Returns the ThrottleValve on this device.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.FlexIO">
            <summary>
            Returns the ThrottleValve on this device.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Device.Signals">
            <summary>
            Returns a List of all Signals, which can used by the Adapter
            </summary>
            <returns>List of all Signals </returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.CreateAdditionalSignals(bosch.de.abt.beg.microLC.API.DeviceComponent,System.String,System.Object)">
            <summary>
            Adds Signals that are not direct children of DeviceComponent, but depending classes.
            This is necessary for Complex Signals where some values can't be handled in one class.
            </summary>
            <param name="component">DeviceComponent with which the new Signal is linked</param>
            <param name="name">Signalname to which the Propertyname will be added</param>
            <param name="signalObj">Object of the new Signal</param>
            <returns>A List of new Signals (Signal + Property)</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.DeinitializeDevice">
            <summary>
            Sets the references to every Component null, so no old references can be used after ExitManager is called.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Device.FWIdChangedHandler">
            <summary>
            A delegate of this type can be added to the Device and will be called, when the FwVersion is changed.
            </summary>
            <param name="value"> the new fwversion</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Device.FWChanged">
            <summary>
            This event is fired, when the FwVersion was changed in the Logic
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.FromEvent(bosch.de.abt.beg.microLC.API.Device)">
            <summary>
            Creates an Task, which allows to wait for the end of an Event.
            </summary>
            <param name="obj">instance of Device</param>
            <returns>the Task, which allows to wait for the end of an Event</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.FirmwareChangesUpdate">
            <summary>
            Updates the firmware of the device
            If no update is avaiable, it will jump over. The reason will be logged in the log file.
            The expansionboard will only update, if the mainboard is up to date
            If the update fails, an exception will be thrown and the program will stop
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.FirmwareChangesUpdateFromFile(System.String,System.String)">
            <summary>
            Updates the firmware of the device using the hexfile at the specified path. 
            Be careful with this method. Using a bad hexfile can make the device non operational.
            </summary>
            <param name="hexfilePath">Path of the hexfile used for flashing, as string</param>
            <param name="password">Password needed for flashing from File</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.ThreadFirmwareUpdateFromFile(System.Object)">
            <summary>
            This method is needed because starting a new thread with parameters is a pain and for some reason it didn't work with lambada expressions
            </summary>
            <param name="hexFilePath">path to hexfile, as string/object</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.FirmwareChangesErase(System.String)">
            <summary>
            Removes the firmware of the device, bringing it into Bootloader modous
            </summary>
            <param name="password">Password needed for erasing of Firmware</param>    
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.Dispose">
            <summary>
            Removes EventHandlers. Should be called once object goes out of scope
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.SendCustomCommand(System.String,System.Byte,System.Byte,System.Byte[],System.Boolean)">
            <summary>
            Sends a custom command to the device
            </summary>
            <param name="password">Password needed to send this custom command</param>
            <param name="modul">modul number where the command shall get send to, values 0-255</param>
            <param name="command">command what the modul of the device shall do, values 0-255</param>
            <param name="data">data that the device shall process, array of values 0-255</param>
            <param name="answerExpected">boolean if an answer is expected</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Device.InitializeCustomCommandListener(System.String,System.Byte,System.Byte)">
            <summary>
            Initializes a Eventlistener that listens to all devices if a command and modul is received
            To listen to to the Event a eventlistener must get initialized for MicroLCManager.CustomCommandReceived
            eg. in c#: MicroLCManager.CustomCommandReceived += MicroLCManager_CommandReceived;
            </summary>
            <param name="password">password that is needed to add the listener</param>
            <param name="modul">Module number to be listened to, values 0-255</param>
            <param name="command">command number to be listened to, values 0-255</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.DeviceComponent">
            <summary>
            This class represents the Parent class of the DeviceComponents.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.DeviceComponent.BlackListFilter">
            <summary>
            Filter which is used to hide Propertys in the getProperty methode
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DeviceComponent.Name">
            <summary>
            Returns the Name of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DeviceComponent.HardwareId">
            <summary>
            Returns the HardwareID of the component
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.DOUT_VALUE">
            <summary>
            Possible values the physical DOUT can be set.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.DOUT_VALUE.DISABLED">
            <summary>
            Possible Value of the DOUT - Disabled, Low
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.DOUT_VALUE.ENABLED">
            <summary>
            Possible Value of the DOUT - Enabled, High
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.DOUT_VALUE.TRISTATE">
            <summary>
            Possible Value of the DOUT - Tristate, Highimpedance
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IDOUT">
            <summary>
            Default Interface of DOUT class, specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDOUT.Name">
            <summary>
            The Property Name represents the Label of the DOUT and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDOUT.HardwareId">
            <summary>
            Returns the HardwareID of this component.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDOUT.Value_v2">
            <summary>
            The Property Value represents the state of the DOUT. Use public constants to set Value. 
            0 = DISABLED, 1 = ENABLED, 2 = TRISTATE
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDOUT.Value">
            <summary>
            The Property Value represents the state of the DOUT. Use public constants to set Value. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDOUT.DoutVState">
            <summary>
            The Property DoutVState represents the voltage state (12V or UBAT) of the DOUT.
            HINT: To change the voltage of an DOut expansionboard, use Device.SetDOUTVoltagesAll(Integer state)
            </summary>
            
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IDOUT.DoutVoltageState">
            <summary>
            The Property DoutVoltageState represents the voltage state (12V or UBAT) of the DOUT.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDOUT.SetDOUTState(System.Int32)">
            <summary>
            Sets the state of a state.
            </summary>
            <param name="state">State of the Dout. 0 for OFF, 1 for ON and 2 for TRISTATE.</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDOUT.SetDOUTVoltage(System.Int32)">
            <summary>
            Sets the voltage of a dout. 0 For 12V, 1 for UBAT.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IDOUT.IsDOUTVoltageSwitchable">
            <summary>
            Returns true if device is capable of switching voltages between 12V and UBAT.
            </summary>
            <returns></returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.DOUT">
            <summary>
            This class represents a digital output of the hardware.
            With the functions and Propertys in this class the user is able to calibrate a Hardware DOUT.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.DOUT.DOUTChanged">
            <summary>
            Delegate can be applied to the DOut and is called whenever the value of Dout is changed.
            </summary>
            <param name="sender">source of the event</param>
            <param name="value">changed value</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.DOUT.DOUTValueChanged">
            <summary>
            Delegate can be applied to the DOut and is called whenever the value of Dout is changed.
            </summary>
            <param name="sender">source of the event</param>
            <param name="value">changed value:1 = DISABLED, 2 = ENABLED, 3 = TRISTATE</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.DOUT.DOUTVStateChanged">
            <summary>
            Delegate can be applied to the DOut and is called whenever the voltage value of Dout is changed.
            </summary>
            <param name="sender"></param>
            <param name="doutVState"></param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.DOUT.DOUTChangedEvent">
            <summary>
            Event is raised when the dout value has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.DOUT.DOUTValueChangedEvent">
            <summary>
            Event is raised when the dout value has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.DOUT.DOUTVStateChangedEvent">
            <summary>
            Event is raised when the dout voltage value has changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DOUT.Name">
            <summary>
            The Property Name represents the Label of the DOUT and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DOUT.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DOUT.Value">
            <summary>
            The Property Value represents the state of the DOUT. Use public constants to set Value. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DOUT.Value_v2">
            <summary>
            The Property Value represents the state of the DOUT. Use public constants to set Value. 
            0 = DISABLED, 1 = ENABLED, 2 = TRISTATE
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DOUT.DoutVoltageState">
            <summary>
            The Property DoutVState represents the voltage state (12 or 24 Volt) of the dout. True for UBAT and False 12V.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.DOUT.DoutVState">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DOUT.IsDOUTVoltageSwitchable">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DOUT.SetDOUTState(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.DOUT.SetDOUTVoltage(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.PWMorSentMode">
            <summary>
            Describes the possible modes for which the pwm/sent output can be used
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.PWMorSentMode.Off">
            <summary>
            Turnes the Pwm/sent output off.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.PWMorSentMode.SimplePWM">
            <summary>
            Simple PWM Mode. Allows setting frequency and dutycycle
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.PWMorSentMode.ComplexPWM">
            <summary>
            Complex PWM Mode. Allows to organize Subsignals and setting their frequency and dutycyle
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.PWMorSentMode.Sent">
            <summary>
            Sent Mode - Allows to change the settings of a Sent-Signal and send it.
            Contains FastChannelSent (SlowChannelSent to be implemented)
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Outputlevel">
            <summary>
            Possible output level sof the pwm/sent output
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IPWMorSent">
            <summary>
            Default interface of PWMorSent class, which specifies which methods are visible for COM 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWMorSent.Name">
            <summary>
            The Property Name represents the Label of the Hardware ADC and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWMorSent.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWMorSent.SimplePWM">
            <summary>
            Allows to configure the SimplePWM Mode
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWMorSent.ComplexPWM">
            <summary>
            Allows to configure the Complex PWM Mode
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWMorSent.SignalInverted">
            <summary>
            With settign this property the Signal can be inverted.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWMorSent.SignalOutputLevel">
            <summary>
            This Property sets the outputlevel
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWMorSent.SignalOutputLevel_v2">
            <summary>
            This Property sets the outputlevel LEVEL_0V = 2, LEVEL_5V = 1, LEVEL_12V = 0, LEVEL_OpenDrain = 3, LEVEL_Z_5V = 4, LEVEL_Z_12V = 5, LEVEL_ShutDown = 6
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWMorSent.Mode">
            <summary>
            Describes the Mode of the pwm/sent output.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWMorSent.OutputMode">
            <summary>
            Describes the Mode of the pwm/sent output.
            0 = Off, 1 = SimplePWM, 2 = ComplexPWM, 3 = Sent
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IPWMorSent.Sent">
            <summary>
            Allows to configure Sent Mode
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.PWMorSent">
            <summary>
            Class represents a pwm/sent output. Attention this output can be used as different modes.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.PWMorSent.PWMChanged`1">
            <summary>
            Delagate can be applied to PWMorSent and is called whenever a value of PWMorSent has been changed.
            </summary>
            <typeparam name="T">type of the changed value</typeparam>
            <param name="sender">source of the event</param>
            <param name="value">changed value</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWMorSent.OutputLevelChanged">
            <summary>
            Event is raised when the Outputlevel was changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWMorSent.OutputLevelChanged_v2">
            <summary>
            Event is raised when the Outputlevel was changed.
            1 = Level_5V, 2 = Level_12V, 
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWMorSent.PWMorSentModeChanged">
            <summary>
            Event is raised when the PWMorSent Mode is changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWMorSent.PWMorSentOutputModeChanged">
            <summary>
            Event is raised when the PWMorSent Mode is changed.
            0 = Off, 1 = SimplePWM, 2 = ComplexPWM, 3 = Sent
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWMorSent.PolarityInvertedChanged">
            <summary>
            Event is raised when the Polarity of the PWM was inverted.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.PWMorSent.EnabledStateChanged">
            <summary>
            Event is raised when the Polarity of the PWM was inverted.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWMorSent.Name">
            <summary>
            The Property Name represents the Label of the Hardware ADC and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWMorSent.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWMorSent.SimplePWM">
            <summary>
            Allows to configure the SimplePWM Mode
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWMorSent.ComplexPWM">
            <summary>
            Allows to configure the Complex PWM Mode
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWMorSent.Sent">
            <summary>
            Allows to configure Sent Mode
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWMorSent.SignalInverted">
            <summary>
            With setting this property the Signal can be inverted.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWMorSent.SignalOutputLevel">
            <summary>
            This Property sets the outputlevel
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWMorSent.SignalOutputLevel_v2">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWMorSent.Mode">
            <summary>
            Describes the Mode of the pwm/sent output.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.PWMorSent.OutputMode">
            <summary>
            Describes the Mode of the pwm/sent output.
            0 = Off, 1 = SimplePWM, 2 = ComplexPWM, 3 = Sent
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IComplexPWM">
            <summary>
            Default interface of ComplexPWM class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComplexPWM.GetSubSignalAt_v2(System.Int32)">
            <summary>
            Get the SubSignal with the specific index in the order.
            </summary>
            <param name="index">place in the order</param>
            <returns>the searched Subsignal</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IComplexPWM.GetSubSignalAt(System.UInt32)">
            <summary>
            Get the SubSignal with the specific index in the order.
            </summary>
            <param name="index">place in the order</param>
            <returns>the searched Subsignal</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWM.FirstSubInitial">
            <summary>
            Property to set the first Subsignal of the SimplePWM as initial.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWM.SubsignalCount_v2">
            <summary>
            Property to set the count of subsignals of the complex pwm.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWM.SubsignalCount">
            <summary>
            Property to set the count of subsignals of the complex pwm.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IComplexPWM.SubsignalsCom">
            <summary>
            Intended for use with Com.
            Use Subsignals if you are using .net
            A List of all Subsignals of the ComplexPWM
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ComplexPWM">
            <summary>
            Allows to configure the complex Mode of the pwm/sent output
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ComplexPWM.ComplexPWMChanged`1">
            <summary>
            Delegate can be applied to the ComplexPWM and is called whenever values of the ComplexPWM are changed.
            </summary>
            <typeparam name="T">type of the changed value</typeparam>
            <param name="sender">source of the event</param>
            <param name="value">changed value</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ComplexPWM.InitialStateChanged">
            <summary>
            Event is raised when the FirstSubsignal is set Initial or not Initial anymore.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ComplexPWM.SubsignalCountChanged_v2">
            <summary>
            Event is raised when the Count of Subsignals was changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.ComplexPWM.SubsignalCountChanged">
            <summary>
            Event is raised when the Count of Subsignals was changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWM.Subsignals">
            <summary>
            A List of all Subsignals of the ComplexPWM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWM.SubsignalsCom">
            <summary>
            Intended for use with Com.
            Use Subsignals if you are using .net
            A List of all Subsignals of the ComplexPWM
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ComplexPWM.GetSubSignalAt_v2(System.Int32)">
            <summary>
            Get the SubSignal with the specific index in the order.
            </summary>
            <param name="index">place in the order</param>
            <returns>the searched Subsignal</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ComplexPWM.GetSubSignalAt(System.UInt32)">
            <summary>
            Get the SubSignal with the specific index in the order.
            </summary>
            <param name="index">place in the order</param>
            <returns>the searched Subsignal</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWM.FirstSubInitial">
            <summary>
            Property to set the first Subsignal of the SimplePWM as initial.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWM.SubsignalCount_v2">
            <summary>
            Property to set the count of subsignals of the complex pwm.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ComplexPWM.SubsignalCount">
            <summary>
            Property to set the count of subsignals of the complex pwm.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ISimplePWM">
            <summary>
            Default interface of the SimplePWM class, which specifies which methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISimplePWM.Frequency">
            <summary>
            Freqency of the simple PWM Signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISimplePWM.DutyCycle">
            <summary>
            Duty Cycle of the simple PWM-signal
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.SimplePWM">
            <summary>
            Allows to configure the Simple PWM Mode of the pwm/sent output
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.SimplePWM.SimplePWMChanged">
            <summary>
            Delegate that can be applied to the SimplePWM. It is called whenever changes to the values of SimplePWM are made.
            </summary>
            <param name="sender">source of the event</param>
            <param name="value">changed value</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.SimplePWM.DutyCycleChanged">
            <summary>
            Event is raised when the dutycycle has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.SimplePWM.FrequencyChanged">
            <summary>
            Event is raised when the frequency has changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWM.Frequency">
            <summary>
            Freqency of the simple PWM Signal
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWM.DutyCycle">
            <summary>
            Duty Cycle of the simple PWM-signal
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle">
            <summary>
            Duty Cycle of a simple PWM Signal
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.GetTranslator">
            <summary>
            Returns the currently assigned Translator
            </summary>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.Value">
            <summary>
            Value of the Dutycycle of the simple PWM Signal or the correspondending physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.ElectricalValue">
            <summary>
            The coresspondending electrical value. Is equal with the Value, when no function is assigned. In %
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.Unit">
            <summary>
            Unit of the mapped physical value. 
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.AssignTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            Assigns a matching translator function to the PWM DutyCycle
            </summary>
            <param name="translatorFunction">translator function, which should be assigned</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.UnassignTranslatorFunction">
            <summary>
            Unassigns a Translatorfunction. Does nothing, when no function is assigned.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.GetTranslatorFunction">
            <summary>
            Returns the assigned translator function. Returns null if no Translatorfunction is assigned.
            </summary>
            <returns>assigned translator function</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.ErrormodeActive">
            <summary>
            When the Errormode is active the User is able to set Values less and greater than the minimum and maximum value.
            The electrical Value will set to a coresspondending value defined in the translator function or the minimum or maximum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.MinValue">
            <summary>
            Minimum possible Value of the Frequency or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.MaxValue">
            <summary>
            Maximum possible Value of the Frequency or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.TranslatorId">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.Name">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMDutyCycle.HardwareId">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.SimplePWMFrequency">
            <summary>
            Frequency of a simple PWM Signal
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.GetTranslator">
            <summary>
            Returns the currently assigned Translator
            </summary>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.Value">
            <summary>
            Value of the Frequency of the simple PWM Signal or the correspondending physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.ElectricalValue">
            <summary>
            The coresspondending electrical value. Is equal with the Value, when no function is assigned. In Hz 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.Unit">
            <summary>
            Unit of the physical value
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.AssignTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            Assigns a matching translator function to the PWM Frequency
            </summary>
            <param name="translatorFunction">translator function, which should be assigned</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.UnassignTranslatorFunction">
            <summary>
            Unassigns a Translatorfunction. Does nothing, when no function is assigned.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.GetTranslatorFunction">
            <summary>
            Returns the assigned translator function. Returns null if no Translatorfunction is assigned.
            </summary>
            <returns>assigned translator function</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.ErrormodeActive">
            <summary>
            When the Errormode is active the User is able to set Values less and greater than the minimum and maximum value.
            The electrical Value will set to a coresspondending value defined in the translator function or the minimum or maximum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.MinValue">
            <summary>
            Minimum possible Value of the Frequency or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.MaxValue">
            <summary>
            Maximum possible Value of the Frequency or the assigned physical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.TranslatorId">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.Name">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SimplePWMFrequency.HardwareId">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IShaft">
            <summary>
            Default interface for Shaft, specifies functions visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IShaft.Name">
            <summary>
            Returns the Name of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IShaft.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IShaft.Enabled">
            <summary>
            Enable or Deactivate the Shaft signal of the MicroLC
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Shaft">
            <summary>
            Shaft Signal of the MicroLC
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Shaft.ShaftSignalDataChangedHandler">
            <summary>
            Is thrown when the SignalData of the Shaft was changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Shaft.ShaftSignalDataChanged">
            <summary>
            Event raised when the SignalData of the Shaft was changed.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Shaft.#ctor">
            <summary>
            Ignore this constructor. It is only needed for inheritance
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Shaft.Name">
            <summary>
            Returns the Name of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Shaft.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Shaft.Enabled">
            <summary>
            Enable or Deactivate the Shaft signal of the MicroLC
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.ISystemUtils">
            <summary>
            Interface to make SystemUtils COM Visible. Any public methods added to SystemUtils must also be added here
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISystemUtils.Name">
            <summary>
            The Property Name represents the SystemUtils-Module and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.ISystemUtils.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISystemUtils.GetSystemTime(System.Int64)">
            <summary>
            Get the systemtime from the microLC3. 
            </summary>
            <param name="timerCalibrationValue">must be -1 (no change in timer calibration since last call) or 0 (standard timer calibration) or between 33000 and 99000 (0,5ms to 1,5ms)</param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISystemUtils.ActivateLogging">
            <summary>
            Method to activate all logging
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISystemUtils.DeactivateLogging">
            <summary>
            Method to deactivate all logging
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISystemUtils.GetLogFileSize">
            <summary>
            Returns the currenty saved size of the logfiles in MB.
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISystemUtils.SetLogFileSize(System.Int32)">
            <summary>
            Sets the logfile size in MB.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISystemUtils.GetLogFileRollBackups">
            <summary>
            Returns the currently saved count of rollback logfiles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.ISystemUtils.SetLogFileRollBackups(System.Int32)">
            <summary>
            Sets the count of rollback logfiles.
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.SystemUtils">
            <summary>
            This Module allows specific system functions of the MicroLC
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SystemUtils.Name">
            <summary>
            The Property Name represents the SystemUtils-Module and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.SystemUtils.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SystemUtils.FromEvent(bosch.de.abt.beg.microLC.API.SystemUtils)">
            <summary>
            Creates an Task, which allows to wait for the end of a Event.
            </summary>
            <param name="obj">instance of ADC</param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SystemUtils.GetSystemTime(System.Int64)">
            <summary>
            Get the systemtime from the microLC3. 
            </summary>
            <param name="TimerCalibrationValue">must be -1 (no change in timer calibration since last call) or 0 (standard timer calibration) or between 33000 and 99000 (0,5ms to 1,5ms)</param>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SystemUtils.ActivateLogging">
            <summary>
            Method to activate all logging
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SystemUtils.DeactivateLogging">
            <summary>
            Method to deactivate all logging
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SystemUtils.GetLogFileSize">
            <summary>
            Returns the currenty saved size of the logfiles in MB.
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SystemUtils.SetLogFileSize(System.Int32)">
            <summary>
            Sets the logfile size in MB.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SystemUtils.GetLogFileRollBackups">
            <summary>
            Returns the currently saved count of rollback logfiles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.SystemUtils.SetLogFileRollBackups(System.Int32)">
            <summary>
            Sets the count of rollback logfiles.
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.LogLevel">
            <summary>
            This Enum provides all possible LogLevel
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.LogLevel.Off">
            <summary>
            The Off level designates a higher level than all the rest. 
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.LogLevel.Fatal">
            <summary>
            The Fatal level designates very severe error events that will presumably lead the application to abort. 
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.LogLevel.Error">
            <summary>
            The Error level designates error events that might still allow the application to continue running. 
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.LogLevel.Warn">
            <summary>
            The Warn level designates potentially harmful situations. 
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.LogLevel.Info">
            <summary>
            The INFO level designates informational messages that highlight the progress of the application.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.LogLevel.Debug">
            <summary>
            The Debug level designates fine-grained informational events that are most useful to debug an application. 
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.LogLevel.All">
            <summary>
            The All level designates the lowest level possible.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.MappingResult">
            <summary>
            This Enum provides all possible MappingResults
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.MappingResult.MappingFailed">
            <summary>
            No Devices of the Projectfile could be mapped to the connected Devices. The connected Devices are intitialized without a project File.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.MappingResult.MappingPartSuccess">
            <summary>
            Some Devices of the Projectfile could be mapped to the connected Devices, but not all.
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.MappingResult.MappingSuccess">
            <summary>
            Every Device of the Projectfile could be mapped to the connected Devices.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IMicroLCManager">
            <summary>
            Default Interface of MicroLCManager specifies which Methods are visble for COM
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IMicroLCManager.GetDeviceAt(System.Int32)">
            <summary>
            Returns the Device at a specific index
            </summary>
            <param name="index">index of device</param>
            <returns>device at index</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IMicroLCManager.GetDeviceBySerialNumber(System.String)">
            <summary>
            Returns a spezific Device, descriebed by the Serialnumber. Returns null if serialnumber doesn//t exist.
            </summary>
            <param name="serial"></param>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IMicroLCManager.DeviceCount">
            <summary>
            Returns the count of the available devices.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IMicroLCManager.LoadProject(System.String)">
            <summary>
            Loads the current configuration in a mlcp file. Throws Exception, when not possible.
            </summary>
            <param name="path">path to the mlcp-file, which should be loaded</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IMicroLCManager.SaveProject(System.String)">
            <summary>
            Saves the current configuration in a mlcp file.
            </summary>
            <param name="path">path to the mlcp file, where the configuration should be saved</param>
            <returns>true if saving was sucessful, otherwise false</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IMicroLCManager.TranslatorManager">
            <summary>
            Returns an Instance of the Translatormanager
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IMicroLCManager.DevicesCOM">
            <summary>
            This static function returns a List of all avaible Devices
            </summary>
            <returns>List of avaible Devices</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IMicroLCManager.DeviceSerialsCOM">
            <summary>
            This static function returns a List of all Serials of the avaible Devices
            </summary>
            <returns>List of all Serials of the avaible Devices</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IMicroLCManager.GetLua">
            <summary>
            This static function returns Lua Service
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.MicroLCManager">
            <summary>
            Manager allows to manage the Software in general. The Manager is build as a Singleton. But there are different possibilities to create the Instance. Checkout: Initialize Manager
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.MicroLCManager.name">
            <summary>
            Path to the temp file, to register and deregister Instances of the API
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.SetForegroundWindow(System.IntPtr)">
            <summary>
            Import function to put a window of another process into the foreground.
            This is needed if another instance of the API is already running.
            </summary>
            <param name="hWnd">The handle of the window that should be brought into the foreground</param>
            <returns>if it was a success (true) or not (false)</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.IsIconic(System.IntPtr)">
            <summary>
            Check if the process is minimized
            </summary>
            <param name="hwnd">The handle of the window that should be brought into the foreground</param>
            <returns>is Icon=true; is no Icon=false</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.OpenIcon(System.IntPtr)">
            <summary>
            Open a minimized window
            </summary>
            <param name="hwnd">The handle of the window that should be brought into the foreground</param>
            <returns>true= success, false = error</returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.MicroLCManager.ProjectLoadingEventHandler">
            <summary>
            Delegate for MappingEvents.
            </summary>
            <param name="result">Shows if every device could be mapped or not.</param>
            <param name="mapping">Shows which device of the projectfile was mapped to which connected device.</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.MicroLCManager.InitAPIEventHandler">
            <summary>
            Delegate for Initialization of the API.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.MicroLCManager.ExitAPIEventHandler">
            <summary>
            Delegate for Event when the API is exited.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.MicroLCManager.MappingEvent">
            <summary>
            Event raised when the Projectfile was mapped to the connected Devices.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.MicroLCManager.InitAPIEvent">
            <summary>
            Event for when the API is initialized.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.MicroLCManager.ExitAPIEvent">
            <summary>
            Event for when the API is exited.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.MicroLCManager.DebugCommandReceived">
            <summary>
            Delegate for the DebugCommandReceived event
            </summary>
            <param name="modul">received modul</param>
            <param name="command">received command</param>
            <param name="data">received data</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.MicroLCManager.CustomCommandReceived">
            <summary>
            Event that gets thrown if a in Device.InitializeCustomCommandListener intialized command is received
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.MicroLCManager.SoftwareUpdateHandler">
            <summary>
            Delegate for the SoftwareUpdateAvailable event.
            </summary>
            <param name="actualVersion">current installed old version</param>
            <param name="newVersion">new version to be installed</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.MicroLCManager.SoftwareUpdateAvailable">
            <summary>
            An event thrown whenever a software update is available.
            To update the software the program using the API has to be closed and the MicroLC Software has to be opened.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.MicroLCManager.FirmwareUpdateHandler">
            <summary>
            Delegate for the FirmwareUpdateAvailable event.
            </summary>
            <param name="msg">Message containing which connected devices require a firmware update.</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.MicroLCManager.FirmwareUpdateAvailable">
            <summary>
            An event thrown whenever a firmware update is available.
            To update the software the program using the API has to be closed and the MicroLC Software has to be opened.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.MicroLCManager.UpdateSubscriptionExpiredHandler">
            <summary>
            Delegate for the UpdateSubscriptionExpired event.
            </summary>
            <param name="msg">Message containing that the update subscription is expired or about to expire.</param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.MicroLCManager.UpdateSubscriptionExpired">
            <summary>
            An event thrown whenever update subscription is expired or about to expire.
            To renew the subscription the program using the API has to be closed and the MicroLC Software has to be opened.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.checkAPIAlreadyInUse">
            <summary>
            Check if the API is already in use by another programm and register the API so other programms know the API is in use now.
            </summary>
            <returns>false -> The API is not in use yet, Exception if it is in use.</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.initializeDevices">
            <summary>
            This method (re-)builds the list of API representations of the logics devices.
            It has to be called whenever the set of devices handeled by the logic changes.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.initializeCommandReceived">
            <summary>
            Used to initialize a eventhandler if a custom command is received if a listener got initialized beforehand
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.HardwareFactory_CustomCommandReceived(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Throws an event if a custom command is received
            </summary>
            <param name="modul"></param>
            <param name="command"></param>
            <param name="data"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.registerLogger">
            <summary>
            This method registers the Logger for the API. It is only used in the Constructor of the MicroLCManager.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.updatesAvailable">
            <summary>
            Check if there are Updates available for the BSW or the Firmware.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.CheckUpdateSubscription">
            <summary>
            Provide information to user, if one of devices has an expired update subscription.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.GetUpdateSubscriptionStatus">
            <summary>
            Collects device information regarding update subscription
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.InformAboutExpiredSubscription">
            <summary>
             Throw an event if subscription is expired or about to expire
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.initializeServices">
            <summary>
            Initialize all needed Services in the Logic
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.InitializeManager(System.Boolean)">
            <summary>
            The MicroLCManager is a Singleton. It can only be created once per runtime. If the user wants to start with extra Configuration,
            He has to call this Methode before he calls getInstance. Attention: The MicroLC can only be initialized once. Otherwise an exception is thrown.
            If there is a need to use another Configuration during the runtime ExitManager() can be called. After that the first Configuration is discarded and 
            a new Configuration can be loaded with one of the InitializeManager-Methods.
            </summary>
            <param name="IncludeMockups">should demos integreated</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.InitializeManager(System.String)">
            <summary>
            The MicroLCManager is a Singleton. It can only be created once per runtime. If the user wants to start with extra Configuration,
            He has to call this Methode before he calls getInstance. Attention: The MicroLC can only be initialized once. Otherwise an exception is thrown.
            If there is a need to use another Configuration during the runtime ExitManager() can be called. After that the first Configuration is discarded and 
            a new Configuration can be loaded with one of the InitializeManager-Methods.
            </summary>
            <param name="Path">path to a MicroLC Software Project File</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.InitializeManager(System.Boolean,System.String)">
            <summary>
            The MicroLCManager is a Singleton. It can only be created once per runtime. If the user wants to start with extra Configuration,
            He has to call this Methode before he calls getInstance. Attention: The MicroLC can only be initialized once. Otherwise an exception is thrown.
            If there is a need to use another Configuration during the runtime ExitManager() can be called. After that the first Configuration is discarded and 
            A new Configuration can be loaded with one of the InitializeManager-Methods.
            </summary>
            <param name="IncludeMockups">should demos integreated</param>
            <param name="Path">path to a MicroLC Software Project File</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.GetInstance">
            <summary>
            Standard Singleton Methode. Returns an Instance of MicroLCManager. If there is no Instance it creates one with basic configurations.
            Basic configurations means without Mockups and a new Project.
            </summary>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.MicroLCManager.IsInitialized">
            <summary>
            Indicates if the API is already initialized or not.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.checkExistingInstance">
            <summary>
            Checks if there is already an instance of the API running.
            </summary>
            <returns></returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.CheckProcesses(System.String)">
            <summary>
            Checks if a process is already running
            </summary>
            <param name="name">Name of the process</param>
            <returns>true if running, false if not running</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.AppActivate(System.Diagnostics.Process)">
            <summary>
            Brings the main window of a process into the foreground
            </summary>
            <param name="process">The process which shall be set into the foreground</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.ResetMicroLCAPI">
            <summary>
            Resets the API and frees all Resources.
            Has to be called whenever the API is blocked and can't be freed manually.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.SetLogLevel(bosch.de.abt.beg.microLC.API.LogLevel)">
            <summary>
            Allows to set a Priority level for the Logs.
            </summary>
            <param name="level">Level of the Log</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.SetLogLevel(System.Int32)">
            <summary>
            Allows to set a Priority level for the Logs.
            </summary>
            <param name="level">Level of the Log:
            0 = Off, 1 = Fatal, 2 = Error, 3 = Warn, 4 = Info, 5 = Debug, 6 = All
            </param>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.MicroLCManager.Devices">
            <summary>
            This static function returns a List of all avaible Devices
            </summary>
            <returns>List of avaible Devices</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.MicroLCManager.DevicesCOM">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.GetDeviceAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.GetLua">
            <inheriteddoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.GetDeviceBySerialNumber(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.GetDeviceFirstMockUpMainboard">
            <summary>
            Returns the first Mock Up Mainboard.
            </summary>
            <returns></returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.MicroLCManager.DeviceCount">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.MicroLCManager.DeviceSerials">
            <summary>
            This static function returns a List of all Serials of the avaible Devices
            </summary>
            <returns>List of all Serials of the avaible Devices</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.MicroLCManager.DeviceSerialsCOM">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.LoadProject(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.SaveProject(System.String)">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.MicroLCManager.TranslatorManager">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.MicroLCManager.ExitManager">
            <summary>
            Makes it possible to create a new instance of MicroLCManager, while discarding the old.
            Useful if a test should be made with two different .mlcp-Projects
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IRelay">
            <summary>
            Default Interface of the relay component, specifies all methods which are visible over COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay.Name">
            <summary>
            The Property Name represents the Label of the Hardware Relay and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay.Value">
            <summary>
            The Property Value represents the state of the Hardware Relay. true = Relay enabled, false = Relay disabled
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay.Automation">
            <summary>
            Represents the Automationmode of the Relay. Enabling or Disabling is only possible, if the Harware Relay Supports Automation-mode.
            This can be tested with the Methode IsAutomationPossible();
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay.IsAutomationPossible">
            <summary>
            Not all Hardware Relays offer Automation mode. This Function checks, if Automation mode is possible or not.
            </summary>
            <returns>is Automation mode possible?</returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IRelay2">
            <summary>
            Default Interface of the relay component, specifies all methods which are visible over COM (Version2 includes MainRSensePullUp)
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay2.Name">
            <summary>
            The Property Name represents the Label of the Hardware Relay and can be changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay2.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay2.Value">
            <summary>
            The Property Value represents the state of the Hardware Relay. true = Relay enabled, false = Relay disabled
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay2.Automation">
            <summary>
            Represents the Automationmode of the Relay. Enabling or Disabling is only possible, if the Hardware Relay Supports Automation-mode.
            This can be tested with the Methode IsAutomationPossible();
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay2.IsAutomationPossible">
            <summary>
            Not all Hardware Relays offer Automation mode. This Function checks, if Automation mode is possible or not.
            </summary>
            <returns>is Automation mode possible?</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay2.PullUpResistorEnabled">
            <summary>
            Represents the MainRSense PullUp Resistor. Enabling and Disabling is only possible if the Hardware Relay supports Automation-mode,
            and the Device supports MainRSense.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay2.CurrentValue">
            <summary>
            The Property CurrentValue represents the last measured value of the current of the Hardware MainRelay. The measurement only works with 3.2B devices.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRelay2.VoltageValue">
            <summary>
            The Property VoltageValue represents the last measured value of the voltage of the Hardware MainRelay. The measurement only works with 3.2B devices.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IRelay2.SetRelaySamplingTime(System.Int32)">
            <summary>
            Sets the  sampling interval for polling current and voltage values of Main Relay.
            Allowed only for 3.2B Device
            <param name="value">Sampling interval in milliseconds</param>
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Relay">
            <summary>
            This class represents a Relay. With the functions and Propertys in this class the user is able to calibrate the Hardware Relay.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Relay.RelayChangedHandler">
            <summary>
            A delegate of this type can be added to the RelayChanged Event and will be called, 
            when the Relay state changes.
            </summary>
            <param name="sender"></param>
            <param name="relayState"></param>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.Relay.RelayChanged">
            <summary>
            Event which is fired when the state of the relay changes in automatic mode
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Relay.Name">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Relay.HardwareId">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Relay.Value">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Relay.IsAutomationPossible">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Relay.Automation">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Relay.PullUpResistorEnabled">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Relay.SetRelaySamplingTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.CrankshaftSensorType">
            <summary>
            Enum for the different CrankshaftSensorTypes
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CrankshaftSensorType.Hall">
            <summary>
            CrankshaftSensor Type Hall
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CrankshaftSensorType.Induktiv">
            <summary>
            CrankshaftSensor Type Induktiv
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CrankshaftSensorType.DG23i">
            <summary>
            CrankshaftSensor Type DG23i
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.CrankshaftSensorType.TL4953">
            <summary>
            CrankshaftSensor Type TL4953
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.IRPM">
            <summary>
            default interface for RPM specifies functions visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.Name">
            <summary>
            returns the Name of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.HardwareId">
            <summary>
            returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.Enginespeed">
            <summary>
            Property allows to set and get the EngineSpeed
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.CrankshaftsCOM">
            <summary>
            Returns List of available CrankShafts on the MicroLC
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.CrankShaftCount">
            <summary>
            Returns the count of available CrankShafts on the MicroLC
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IRPM.CrankShaftAt(System.Int32)">
            <summary>
            Returns the CrankShaft at index i the MicroLC
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.CamshaftsCOM">
            <summary>
            Returns List of available Camhafts on the MicroLC
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.CamShaftCount">
            <summary>
            Returns the count of available CamShafts on the MicroLC
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IRPM.CamShaftAt(System.Int32)">
            <summary>
            Returns the Camshaft at index i the MicroLC
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.Trigger">
            <summary>
            Returns the Trigger-Signal Shaft of the MicroLC
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.Sensor">
            <summary>
            Set the sensortype of the rpm.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.SensorType">
            <summary>
            Set the sensortype of the rpm.
            0 = Hall, 1 = Induktiv, 2 = DG23i, 3 = TL4953
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.Backwards">
            <summary>
            Set the RPM as Backwards.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.StartStopToothValue">
            <summary>
            Set the Tooth for the start stop function
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.startStopTooth">
            <summary>
            Set the Tooth for the start stop function
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.StartStopRPMValue">
            <summary>
            Set the RPM for the start stop function
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.startStopRPM">
            <summary>
            Set the RPM for the start stop function
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.startStop">
            <summary>
            Handles the start stop function
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.UpperFluctuationFactor">
            <summary>
            The current upper fluctuation factor. Value has to be in the range of 1.0 and 1.5.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.LowerFluctuationFactor">
            <summary>
            The current lower fluctuation factor. Value has to be in the range of 0.5 and 1.0.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.FluctuationAngle">
            <summary>
            The current fluctuation angle. Value has to be in the range of 0 and 720.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.FluctuationEnabled">
            <summary>
            The current fluctuation process state. True = Enabled, False = Disabled.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IRPM.Load_A2LHEX(System.String,System.String)">
            <summary>
            Method to load A2L and Hex files and adjust the rpm-shafts according to this.
            The logger should log at least at Warn-Level, to get a response when false values are provided in the files.
            </summary>
            <param name="pathToA2L">the path to the a2l file that should be used</param>
            <param name="pathToHEX">the path to the hex file that should be used</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IRPM.ImportCamshaftDataFromCSV(System.String)">
            <summary>
            Method to load a CSV file and adjust the camshafts according to this.
            </summary>
            <param name="path">Absolute path to the CSV file</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IRPM.StartStopFunction_v2(System.Boolean,System.Double,System.Double)">
            <summary>
            Handles the Start and Stop at given tooth
            </summary>
            <param name="startstop">True: Engine stops, False: Engine starts</param>
            <param name="tooth">tooth where to stop before</param>
            <param name="rpm"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IRPM.startStopFunction(System.Boolean,System.Decimal,System.Decimal)">
            <summary>
            Handles the Start and Stop at given tooth
            </summary>
            <param name="startstop">True: Engine stops, False: Engine starts</param>
            <param name="tooth">tooth where to stop before</param>
            <param name="rpm"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IRPM.ConfigOscillatingStop(System.Collections.Generic.List{System.Int32[]})">
            <summary>
            Configurates the pendulum steps for the oscillating stop.
            </summary>
            <param name="panelList">List of int[3] values that represent each pendulum step.</param>
            <remarks>
            The list given to this method needs to have specific characteristics and works the following way:
            It contains multiple int arrays which must have the length of 3 and the configuration of the int[] should look like this:
            [Angles in tenth of a degree (e.g. 1000 = 100°), rpm (e.g. 1000), direction (0 = forward, 1 = backward)]. Each int array represents one swing out step.
            </remarks>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IRPM.ExecuteOscillatingStop">
            <summary>
            Executes the configured oscillating stop.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.MaximalEnginespeed">
            <summary>
            Sets the MaximalEnginespeed - if the User set enginespeed is out of the allowed range the value will be corrected to a valid value.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.CurrentMaximumEnginespeed">
            <summary>
            Gets the current maximal Enginespeed
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.ForwardTimeIndMS">
            <summary>
            Set or get the individual forward pulse time in µs.
            This method only calls the private FwrdTimeIndMS, this double method is requiered for Projecthandling reasons
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.BackwardTimeIndMS">
            <summary>
            Set or Get the individual forward pulse time in µs
            this method only calls the private FwrdTimeIndMS, this double method is requiered for Projecthandling reasons
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.IRPM.IndividualTimeActive">
            <summary>
            Set or Get the active state of individual pulse times
            this method only calls the private IndividualTimeState, this double method is requiered for Projecthandling reasons
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.IRPM.SetHybridSensorHysteresis(System.Int32,System.Int32)">
             <summary>
            Sets the RPM range values based on which sensor will act as a DG23i sensor or HALL sensor. 
            If the RPM is between {@param dg23iRange} and {@param hallRange} then sensor will switch to DG23i sensor mode
            If the RPM is between {@param hallRange} and 'Maximum RPM' then sensor will switch to HALL range sensor mode
             <param name="dg23iRange">The RPM value in which sensor should act in DG23i mode</param>
             <param name="hallRange">The RPM value in which sensor should act in Hall mode</param>
             </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.RPM">
            <summary>
            represents the RPM Module in the Hardwrae
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.RPM.RPMValueChanged`1">
            <summary>
            Handler for Changes in the RPM Module
            </summary>
            <typeparam name="T">Type of the resulting value</typeparam>
            <param name="name">name of what has changed in the rpm</param>
            <param name="sender">source of the event</param>
            <param name="value">resulting value after the change</param>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.RPM.RPMChanged">
            <summary>
            Handler for the changes in the RPM Module.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.RPM.BackwardsChanged">
            <summary>
            Event is raised when backwards is activated or deactivated
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.RPM.EnabledDisabledShaftEvent">
            <summary>
            Event is raised when when a Shaft is Enabled or disabled
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.RPM.EngineSpeedChanged">
            <summary>
            Event is raised when the Enginespeed has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.RPM.SensorTypeChanged">
            <summary>
            Event is raised when the sensortype has changed.
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.RPM.SensorChanged">
            <summary>
            Event is raised when the sensortype has changed.
            0 = Hall, 1 = Induktiv, 2 = DG23i, 3 = TL4953
            </summary>
        </member>
        <member name="E:bosch.de.abt.beg.microLC.API.RPM.SpeedLimitChanged">
            <summary>
            Event is raised when the speedlimit has changed.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.Name">
            <summary>
            returns the Name of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.HardwareId">
            <summary>
            Returns the HardwareID of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.MaximalEnginespeed">
            <summary>
            Sets the MaximalEnginespeed - if the User set enginespeed is out of the allowed range the value will be corrected to a valid value.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.CurrentMaximumEnginespeed">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.Enginespeed">
            <summary>
            Property allows to set and get the EngineSpeed
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.CrankShafts">
            <summary>
            Returns List of available CrankShafts on the MicroLC
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.CrankshaftsCOM">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.CamShafts">
            <summary>
            Returns List of available Camhafts on the MicroLC
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.CamshaftsCOM">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.Trigger">
            <summary>
            Returns the Trigger-Signal Shaft of the MicroLC
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.CrankShaftCount">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RPM.CrankShaftAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.CamShaftCount">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RPM.CamShaftAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.Sensor">
            <summary>
            Set the sensortype of the rpm.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.SensorType">
            <summary>
            Set the sensortype of the rpm.
            0 = Hall, 1 = Induktiv, 2 = DG23i, 3 = TL4953
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.Backwards">
            <summary>
            Set the RPM as Backwards.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.StartStopToothValue">
            <summary>
            Set the Tooth for the start stop function
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.startStopTooth">
            <summary>
            Set the Tooth for the start stop function
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.StartStopRPMValue">
            <summary>
            Set the RPM for the start stop function
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.startStopRPM">
            <summary>
            Set the RPM for the start stop function
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.startStop">
            <summary>
            Handles the start stop function
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RPM.HandleStopAtGivenToothEvent">
            <summary>
            Handles the event thrown by the rpm logic if the start/stop process is over
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.ForwardTimeIndMS">
            <summary>
            Set or get the individual forward pulse time in µs.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.BackwardTimeIndMS">
            <summary>
            Set or get the individual backward pulse time in µs.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.IndividualTimeActive">
            <summary>
            Set or get the active state of individual pulse times.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.UpperFluctuationFactor">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.LowerFluctuationFactor">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.FluctuationAngle">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.RPM.FluctuationEnabled">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RPM.Load_A2LHEX(System.String,System.String)">
            <summary>
            Method to load A2L and Hex files and adjust the rpm-shafts according to this.
            The logger should log at least at Warn-Level, to get a response when false values are provided in the files.
            </summary>
            <param name="pathToA2L">the path to the a2l file that should be used</param>
            <param name="pathToHEX">the path to the hex file that should be used</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RPM.ImportCamshaftDataFromCSV(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RPM.LoadFailedHandler">
            <summary>
            Handler for Event thrown while loading A2L/Hex File
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RPM.StartStopFunction_v2(System.Boolean,System.Double,System.Double)">
            <summary>
            Handles the Start and Stop at given tooth
            </summary>
            <param name="startstop">True: Engine stops, False: Engine starts</param>
            <param name="tooth">tooth where to stop</param>
            <param name="rpm"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RPM.startStopFunction(System.Boolean,System.Decimal,System.Decimal)">
            <summary>
            Handles the Start and Stop at given tooth
            </summary>
            <param name="startstop">True: Engine stops, False: Engine starts</param>
            <param name="rpm">tooth where to stop</param>
            <param name="tooth"></param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RPM.ConfigOscillatingStop(System.Collections.Generic.List{System.Int32[]})">
            <summary>
            Configurates the pendulum steps for the oscillating stop.
            </summary>
            <param name="panelList">List of int[3] values that represent each pendulum step.</param>
            <remarks>
            The list given to this method needs to have specific characteristics and works the following way:
            It contains multiple int arrays which must have the length of 3 and the configuration of the int[] should look like this:
            [Angles in tenth of a degree (e.g. 1000 = 100°), rpm (e.g. 1000), direction (0 = forward, 1 = backward)]. Each int array represents one swing out step.
            </remarks>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RPM.ExecuteOscillatingStop">
            <summary>
            Executes the configured oscillating stop.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.RPM.SetHybridSensorHysteresis(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.TCSRouting.TCSAdapter">
            <summary>
            This class allows the actual TCS_Routing to access the current software version
            </summary>
            <TODO> AS SOON AS TPT IS ABLE TO WORK WITHOUT THIS CLASS IT CAN BE DELETED --> ADAPTER IS DOING IT'S WORK!!!!</TODO>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.TCSRouting.TCSAdapter.PropertyCache">
            <summary>
            Cache Dict for API Values
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TCSRouting.TCSAdapter.uLabCar_Init(System.String)">
            <summary>
            Methode which is used to initalize the software
            </summary>
            <param name="path">path to a microLC Project file - null if new Project</param>
            <returns>0=OK, 1=Error</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TCSRouting.TCSAdapter.uLabCar_SetValue(System.String,System.String,System.Double)">
            <summary>
            Sets a Value by its signal name
            </summary>
            <param name="signalName">name of the signal which should be set</param>
            <param name="signalUnit">unit of signal - at the moment no effect</param>
            <param name="doubleValue">value as double</param>
            <returns>0=OK, 1=Error</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TCSRouting.TCSAdapter.uLabCar_GetValue(System.String,System.String,System.Double@)">
            <summary>
            Returns the Value of a Signal.
            </summary>
            <param name="signalName">name of the signal which should be returnes</param>
            <param name="signalUnit">unit of signal - at the moment no effect</param>
            <param name="doubleValue">value as double</param>
            <returns>0=OK, 1=Error</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TCSRouting.TCSAdapter.uLabCar_CheckValue(System.String,System.String,System.Double)">
            <summary>
            Is used to check the Values
            </summary>
            <param name="signalName">name of the signal which should be returnes</param>
            <param name="signalUnit">unit of signal - at the moment no effect</param>
            <param name="doubleValue">value as double</param>
            <returns>0=OK, 1=Error</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TCSRouting.TCSAdapter.uLabCar_Exit">
            <summary>
            Procedure which is called to exit the software
            </summary>
            <returns>0=OK, 1=Error</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.TCSRouting.TCSAdapter.GetAllSignalNames">
            <summary>
            Retruns all possible signal names, which can be used
            </summary>
            <returns>List of all signal names</returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign">
            <summary>
            Interface which is implemented in every Component, which can assign translator functions 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign.TranslatorId">
            <summary>
            Returns the Translator id
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign.Name">
            <inheritdoc/>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign.HardwareId">
            <inheritdoc/>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Translator.ITranslatorAssign">
            <summary>
            Interface which is implemented in every Component, which can assign translator functions.
            Interface for TransaltorAssign, to make it visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITranslatorAssign.Name">
            <summary>
            Returns the Name of this component
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITranslatorAssign.HardwareId">
            <summary>
            Returns the HardwareID of the component
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API">
            <summary>
            Default Interface vor the all Translatable components, specifies which Methods are visible for COM
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API.Value">
            <summary>
            When a translator function is assigned this represents the physical value of the component otherwise this is the electrical value.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API.ElectricalValue">
            <summary>
            The coresspondending electrical value. Is equal with the Value, when no function is assigned.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API.Unit">
            <summary>
            Unit of the mapped physical value. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API.ErrormodeActive">
            <summary>
            When the Errormode is active the User is able to set Values less and greater than the minimum and maximum value.
            The electrical Value will set to a coresspondending value defined in the translator function or the minimum or maximum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API.MinValue">
            <summary>
            Minimum possible physical Value - if no translator function is assigned minimum electrical value
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API.MaxValue">
            <summary>
            Maximum possible physical Value - if no translator function is assigned maximum electrical value
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API.AssignTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            Assigns a matching translator function
            </summary>
            <param name="translatorFunction">translator function, which should be assigned</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API.UnassignTranslatorFunction">
            <summary>
            Unassigns a Translatorfunction. Does nothing, when no function is assigned.
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API.GetTranslatorFunction">
            <summary>
            Returns the assigned translator function. Returns null if no Translatorfucntion is assigned.
            </summary>
            <returns>assigned translator function</returns>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API.HardwareId">
            <summary>
            Returns the HardwareID of this component.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITranslatable_API.Name">
            <summary>
            Returns the Name of this component
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Translator.ITransfunc">
            <summary>
            COM-Inteface for the Translatorfunction. Makes Methods of the Translatorfunction visible for COM.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITransfunc.Name">
            <summary>
            Name of the Translatorfunction. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITransfunc.Type">
            <summary>
            Returns the Type how the Translatorfunction is defined.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITransfunc.FunctionType">
            <summary>
            Returns the Type how the Translatorfunction is defined.
            0 = LINEAR, 1 = PIECEWISE, 2 = NOT_SUPPORTED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITransfunc.Unit">
            <summary>
            Unit of the physical value which is transformed by the translator function
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITransfunc.Definiton">
            <summary>
            Definition how the function is defined - simplified as a string
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.ITransfunc.Definition">
            <summary>
            Definition how the function is defined - simplified as a string
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITransfunc.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current TranslatorFunction.</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITransfunc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunctionType">
            <summary>
            Type of a Translatorfunction - how the function is defined
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunctionType.LINEAR">
            <summary>
            Defined by a linear function
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunctionType.PIECEWISE">
            <summary>
            Defiend by a charasteristc field/matrix
            </summary>
        </member>
        <member name="F:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunctionType.NOT_SUPPORTED">
            <summary>
            All other Types are not supported by the API until now.
            </summary>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction">
            <summary>
            A Translatorfunction converts a physical value into a electrical value. 
            After assigning a Translatorfunction to a component the value which is 
            set will automaticly transformed to the correct electrical Value on the MicroLC
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction.Name">
            <summary>
            Name of the Translatorfunction. 
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction.Type">
            <summary>
            Returns the Type how the Translatorfunction is defined.
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction.FunctionType">
            <summary>
            Returns the Type how the Translatorfunction is defined.
            0 = LINEAR, 1 = PIECEWISE, 2 = NOT_SUPPORTED
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction.Unit">
            <summary>
            Unit of the physical value which is transformed by the translator function
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction.Definiton">
            <summary>
            Definition how the function is defined - simplified as a string
            </summary>
        </member>
        <member name="P:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction.Definition">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns> true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current TranslatorFunction.</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction.op_Equality(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction,bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            the equality operator (==) returns true if the values of its operands are equal, false otherwise.
            </summary>
            <param name="a">operand1</param>
            <param name="b">operand2</param>
            <returns>true if the values of its operands are equal, false otherwise</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction.op_Inequality(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction,bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            The inequality operator (!=) returns false if its operands are equal, true otherwise.
            </summary>
            <param name="a">operand1</param>
            <param name="b">operand2</param>
            <returns>false if its operands are equal, true otherwise.</returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Translator.ITranslatorManager">
            <summary>
            Default Interface specifices the components which are visible over COM
            </summary>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITranslatorManager.CreateTranslatorFunction(System.String,System.String,System.Double,System.Double,System.Double,System.Double,bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <summary>
            Create a Translatorfunction defined by a linear Function
            </summary>
            <param name="name">Name for the Function</param>
            <param name="unit">Unit of the translated values</param>
            <param name="m">slope of the function</param>
            <param name="b">interception with the y-axes</param>
            <param name="min">min allowed value in original unit without Translator</param>
            <param name="max">max alowed value in original unit without Translator</param>
            <param name="component">component for which the function should be defined</param>
            <returns>a Translatorfunction</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITranslatorManager.CreateTranslatorFunction(System.String,System.String,System.Double[],System.Double[],bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <summary>
            Creates a TranslatorFunction defined by a Matrix of values
            </summary>
            <param name="name">Name for the Function</param>
            <param name="unit">Unit of the translated values</param>
            <param name="xValues">All x values</param>
            <param name="yValues"> All y values (index should be fitting the x-values</param>
            <param name="component">component for which the function should be defined</param>
            <returns>a Translatorfunction</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITranslatorManager.CreateTranslatorFunction_2(System.String,System.String,System.Double[],System.Double[],bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <summary>
            FOR COM! Use CreateTranslatorFunction(string name, string unit, double[] xValues, double[] yValues, TranslatorAssign component) otherwise
            Creates a TranslatorFunction defined by a Matrix of values
            </summary>
            <param name="name">Name for the Function</param>
            <param name="unit">Unit of the translated values</param>
            <param name="xValues">All x values</param>
            <param name="yValues"> All y values (index should be fitting the x-values</param>
            <param name="component">component for which the function should be defined</param>
            <returns>a Translatorfunction</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITranslatorManager.RemoveTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <summary>
            Removes (Deletes) a existing TranslatorFunction. Nothing happens if the Function is already removed.
            </summary>
            <param name="translatorFunction">translator function which should be deleted</param>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITranslatorManager.TranslatorFunctionOfKindCount(bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <summary>
            Get the count of the current available TranslatorFunctions of a component
            </summary>
            <param name="component">the component for which the TranslatorFunction can be assigned</param>
            <returns>the number of Translatorfunctions for this component</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITranslatorManager.GetTranslatorFunctionOfKindAt(System.Int32,bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <summary>
            Return the available TranslatorFunction of a component at a specific index
            </summary>
            <param name="index">index of the Translatorfunction</param>
            <param name="component">Component where the Translatorfunction can be applied to</param>
            <returns>TranslatorFucntion at specific index</returns>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.ITranslatorManager.GetAllTranslatorFunctionsOfKindCOM(bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <summary>
            Return all available TranslatorFunction of a component
            </summary>
            <param name="component">Component where the Translatorfunction can be applied to</param>
            <returns>List of TranslatorFucntions</returns>
        </member>
        <member name="T:bosch.de.abt.beg.microLC.API.Translator.TranslatorManager">
            <summary>
            An Instance of this Manager is created by the MicroLCManager. This class is able to manage all the Translatorfunctions for every possible component
            </summary>     
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorManager.CreateTranslatorFunction(System.String,System.String,System.Double,System.Double,System.Double,System.Double,bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorManager.CreateTranslatorFunction(System.String,System.String,System.Double[],System.Double[],bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorManager.CreateTranslatorFunction_2(System.String,System.String,System.Double[],System.Double[],bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorManager.RemoveTranslatorFunction(bosch.de.abt.beg.microLC.API.Translator.TranslatorFunction)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorManager.GetAllTranslatorFunctionsOfKind(bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorManager.GetAllTranslatorFunctionsOfKindCOM(bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <inheritdoc/>
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorManager.TranslatorFunctionOfKindCount(bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <inheritdoc />
        </member>
        <member name="M:bosch.de.abt.beg.microLC.API.Translator.TranslatorManager.GetTranslatorFunctionOfKindAt(System.Int32,bosch.de.abt.beg.microLC.API.Translator.TranslatorAssign)">
            <inheritdoc />
        </member>
    </members>
</doc>
